# This file is part of HiGFXback

# requires
REQUIRES="libpng-build meson-build tiff-build"

PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libxcb-build; then
  XCB=1
  REQUIRES="$REQUIRES libxcb-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libx11-build; then
  XLIB=1
  REQUIRES="$REQUIRES libx11-build"
fi

test $XLIB || test $XCB || { echo Xlib or XCB packages required; exit 1; }

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  EGL_OPENGL="-Degl-fbdev=false -Dgl=false -Dglesv1_cm=false"
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists glslang-build vulkan-loader-build; then
  VK=1
  VULKAN="-Dvk-d2d=false"
  REQUIRES="$REQUIRES glslang-build vulkan-loader-build"
fi

test $GL || test $VK || { echo OpenGL or Vulkan packages required; exit 1; }

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists sdl2-build; then
  SDL2=1
  REQUIRES="$REQUIRES sdl2-build"
fi

# configure
PKG_CONFIG_PATH=/x11/lib/pkgconfig meson setup $EGL_OPENGL $VULKAN --prefix=/x11 build

# build
meson compile -C build

# install
install -d $DESTDIR/x11/bin
test $GL && install build/yagears2 $DESTDIR/x11/bin
test $GL && test $SDL2 && install build/yagears2-gui $DESTDIR/x11/bin
test $VK && install build/yagears2-vk $DESTDIR/x11/bin
test $VK && test $SDL2 && install build/yagears2-vk-gui $DESTDIR/x11/bin

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/yagears2-build.pc << EOF
Name: yagears
Version: 2.5
Description: Yet Another Gears OpenGL / Vulkan demo
Requires: $REQUIRES

exec=\\
EOF
test $GL && echo /x11/bin/yagears2 \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $GL && test $SDL2 && echo /x11/bin/yagears2-gui \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $VK && echo /x11/bin/yagears2-vk \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $VK && test $SDL2 && echo /x11/bin/yagears2-vk-gui \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
sed -i '$ s/ \\//' $DESTDIR/x11/share/pkgconfig/yagears2-build.pc

exit
--- yagears-2.5.orig/CMakeLists.txt
+++ yagears-2.5/CMakeLists.txt
@@ -61,12 +61,12 @@
   pkg_check_modules(GL gl)
   if(GL_FOUND)
     if(ENABLE_GLESV1_CM)
-      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
     endif()
     if(ENABLE_GLESV2)
       find_program(XXD xxd)
       if(XXD)
-        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
       else()
         set(ENABLE_GLESV2 OFF)
       endif()
@@ -83,7 +83,7 @@
   if(ENABLE_GLESV1_CM)
     pkg_check_modules(GLESV1_CM glesv1_cm)
     if(GLESV1_CM_FOUND)
-      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so")
+      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so.1")
       set(GLESV1_CM_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV1_CM OFF)
@@ -94,7 +94,7 @@
     pkg_check_modules(GLESV2 glesv2)
     find_program(XXD xxd)
     if(GLESV2_FOUND AND XXD)
-      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so")
+      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so.2")
       set(GLESV2_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV2 OFF)
@@ -103,7 +103,7 @@
 endif()
 
 if(NOT ENABLE_GL AND NOT ENABLE_GLESV1_CM AND NOT ENABLE_GLESV2)
-  message(FATAL_ERROR "No OpenGL Engines found")
+  message(WARNING "No OpenGL Engines found")
 endif()
 
 # OpenGL Backends
@@ -252,7 +252,7 @@
 set(EGL_RPI ${ENABLE_EGL_RPI})
 
 if(NOT ENABLE_GL_X11 AND NOT ENABLE_GL_DIRECTFB AND NOT ENABLE_GL_FBDEV AND NOT ENABLE_EGL_X11 AND NOT ENABLE_EGL_DIRECTFB AND NOT ENABLE_EGL_FBDEV AND NOT ENABLE_EGL_WAYLAND AND NOT ENABLE_EGL_XCB AND NOT ENABLE_EGL_DRM AND NOT ENABLE_EGL_RPI)
-  message(FATAL_ERROR "No OpenGL Backends found")
+  message(WARNING "No OpenGL Backends found")
 endif()
 
 # Vulkan WSIs
--- yagears-2.5.orig/configure.ac
+++ yagears-2.5/configure.ac
@@ -128,12 +128,12 @@
   PKG_CHECK_MODULES(GL, gl, , enable_gl=no)
   if test x$enable_gl = xyes; then
     if test x$enable_glesv1_cm = xyes; then
-      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
     fi
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
       else
         enable_glesv2=no
       fi
@@ -148,7 +148,7 @@
   if test x$enable_glesv1_cm = xyes; then
     PKG_CHECK_MODULES(GLESV1_CM, glesv1_cm, , enable_glesv1_cm=no)
     if test x$enable_glesv1_cm = xyes; then
-      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so\\\""
+      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so.1\\\""
       GLESV1_CM_LIBS=-ldl
     fi
   fi
@@ -158,7 +158,7 @@
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so\\\""
+        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so.2\\\""
         GLESV2_LIBS=-ldl
       else
         enable_glesv2=no
@@ -168,7 +168,7 @@
 fi
 
 if test x$enable_gl = xno -a x$enable_glesv1_cm = xno -a x$enable_glesv2 = xno; then
-  AC_MSG_ERROR(No OpenGL Engines found)
+  AC_MSG_WARN(No OpenGL Engines found)
 fi
 
 # OpenGL Backends
@@ -305,7 +305,7 @@
 fi
 
 if test x$enable_gl_x11 = xno -a x$enable_gl_directfb = xno -a x$enable_gl_fbdev = xno -a x$enable_egl_x11 = xno -a x$enable_egl_directfb = xno -a x$enable_egl_fbdev = xno -a x$enable_egl_wayland = xno -a x$enable_egl_xcb = xno -a x$enable_egl_drm = xno -a x$enable_egl_rpi = xno; then
-  AC_MSG_ERROR(No OpenGL Backends found)
+  AC_MSG_WARN(No OpenGL Backends found)
 fi
 
 # Vulkan WSIs
--- yagears-2.5.orig/gui.cc
+++ yagears-2.5/gui.cc
@@ -1229,6 +1229,7 @@
   #if defined(SDL)
   if (!strcmp(toolkit, "sdl")) {
     #if SDL_VERSION_ATLEAST(2, 0, 0)
+    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, gears_engine_version(gears_engine) ? SDL_GL_CONTEXT_PROFILE_ES : 0);
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_OPENGL);
     SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, gears_engine_version(gears_engine));
     SDL_GL_CreateContext(sdl_win);
--- yagears-2.5.orig/main.c
+++ yagears-2.5/main.c
@@ -1494,6 +1494,8 @@
       goto out;
     }
 
+    XInternAtom(x11_dpy, "WM_DELETE_WINDOW", True);
+
     XMapWindow(x11_dpy, x11_win);
 
     XMoveWindow(x11_dpy, x11_win, win_posx, win_posy);
--- yagears-2.5.orig/meson.build
+++ yagears-2.5/meson.build
@@ -55,12 +55,12 @@
   gl_dep = dependency('gl', required: false)
   if gl_dep.found()
     if enable_glesv1_cm
-      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
     endif
     if enable_glesv2
       xxd = find_program('xxd', required: false)
       if xxd.found()
-        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
       else
         enable_glesv2 = false
       endif
@@ -79,8 +79,8 @@
   if enable_glesv1_cm
     glesv1_cm_dep = dependency('glesv1_cm', required: false)
     if glesv1_cm_dep.found()
-      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm').stdout().strip().split(' '))
-      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
+      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm', check: true).stdout().strip().split(' '))
+      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so.1"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
     else
       enable_glesv1_cm = false
     endif
@@ -90,8 +90,8 @@
     glesv2_dep = dependency('glesv2', required: false)
     xxd = find_program('xxd', required: false)
     if glesv2_dep.found() and xxd.found()
-      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2').stdout().strip().split(' '))
-      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so"'], link_args: '-ldl', dependencies: glesv2_dep)
+      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2', check: true).stdout().strip().split(' '))
+      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so.2"'], link_args: '-ldl', dependencies: glesv2_dep)
     else
       enable_glesv2 = false
     endif
@@ -99,7 +99,7 @@
 endif
 
 if not enable_gl and not enable_glesv1_cm and not enable_glesv2
-  error('No OpenGL Engines found')
+  warning('No OpenGL Engines found')
 endif
 
 # OpenGL Backends
@@ -108,7 +108,7 @@
 directfb_dep = []
 if enable_gl
   if enable_gl_x11
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if cc.has_function('glXCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       x11_dep = dependency('x11', required: false)
       if not x11_dep.found()
@@ -121,8 +121,8 @@
 
   if enable_gl_directfb
     message('Checking for DirectFBGL module')
-    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal').stdout().strip()
-    if run_command('test', '-d', moduledir + '/interfaces/IDirectFBGL').returncode() == 0
+    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal', check: false).stdout().strip()
+    if import('fs').is_dir(moduledir + '/interfaces/IDirectFBGL')
       message('DirectFBGL found')
       directfb_dep = dependency('directfb', required: false)
       if not directfb_dep.found()
@@ -135,7 +135,7 @@
   endif
 
   if enable_gl_fbdev
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if not cc.has_function('glFBDevCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       enable_gl_fbdev = false
     endif
@@ -203,7 +203,7 @@
           config_h.set('HAVE_WL_SHELL_SURFACE_SET_POSITION', false, description: 'Have function wl_shell_surface_set_position')
         endif
 
-        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client').stdout().strip())]
+        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client', check: true).stdout().strip())]
       endif
     endif
 
@@ -222,8 +222,8 @@
         endif
       endforeach
       if enable_egl_drm
-        dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri').stdout().strip()
-        modversion = run_command('pkg-config', '--modversion', 'dri')
+        dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri', check: true).stdout().strip()
+        modversion = run_command('pkg-config', '--modversion', 'dri', check: true)
         drimajorversion = modversion.stdout().split('.')[0]
         driminorversion = modversion.stdout().split('.')[1]
         drm_dep = declare_dependency(compile_args: ['-DDRI_DRIVERDIR="@0@"'.format(dridriverdir), '-DDRI_MAJOR_VERSION=@0@'.format(drimajorversion), '-DDRI_MINOR_VERSION=@0@'.format(driminorversion)], link_args: '-ldl', dependencies: drm_dep)
@@ -255,7 +255,7 @@
 config_h.set('EGL_RPI', enable_egl_rpi, description: 'Support for EGL with Raspberry Pi Dispmanx platform')
 
 if not enable_gl_x11 and not enable_gl_directfb and not enable_gl_fbdev and not enable_egl_x11 and not enable_egl_directfb and not enable_egl_fbdev and not enable_egl_wayland and not enable_egl_xcb and not enable_egl_drm and not enable_egl_rpi
-  error('No OpenGL Backends found')
+  warning('No OpenGL Backends found')
 endif
 
 # Vulkan WSIs
@@ -266,7 +266,7 @@
   vulkan_dep = dependency('vulkan', required: false)
   glslang_validator = find_program('glslangValidator', required: false)
   if vulkan_dep.found() and glslang_validator.found()
-    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan', check: true).stdout().strip()
 
     if enable_vk_x11
       if cc.has_function('vkCreateXlibSurfaceKHR', dependencies: cc.find_library('vulkan', dirs: libdir))
@@ -391,7 +391,7 @@
 if enable_fltk
   fltk_config = find_program('fltk-config', required: false)
   if fltk_config.found()
-    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags').stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags').stdout().strip().split(' '))
+    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags', check: true).stdout().strip().split(' '))
   else
     enable_fltk = false
   endif
@@ -508,7 +508,7 @@
 if enable_wx
   wx_config = find_program('wx-config', required: false)
   if wx_config.found()
-    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags').stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl').stdout().strip().split(' '))
+    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl', check: true).stdout().strip().split(' '))
   else
     enable_wx = false
   endif
@@ -686,7 +686,7 @@
 
 if VK_GUI
 executable('yagears2-vk-gui',
-           'vk-gui.cc', 'vulkan_gears.c', 'image_loader.c', png_source, tiff_source,
+           'vk-gui.cc', 'vulkan_gears.c', vert_spv_file, frag_spv_file, 'image_loader.c', png_source, tiff_source,
            dependencies: [vulkan_dep, png_dep, tiff_dep, glfw_dep, sdl_dep],
            install: true)
 endif
