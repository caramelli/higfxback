# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build egl-opengl-stubs-build gtk2-build"

PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure (ac-2.69; am-1.12; lt-2.4.2)
libtoolize -c -f; aclocal -I m4; autoconf; autoheader -f; automake -a -c
PKG_CONFIG_PATH=/x11/lib/pkgconfig LDFLAGS=-Wl,-rpath,/x11/lib ./configure --disable-static --prefix=/x11

# build
make

# install
install -d $DESTDIR/x11/include/gtkgl-2.0/gtkgl
install -m 644 gtkgl/gdkgl.h $DESTDIR/x11/include/gtkgl-2.0/gtkgl
install -m 644 gtkgl/gtkglarea.h $DESTDIR/x11/include/gtkgl-2.0/gtkgl
install -d $DESTDIR/x11/lib
install gtkgl/.libs/libgtkgl-2.0.so.1.* $DESTDIR/x11/lib/libgtkgl-2.0.so.1
ln -sf libgtkgl-2.0.so.1 $DESTDIR/x11/lib/libgtkgl-2.0.so
install -d $DESTDIR/x11/lib/pkgconfig
install -m 644 gtkgl-2.0.pc $DESTDIR/x11/lib/pkgconfig
install -d $DESTDIR/x11/share/gtk-2.0/tests
install -m 644 examples/alien.lwo $DESTDIR/x11/share/gtk-2.0/tests
install -m 644 examples/penguin.lwo $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/glpixmap $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/gtkglarea_demo $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/shaders $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/simple $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/viewlw $DESTDIR/x11/share/gtk-2.0/tests
install examples/.libs/zktor $DESTDIR/x11/share/gtk-2.0/tests

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/gtkglarea2-build.pc << EOF
Name: gtkglarea
Version: 2.1.0
Description: GTK OpenGL widget
Requires: $REQUIRES

devel=\\
/x11/include/gtkgl-2.0/gtkgl/gdkgl.h \\
/x11/include/gtkgl-2.0/gtkgl/gtkglarea.h \\
/x11/lib/libgtkgl-2.0.so \\
/x11/lib/pkgconfig/gtkgl-2.0.pc

exec=\\
/x11/lib/libgtkgl-2.0.so.1 \\
/x11/share/gtk-2.0/tests/alien.lwo \\
/x11/share/gtk-2.0/tests/glpixmap \\
/x11/share/gtk-2.0/tests/gtkglarea_demo \\
/x11/share/gtk-2.0/tests/penguin.lwo \\
/x11/share/gtk-2.0/tests/shaders \\
/x11/share/gtk-2.0/tests/simple \\
/x11/share/gtk-2.0/tests/viewlw \\
/x11/share/gtk-2.0/tests/zktor
EOF

exit
--- gtkglarea-2.1.0.orig/configure.ac
+++ gtkglarea-2.1.0/configure.ac
@@ -40,6 +40,7 @@
 dnl Checks for programs.
 AC_PROG_CC
 AC_PROG_CPP
+AM_PROG_AR
 
 dnl Initialize libtool
 LT_PREREQ([2.2.6])
--- gtkglarea-2.1.0.orig/examples/glpixmap.c
+++ gtkglarea-2.1.0/examples/glpixmap.c
@@ -90,9 +90,10 @@
     glVertex2f(10,90);
     glVertex2f(90,90);
     glEnd();
+
+    gdk_gl_pixmap_unref(glpixmap);
   }
   gdk_gl_context_unref(context);
-  gdk_gl_pixmap_unref(glpixmap);
 
 
   /* pixmapwidget */
--- gtkglarea-2.1.0.orig/examples/gtkglarea_demo.c
+++ gtkglarea-2.1.0/examples/gtkglarea_demo.c
@@ -307,6 +307,9 @@
 
 gint glarea_draw (GtkWidget* widget, GdkEventExpose* event) {
 
+  int w = widget->allocation.width;
+  int h = widget->allocation.height;
+
   /* Draw only on the last expose event. */
 
   if (event->count > 0) {
@@ -329,6 +332,13 @@
     /* Insert your drawing code here. */
     /*                                */
 
+    glColor3f (1, 1, 1);
+    glBegin (GL_TRIANGLES);
+    glVertex2f (10, 10);
+    glVertex2f (10, (h>>1) - 10);
+    glVertex2f ((w>>1) - 10, (h>>1) - 10);
+    glEnd();
+
     /* Swap the back and front buffers. Using doublebuffers */
     /* is definitely recommended! Take a look at the red    */
     /* book if you don't already have an understanding of   */
@@ -374,7 +384,7 @@
     glViewport (0, 0, w, h);
     glMatrixMode (GL_PROJECTION);
     glLoadIdentity ();
-    glOrtho (-(w>>1), (w>>1), -(h>>1), h>>1, -1, 1);
+    glOrtho (0, w>>1, h>>1, 0, -1, 1);
     glMatrixMode (GL_MODELVIEW);
 
   }
--- gtkglarea-2.1.0.orig/gtkgl/gdkgl.c
+++ gtkglarea-2.1.0/gtkgl/gdkgl.c
@@ -533,7 +533,7 @@
 gdk_gl_pixmap_new(GdkVisual *visual, GdkPixmap *pixmap)
 {
   GdkGLPixmap *glpixmap;
-#ifndef GDK_WINDOWING_WIN32
+#if defined GDK_WINDOWING_X11
   Display *dpy;
   XVisualInfo *vi;
   Pixmap xpixmap;
@@ -541,7 +541,7 @@
   Window root_return;
   unsigned int w_ret, h_ret, bw_ret, depth_ret;
   int x_ret, y_ret;
-#elif defined GDK_WINDOWING_X11
+#elif defined GDK_WINDOWING_WIN32
 #else
   g_warning ("gdk_gl_pixmap_new not implemented on " PLATFORM);
   return NULL;
@@ -588,11 +588,11 @@
 
 gint gdk_gl_pixmap_make_current(GdkGLPixmap *glpixmap, GdkGLContext *context)
 {
-#ifndef GDK_WINDOWING_WIN32
+#if defined GDK_WINDOWING_X11
   Display  *dpy;
   GLXPixmap glxpixmap;
   GLXContext glxcontext;
-#elif defined GDK_WINDOWING_X11
+#elif defined GDK_WINDOWING_WIN32
 #else
   g_warning ("gdk_gl_pixmap_make_current not implemented on " PLATFORM);
   return 0;
@@ -695,9 +695,6 @@
 
   while (*p) {
     switch (*p) {
-    case GDK_GL_USE_GL:
-      pfd->dwFlags |= PFD_SUPPORT_OPENGL;
-      break;
     case GDK_GL_BUFFER_SIZE:
       pfd->cColorBits = *(++p);
       break;
--- gtkglarea-2.1.0.orig/gtkgl/gdkgl.h
+++ gtkglarea-2.1.0/gtkgl/gdkgl.h
@@ -39,8 +39,8 @@
  * attributes with these, but then you lose portability.
  */
 enum _GDK_GL_CONFIGS {
-        GDK_GL_NONE             = 0,
-	GDK_GL_USE_GL		= 1,
+	GDK_GL_NONE             = 0,
+	GDK_GL_USE_ES		= 1,
 	GDK_GL_BUFFER_SIZE	= 2,
 	GDK_GL_LEVEL		= 3,
 	GDK_GL_RGBA		= 4,
