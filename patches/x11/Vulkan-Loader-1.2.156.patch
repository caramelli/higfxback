# This file is part of HiGFXback

# requires
REQUIRES="cmake3-build vulkan-headers-build"

PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

#libxrandr-build

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libxcb-build; then
  XCB=1
  REQUIRES="$REQUIRES libxcb-build"
else
  BUILD_WSI=-DBUILD_WSI_XCB_SUPPORT=OFF
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libxrandr-build; then
  XLIB=1
  REQUIRES="$REQUIRES libxrandr-build"
else
  BUILD_WSI=-DBUILD_WSI_XLIB_SUPPORT=OFF
fi

test $XLIB || test $XCB || { echo Xlib or XCB packages required; exit 1; }

# configure
GENERATOR=${GENERATOR-Unix Makefiles}
PKG_CONFIG_PATH=/x11/lib/pkgconfig cmake $BUILD_WSI -DBUILD_WSI_WAYLAND_SUPPORT=OFF -DCMAKE_INSTALL_PREFIX=/x11 -B build -G "$GENERATOR"

# build
cmake --build build

# install
install -d $DESTDIR/x11/lib
install build/loader/libvulkan.so.1.* $DESTDIR/x11/lib/libvulkan.so.1
ln -sf libvulkan.so.1 $DESTDIR/x11/lib/libvulkan.so
install -d $DESTDIR/x11/lib/pkgconfig
install -m 644 build/loader/vulkan.pc $DESTDIR/x11/lib/pkgconfig

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/vulkan-loader-build.pc << EOF
Name: Vulkan-Loader
Version: 1.2.156
Description: Vulkan Installable Client Driver (ICD) loader
Requires: $REQUIRES

devel=\\
/x11/lib/libvulkan.so \\
/x11/lib/pkgconfig/vulkan.pc

exec=\\
/x11/lib/libvulkan.so.1
EOF

exit
--- Vulkan-Loader-1.2.156.orig/CMakeLists.txt
+++ Vulkan-Loader-1.2.156/CMakeLists.txt
@@ -30,7 +30,7 @@
 add_definitions(-DVK_ENABLE_BETA_EXTENSIONS)
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
-find_package(PythonInterp 3 QUIET)
+find_package(Python3 QUIET)
 
 if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/external/googletest)
     option(BUILD_TESTS "Build Tests" ON)
@@ -192,9 +192,9 @@
 endif()
 
 # Optional codegen target
-if(PYTHONINTERP_FOUND)
+if(Python3_Interpreter_FOUND)
     add_custom_target(VulkanLoader_generated_source
-                      COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/generate_source.py
+                      COMMAND Python3::Interpreter ${PROJECT_SOURCE_DIR}/scripts/generate_source.py
                               ${VulkanRegistry_DIR} --incremental
                       )
 else()
--- Vulkan-Loader-1.2.156.orig/cmake/FindX11.cmake
+++ Vulkan-Loader-1.2.156/cmake/FindX11.cmake
@@ -0,0 +1,23 @@
+# Try to find libX11
+#
+# This will define:
+#
+#   X11_FOUND       - True if libX11 is found
+#   X11_INCLUDE_DIR - Include directory for DirectFB
+#   X11_LIBRARIES   - Link these to use DirectFB
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+find_package(PkgConfig)
+pkg_check_modules(PC_X11 QUIET x11)
+
+find_path(X11_INCLUDE_DIR NAMES X11/Xlib.h HINTS ${PC_X11_INCLUDE_DIRS})
+
+find_library(X11_LIBRARIES NAMES X11 HINTS ${PC_X11_LIBRARY_DIRS})
+
+include(FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(X11 DEFAULT_MSG X11_LIBRARIES X11_INCLUDE_DIR)
+
+mark_as_advanced(X11_INCLUDE_DIR X11_LIBRARIES)
--- Vulkan-Loader-1.2.156.orig/loader/CMakeLists.txt
+++ Vulkan-Loader-1.2.156/loader/CMakeLists.txt
@@ -254,7 +254,7 @@
                                      "1"
                                      VERSION
                                      "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}")
-    target_link_libraries(vulkan ${CMAKE_DL_LIBS} pthread m)
+    target_link_libraries(vulkan ${CMAKE_DL_LIBS} rt m)
     target_link_libraries(vulkan Vulkan::Headers)
     if(APPLE)
         find_library(COREFOUNDATION_LIBRARY NAMES CoreFoundation)
