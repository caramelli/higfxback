# This file is part of HiGFXback

# requires
REQUIRES="cmake3-build egl-opengl-stubs-build glad-build libxcursor-build libxi-build libxinerama-build libxrandr-build linmath-build stb-build tinycthread-build"

PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists vulkan-loader-build; then
  VK=1
  REQUIRES="$REQUIRES vulkan-loader-build"
fi

# configure
GENERATOR=${GENERATOR-Unix Makefiles}
rm -rf deps
PKG_CONFIG_PATH=/x11/lib/pkgconfig cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/x11 -B build -G "$GENERATOR"

# build
cmake --build build

# install
install -d $DESTDIR/x11/bin
install build/tests/glfwinfo $DESTDIR/x11/bin
install -d $DESTDIR/x11/include/GLFW
install -m 644 include/GLFW/glfw3.h $DESTDIR/x11/include/GLFW
install -d $DESTDIR/x11/lib
install build/src/libglfw.so.3.* $DESTDIR/x11/lib/libglfw.so.3
ln -sf libglfw.so.3 $DESTDIR/x11/lib/libglfw.so
install -d $DESTDIR/x11/lib/pkgconfig
install -m 644 build/src/glfw3.pc $DESTDIR/x11/lib/pkgconfig
install -d $DESTDIR/x11/share/glfw3/examples
install build/examples/boing $DESTDIR/x11/share/glfw3/examples
install build/examples/gears $DESTDIR/x11/share/glfw3/examples
install build/examples/offscreen $DESTDIR/x11/share/glfw3/examples
install build/examples/particles $DESTDIR/x11/share/glfw3/examples
install build/examples/sharing $DESTDIR/x11/share/glfw3/examples
install build/examples/simple $DESTDIR/x11/share/glfw3/examples/triangle-opengl
install build/examples/splitview $DESTDIR/x11/share/glfw3/examples
install build/examples/wave $DESTDIR/x11/share/glfw3/examples
install build/tests/clipboard $DESTDIR/x11/share/glfw3/examples
install build/tests/cursor $DESTDIR/x11/share/glfw3/examples
install build/tests/empty $DESTDIR/x11/share/glfw3/examples
install build/tests/events $DESTDIR/x11/share/glfw3/examples
install build/tests/icon $DESTDIR/x11/share/glfw3/examples
install build/tests/iconify $DESTDIR/x11/share/glfw3/examples
install build/tests/monitors $DESTDIR/x11/share/glfw3/examples
install build/tests/msaa $DESTDIR/x11/share/glfw3/examples
install build/tests/reopen $DESTDIR/x11/share/glfw3/examples
install build/tests/tearing $DESTDIR/x11/share/glfw3/examples
install build/tests/threads $DESTDIR/x11/share/glfw3/examples
install build/tests/timeout $DESTDIR/x11/share/glfw3/examples
install build/tests/title $DESTDIR/x11/share/glfw3/examples
test $VK && install build/tests/triangle-vulkan $DESTDIR/x11/share/glfw3/examples
install build/tests/windows $DESTDIR/x11/share/glfw3/examples

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/glfw-build.pc << EOF
Name: glfw
Version: 3.3.8
Description: OpenGL Framework
Requires: $REQUIRES

devel=\\
/x11/include/GLFW/glfw3.h \\
/x11/lib/libglfw.so \\
/x11/lib/pkgconfig/glfw3.pc

exec=\\
/x11/bin/glfwinfo \\
/x11/lib/libglfw.so.3 \\
/x11/share/glfw3/examples/boing \\
/x11/share/glfw3/examples/clipboard \\
/x11/share/glfw3/examples/cursor \\
/x11/share/glfw3/examples/empty \\
/x11/share/glfw3/examples/events \\
/x11/share/glfw3/examples/gears \\
/x11/share/glfw3/examples/icon \\
/x11/share/glfw3/examples/iconify \\
/x11/share/glfw3/examples/monitors \\
/x11/share/glfw3/examples/msaa \\
/x11/share/glfw3/examples/offscreen \\
/x11/share/glfw3/examples/particles \\
/x11/share/glfw3/examples/reopen \\
/x11/share/glfw3/examples/sharing \\
/x11/share/glfw3/examples/splitview \\
/x11/share/glfw3/examples/tearing \\
/x11/share/glfw3/examples/threads \\
/x11/share/glfw3/examples/timeout \\
/x11/share/glfw3/examples/title \\
/x11/share/glfw3/examples/triangle-opengl \\
EOF
test $VK && echo /x11/share/glfw3/examples/triangle-vulkan \\ >> $DESTDIR/x11/share/pkgconfig/glfw-build.pc
cat >> $DESTDIR/x11/share/pkgconfig/glfw-build.pc << EOF
/x11/share/glfw3/examples/wave \\
/x11/share/glfw3/examples/windows
EOF

exit
--- glfw-3.3.8.orig/CMakeLists.txt
+++ glfw-3.3.8/CMakeLists.txt
@@ -204,36 +204,41 @@
 # Use X11 for window creation
 #--------------------------------------------------------------------
 if (_GLFW_X11)
-
-    find_package(X11 REQUIRED)
+    find_package(PkgConfig)
+    pkg_check_modules(X11 REQUIRED x11)
 
     list(APPEND glfw_PKG_DEPS "x11")
 
     # Set up library and include paths
-    list(APPEND glfw_INCLUDE_DIRS "${X11_X11_INCLUDE_PATH}")
-    list(APPEND glfw_LIBRARIES "${X11_X11_LIB}" "${CMAKE_THREAD_LIBS_INIT}")
+    list(APPEND glfw_INCLUDE_DIRS "${X11_INCLUDE_DIRS}")
+    list(APPEND glfw_LIBRARIES "${X11_LINK_LIBRARIES}" "${CMAKE_THREAD_LIBS_INIT}")
 
     # Check for XRandR (modern resolution switching and gamma control)
+    find_path(X11_Xrandr_INCLUDE_PATH X11/extensions/Xrandr.h ${X11_INCLUDE_DIRS})
     if (NOT X11_Xrandr_INCLUDE_PATH)
         message(FATAL_ERROR "RandR headers not found; install libxrandr development package")
     endif()
 
     # Check for Xinerama (legacy multi-monitor support)
+    find_path(X11_Xinerama_INCLUDE_PATH X11/extensions/Xinerama.h ${X11_INCLUDE_DIRS})
     if (NOT X11_Xinerama_INCLUDE_PATH)
         message(FATAL_ERROR "Xinerama headers not found; install libxinerama development package")
     endif()
 
     # Check for Xkb (X keyboard extension)
+    find_path(X11_Xkb_INCLUDE_PATH X11/extensions/XKB.h ${X11_INCLUDE_DIRS})
     if (NOT X11_Xkb_INCLUDE_PATH)
         message(FATAL_ERROR "XKB headers not found; install X11 development package")
     endif()
 
     # Check for Xcursor (cursor creation from RGBA images)
+    find_path(X11_Xcursor_INCLUDE_PATH X11/Xcursor/Xcursor.h ${X11_INCLUDE_DIRS})
     if (NOT X11_Xcursor_INCLUDE_PATH)
         message(FATAL_ERROR "Xcursor headers not found; install libxcursor development package")
     endif()
 
     # Check for XInput (modern HID input)
+    find_path(X11_Xi_INCLUDE_PATH X11/extensions/XInput2.h ${X11_INCLUDE_DIRS})
     if (NOT X11_Xi_INCLUDE_PATH)
         message(FATAL_ERROR "XInput headers not found; install libxi development package")
     endif()
--- glfw-3.3.8.orig/examples/CMakeLists.txt
+++ glfw-3.3.8/examples/CMakeLists.txt
@@ -1,8 +1,6 @@
 
 link_libraries(glfw)
 
-include_directories("${GLFW_SOURCE_DIR}/deps")
-
 if (MATH_LIBRARY)
     link_libraries("${MATH_LIBRARY}")
 endif()
@@ -29,27 +27,68 @@
 
 endif()
 
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/glad/gl.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/glad_gl.c")
 set(GLAD_GL "${GLFW_SOURCE_DIR}/deps/glad/gl.h"
             "${GLFW_SOURCE_DIR}/deps/glad_gl.c")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/getopt.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/getopt.c")
 set(GETOPT "${GLFW_SOURCE_DIR}/deps/getopt.h"
            "${GLFW_SOURCE_DIR}/deps/getopt.c")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/stb_image_write.h")
+set(STB_IMAGE_WRITE "${GLFW_SOURCE_DIR}/deps/stb_image_write.h")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/tinycthread.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/tinycthread.c")
 set(TINYCTHREAD "${GLFW_SOURCE_DIR}/deps/tinycthread.h"
                 "${GLFW_SOURCE_DIR}/deps/tinycthread.c")
+endif()
 
 add_executable(boing WIN32 MACOSX_BUNDLE boing.c ${ICON} ${GLAD_GL})
 add_executable(gears WIN32 MACOSX_BUNDLE gears.c ${ICON} ${GLAD_GL})
 add_executable(heightmap WIN32 MACOSX_BUNDLE heightmap.c ${ICON} ${GLAD_GL})
-add_executable(offscreen offscreen.c ${ICON} ${GLAD_GL})
+add_executable(offscreen offscreen.c ${ICON} ${GLAD_GL} ${STB_IMAGE_WRITE})
 add_executable(particles WIN32 MACOSX_BUNDLE particles.c ${ICON} ${TINYCTHREAD} ${GETOPT} ${GLAD_GL})
 add_executable(sharing WIN32 MACOSX_BUNDLE sharing.c ${ICON} ${GLAD_GL})
 add_executable(simple WIN32 MACOSX_BUNDLE simple.c ${ICON} ${GLAD_GL})
 add_executable(splitview WIN32 MACOSX_BUNDLE splitview.c ${ICON} ${GLAD_GL})
 add_executable(wave WIN32 MACOSX_BUNDLE wave.c ${ICON} ${GLAD_GL})
 
+if (NOT GLAD_GL)
+find_path(GLAD_GL_INCLUDE_PATH glad/gl.h)
+if (NOT GLAD_GL_INCLUDE_PATH)
+    message(FATAL_ERROR "glad/gl.h not found")
+endif()
+include_directories(${GLAD_GL_INCLUDE_PATH})
+add_definitions(-DGLAD_GL_IMPLEMENTATION)
+endif()
+
+if (NOT STB_IMAGE_WRITE)
+find_path(STB_INCLUDE_PATH stb_image_write.h PATH_SUFFIXES stb)
+if (NOT STB_INCLUDE_PATH)
+    message(FATAL_ERROR "stb/stb_image_write.h not found")
+endif()
+include_directories(${STB_INCLUDE_PATH})
+endif()
+
+if (GLAD_GL OR STB_IMAGE_WRITE OR TINYCTHREAD)
+include_directories("${GLFW_SOURCE_DIR}/deps")
+endif()
+
+if (TINYCTHREAD)
 target_link_libraries(particles "${CMAKE_THREAD_LIBS_INIT}")
 if (RT_LIBRARY)
     target_link_libraries(particles "${RT_LIBRARY}")
 endif()
+else()
+find_library(TINYCTHREAD_LIBRARY tinycthread)
+if (NOT TINYCTHREAD_LIBRARY)
+    message(FATAL_ERROR "tinycthread not found")
+endif()
+target_link_libraries(particles ${TINYCTHREAD_LIBRARY})
+endif()
 
 set(GUI_ONLY_BINARIES boing gears heightmap particles sharing simple splitview
     wave)
--- glfw-3.3.8.orig/src/glfw3.pc.in
+++ glfw-3.3.8/src/glfw3.pc.in
@@ -8,6 +8,6 @@
 Version: @GLFW_VERSION@
 URL: https://www.glfw.org/
 Requires.private: @GLFW_PKG_DEPS@
-Libs: -L${libdir} -l@GLFW_LIB_NAME@
+Libs: -L${libdir} -Wl,-rpath,${libdir} -l@GLFW_LIB_NAME@
 Libs.private: @GLFW_PKG_LIBS@
 Cflags: -I${includedir}
--- glfw-3.3.8.orig/tests/CMakeLists.txt
+++ glfw-3.3.8/tests/CMakeLists.txt
@@ -1,8 +1,6 @@
 
 link_libraries(glfw)
 
-include_directories("${GLFW_SOURCE_DIR}/deps")
-
 if (MATH_LIBRARY)
     link_libraries("${MATH_LIBRARY}")
 endif()
@@ -12,14 +10,25 @@
     add_definitions(-D_CRT_SECURE_NO_WARNINGS)
 endif()
 
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/glad/gl.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/glad_gl.c")
 set(GLAD_GL "${GLFW_SOURCE_DIR}/deps/glad/gl.h"
             "${GLFW_SOURCE_DIR}/deps/glad_gl.c")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/glad/vulkan.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/glad_vulkan.c")
 set(GLAD_VULKAN "${GLFW_SOURCE_DIR}/deps/glad/vulkan.h"
                 "${GLFW_SOURCE_DIR}/deps/glad_vulkan.c")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/getopt.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/getopt.c")
 set(GETOPT "${GLFW_SOURCE_DIR}/deps/getopt.h"
            "${GLFW_SOURCE_DIR}/deps/getopt.c")
+endif()
+
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/tinycthread.h" AND EXISTS "${GLFW_SOURCE_DIR}/deps/tinycthread.c")
 set(TINYCTHREAD "${GLFW_SOURCE_DIR}/deps/tinycthread.h"
                 "${GLFW_SOURCE_DIR}/deps/tinycthread.c")
+endif()
 
 if (${CMAKE_VERSION} VERSION_EQUAL "3.1.0" OR
     ${CMAKE_VERSION} VERSION_GREATER "3.1.0")
@@ -42,11 +51,13 @@
 add_executable(cursor cursor.c ${GLAD_GL})
 
 add_executable(empty WIN32 MACOSX_BUNDLE empty.c ${TINYCTHREAD} ${GLAD_GL})
-add_executable(gamma WIN32 MACOSX_BUNDLE gamma.c ${GLAD_GL})
 add_executable(icon WIN32 MACOSX_BUNDLE icon.c ${GLAD_GL})
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/nuklear.h")
+add_executable(gamma WIN32 MACOSX_BUNDLE gamma.c ${GLAD_GL})
 add_executable(inputlag WIN32 MACOSX_BUNDLE inputlag.c ${GETOPT} ${GLAD_GL})
 add_executable(joysticks WIN32 MACOSX_BUNDLE joysticks.c ${GLAD_GL})
 add_executable(opacity WIN32 MACOSX_BUNDLE opacity.c ${GLAD_GL})
+endif()
 add_executable(tearing WIN32 MACOSX_BUNDLE tearing.c ${GLAD_GL})
 add_executable(threads WIN32 MACOSX_BUNDLE threads.c ${TINYCTHREAD} ${GLAD_GL})
 add_executable(timeout WIN32 MACOSX_BUNDLE timeout.c ${GLAD_GL})
@@ -54,15 +65,48 @@
 add_executable(triangle-vulkan WIN32 triangle-vulkan.c ${GLAD_VULKAN})
 add_executable(windows WIN32 MACOSX_BUNDLE windows.c ${GETOPT} ${GLAD_GL})
 
+if (NOT GLAD_GL)
+find_path(GLAD_GL_INCLUDE_PATH glad/gl.h)
+if (NOT GLAD_GL_INCLUDE_PATH)
+    message(FATAL_ERROR "glad/gl.h not found")
+endif()
+include_directories("${GLAD_GL_INCLUDE_PATH}")
+add_definitions(-DGLAD_GL_IMPLEMENTATION)
+endif()
+
+if (NOT GLAD_VULKAN)
+find_path(GLAD_VULKAN_INCLUDE_PATH glad/vulkan.h)
+if (NOT GLAD_VULKAN_INCLUDE_PATH)
+    message(FATAL_ERROR "glad/vulkan.h not found")
+endif()
+include_directories("${GLAD_VULKAN_INCLUDE_PATH}")
+add_definitions(-DGLAD_VULKAN_IMPLEMENTATION)
+endif()
+
+if (GLAD_GL OR GLAD_VULKAN OR TINYCTHREAD)
+include_directories(${GLFW_SOURCE_DIR}/deps)
+endif()
+
+if (TINYCTHREAD)
 target_link_libraries(empty "${CMAKE_THREAD_LIBS_INIT}")
 target_link_libraries(threads "${CMAKE_THREAD_LIBS_INIT}")
 if (RT_LIBRARY)
     target_link_libraries(empty "${RT_LIBRARY}")
     target_link_libraries(threads "${RT_LIBRARY}")
 endif()
+else()
+find_library(TINYCTHREAD_LIBRARY tinycthread)
+if (NOT TINYCTHREAD_LIBRARY)
+    message(FATAL_ERROR "tinycthread not found")
+endif()
+target_link_libraries(empty "${TINYCTHREAD_LIBRARY}")
+target_link_libraries(threads "${TINYCTHREAD_LIBRARY}")
+endif()
 
-set(GUI_ONLY_BINARIES empty gamma icon inputlag joysticks opacity tearing
-    threads timeout title triangle-vulkan windows)
+set(GUI_ONLY_BINARIES empty icon tearing threads timeout title triangle-vulkan windows)
+if (EXISTS "${GLFW_SOURCE_DIR}/deps/nuklear.h")
+    list(APPEND GUI_ONLY_BINARIES gamma inputlag joysticks opacity)
+endif()
 set(CONSOLE_BINARIES clipboard events msaa glfwinfo iconify monitors reopen
                      cursor)
 
--- glfw-3.3.8.orig/tests/glfwinfo.c
+++ glfw-3.3.8/tests/glfwinfo.c
@@ -759,9 +759,7 @@
     if (glfwVulkanSupported())
     {
         uint32_t loader_version = VK_API_VERSION_1_0;
-        int portability_enumeration = GLFW_FALSE;
-        uint32_t i, j, glfw_re_count, re_count, pd_count, ep_count;
-        const char** glfw_re;
+        uint32_t i, j, re_count, pd_count, ep_count;
         const char** re;
         VkApplicationInfo ai = {0};
         VkInstanceCreateInfo ici = {0};
@@ -781,19 +779,13 @@
                VK_VERSION_MAJOR(loader_version),
                VK_VERSION_MINOR(loader_version));
 
-        glfw_re = glfwGetRequiredInstanceExtensions(&glfw_re_count);
-
-        re_count = glfw_re_count;
-        re = calloc(glfw_re_count, sizeof(char*));
+        re = glfwGetRequiredInstanceExtensions(&re_count);
 
         printf("Vulkan window surface required instance extensions:\n");
-        if (glfw_re)
+        if (re)
         {
-            for (i = 0;  i < glfw_re_count;  i++)
-            {
-                printf(" %s\n", glfw_re[i]);
-                re[i] = glfw_re[i];
-            }
+            for (i = 0;  i < re_count;  i++)
+                printf(" %s\n", re[i]);
         }
         else
             printf(" missing\n");
@@ -810,17 +802,6 @@
                 printf(" %s (spec version %u)\n", ep[i].extensionName, ep[i].specVersion);
         }
 
-        for (i = 0;  i < ep_count;  i++)
-        {
-            if (strcmp(ep[i].extensionName, "VK_KHR_portability_enumeration") != 0)
-                continue;
-
-            re_count++;
-            re = realloc((void*) re, sizeof(char*) * re_count);
-            re[re_count - 1] = "VK_KHR_portability_enumeration";
-            portability_enumeration = GLFW_TRUE;
-        }
-
         free(ep);
 
         if (list_layers)
@@ -842,17 +823,12 @@
         ici.enabledExtensionCount = re_count;
         ici.ppEnabledExtensionNames = re;
 
-        if (portability_enumeration)
-            ici.flags |= VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;
-
         if (vkCreateInstance(&ici, NULL, &instance) != VK_SUCCESS)
         {
             glfwTerminate();
             exit(EXIT_FAILURE);
         }
 
-        free((void*) re);
-
         gladLoadVulkanUserPtr(NULL, (GLADuserptrloadfunc) glfwGetInstanceProcAddress, instance);
 
         vkEnumeratePhysicalDevices(instance, &pd_count, NULL);
@@ -878,36 +854,7 @@
             VkExtensionProperties* ep = calloc(ep_count, sizeof(VkExtensionProperties));
             vkEnumerateDeviceExtensionProperties(pd[i], NULL, &ep_count, ep);
 
-            if (portability_enumeration)
-            {
-                int conformant = GLFW_TRUE;
-
-                for (j = 0; j < ep_count; j++)
-                {
-                    if (strcmp(ep[j].extensionName, "VK_KHR_portability_subset") == 0)
-                    {
-                        conformant = GLFW_FALSE;
-                        break;
-                    }
-                }
-
-                printf("Vulkan %s %s device: \"%s\" (API version %i.%i)\n",
-                       conformant ? "conformant" : "non-conformant",
-                       get_device_type_name(pdp.deviceType),
-                       pdp.deviceName,
-                       VK_VERSION_MAJOR(pdp.apiVersion),
-                       VK_VERSION_MINOR(pdp.apiVersion));
-            }
-            else
-            {
-                printf("Vulkan %s device: \"%s\" (API version %i.%i)\n",
-                       get_device_type_name(pdp.deviceType),
-                       pdp.deviceName,
-                       VK_VERSION_MAJOR(pdp.apiVersion),
-                       VK_VERSION_MINOR(pdp.apiVersion));
-            }
-
-            if (glfw_re_count)
+            if (re_count)
             {
                 printf("Vulkan device queue family presentation support:\n");
                 for (j = 0;  j < qfp_count;  j++)
--- glfw-3.3.8.orig/tests/triangle-vulkan.c
+++ glfw-3.3.8/tests/triangle-vulkan.c
@@ -1560,7 +1560,6 @@
 
 static void demo_init_vk(struct demo *demo) {
     VkResult err;
-    VkBool32 portability_enumeration = VK_FALSE;
     uint32_t i = 0;
     uint32_t required_extension_count = 0;
     uint32_t instance_extension_count = 0;
@@ -1668,13 +1667,6 @@
                 }
             }
             assert(demo->enabled_extension_count < 64);
-            if (!strcmp(VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME,
-                        instance_extensions[i].extensionName)) {
-                demo->extension_names[demo->enabled_extension_count++] =
-                    VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME;
-                portability_enumeration = VK_TRUE;
-            }
-            assert(demo->enabled_extension_count < 64);
         }
 
         free(instance_extensions);
@@ -1699,9 +1691,6 @@
         .ppEnabledExtensionNames = (const char *const *)demo->extension_names,
     };
 
-    if (portability_enumeration)
-        inst_info.flags |= VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;
-
     uint32_t gpu_count;
 
     err = vkCreateInstance(&inst_info, NULL, &demo->inst);
