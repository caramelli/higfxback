# This file is part of HiGFXback

# requires
REQUIRES="freetype-build jbig2dec-build jpeg-build make-build openjpeg2-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

pkg-config --exists openssl-build && REQUIRES="$REQUIRES openssl-build"

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libxext-build; then
  XLIB=1
  REQUIRES="$REQUIRES libxext-build"
  pkg-config --exists curl-build && REQUIRES="$REQUIRES curl-build"
fi

# configure
rm -rf thirdparty
PKG_CONFIG_PATH=/x11/lib/pkgconfig sh ./Configure --disable-static --prefix /x11

# build
make

# install
install -d $DESTDIR/x11/bin
install build/*/mudraw $DESTDIR/x11/bin
test $XLIB && install `ls -1 build/*/mupdf* | tail -n1` $DESTDIR/x11/bin/mupdf
install build/*/mutool $DESTDIR/x11/bin
install -d $DESTDIR/x11/include/mupdf
install -m 644 include/mupdf/fitz.h $DESTDIR/x11/include/mupdf
ln -sf mupdf/fitz.h $DESTDIR/x11/include/fitz.h
install -m 644 include/mupdf/memento.h $DESTDIR/x11/include/mupdf
install -d $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/annotation.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/bitmap.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/buffer.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/colorspace.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/compressed-buffer.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/context.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/crypt.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/device.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/display-list.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/document.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/filter.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/font.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/function.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/getopt.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/glyph-cache.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/hash.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/image.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/link.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/math.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/meta.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/outline.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output-pcl.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output-png.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output-pnm.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output-pwg.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/output-svg.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/path.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/pixmap.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/shade.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/store.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/stream.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/string.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/structured-text.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/system.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/text.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/transition.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/write-document.h $DESTDIR/x11/include/mupdf/fitz
install -m 644 include/mupdf/fitz/xml.h $DESTDIR/x11/include/mupdf/fitz
install -d $DESTDIR/x11/lib
install build/*/libmupdf.so.1 $DESTDIR/x11/lib
ln -sf libmupdf.so.1 $DESTDIR/x11/lib/libmupdf.so
install -d $DESTDIR/x11/lib/pkgconfig
install -m 644 platform/debian/mupdf.pc $DESTDIR/x11/lib/pkgconfig

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/mupdf-build.pc << EOF
Name: mupdf
Version: 1.3
Description: PDF rendering library and document manipulation tools
Requires: $REQUIRES

devel=\\
/x11/include/fitz.h \\
/x11/include/mupdf/fitz.h \\
/x11/include/mupdf/memento.h \\
/x11/include/mupdf/fitz/annotation.h \\
/x11/include/mupdf/fitz/bitmap.h \\
/x11/include/mupdf/fitz/buffer.h \\
/x11/include/mupdf/fitz/colorspace.h \\
/x11/include/mupdf/fitz/compressed-buffer.h \\
/x11/include/mupdf/fitz/context.h \\
/x11/include/mupdf/fitz/crypt.h \\
/x11/include/mupdf/fitz/device.h \\
/x11/include/mupdf/fitz/display-list.h \\
/x11/include/mupdf/fitz/document.h \\
/x11/include/mupdf/fitz/filter.h \\
/x11/include/mupdf/fitz/font.h \\
/x11/include/mupdf/fitz/function.h \\
/x11/include/mupdf/fitz/getopt.h \\
/x11/include/mupdf/fitz/glyph-cache.h \\
/x11/include/mupdf/fitz/hash.h \\
/x11/include/mupdf/fitz/image.h \\
/x11/include/mupdf/fitz/link.h \\
/x11/include/mupdf/fitz/math.h \\
/x11/include/mupdf/fitz/meta.h \\
/x11/include/mupdf/fitz/outline.h \\
/x11/include/mupdf/fitz/output.h \\
/x11/include/mupdf/fitz/output-pcl.h \\
/x11/include/mupdf/fitz/output-png.h \\
/x11/include/mupdf/fitz/output-pnm.h \\
/x11/include/mupdf/fitz/output-pwg.h \\
/x11/include/mupdf/fitz/output-svg.h \\
/x11/include/mupdf/fitz/path.h \\
/x11/include/mupdf/fitz/pixmap.h \\
/x11/include/mupdf/fitz/shade.h \\
/x11/include/mupdf/fitz/store.h \\
/x11/include/mupdf/fitz/stream.h \\
/x11/include/mupdf/fitz/string.h \\
/x11/include/mupdf/fitz/structured-text.h \\
/x11/include/mupdf/fitz/system.h \\
/x11/include/mupdf/fitz/text.h \\
/x11/include/mupdf/fitz/transition.h \\
/x11/include/mupdf/fitz/write-document.h \\
/x11/include/mupdf/fitz/xml.h \\
/x11/lib/libmupdf.so \\
/x11/lib/pkgconfig/mupdf.pc

exec=\\
/x11/bin/mudraw \\
EOF
test $XLIB && cat >> $DESTDIR/x11/share/pkgconfig/mupdf-build.pc << EOF
/x11/bin/mupdf \\
EOF
cat >> $DESTDIR/x11/share/pkgconfig/mupdf-build.pc << EOF
/x11/bin/mutool \\
/x11/lib/libmupdf.so.1
EOF

exit
--- mupdf-1.3.orig/Configure
+++ mupdf-1.3/Configure
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+prefix=/usr/local
+
+while : ; do
+  case "$1" in
+    "")
+      break
+    ;;
+    --prefix)
+      prefix=$2
+      shift
+    ;;
+    --disable-static)
+      NOSTATIC=yes
+    ;;
+    *)
+      echo Unknown option \"$1\".
+      exit 1
+    ;;
+  esac
+  shift
+done
+
+sed -i "/^prefix/s|=.*|= $prefix|" Makefile
+
+sed -i "/^NOSTATIC/s|=.*|= $NOSTATIC|" Makefile
+
+test $PKG_CONFIG || PKG_CONFIG=pkg-config
+if test $PKG_CONFIG_PATH; then
+  sed -i "/^PKG_CONFIG/s|=.*|= PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" Makefile
+else
+  sed -i "/^PKG_CONFIG/s|=.*|= $PKG_CONFIG|" Makefile
+fi
+
+sed -i "/^prefix=/s|=.*|=$prefix|" platform/debian/mupdf.pc
--- mupdf-1.3.orig/Makefile
+++ mupdf-1.3/Makefile
@@ -9,6 +9,10 @@
 
 # --- Configuration ---
 
+NOSTATIC ?= 
+
+PKG_CONFIG ?= pkg-config
+
 # Do not specify CFLAGS or LIBS on the make invocation line - specify
 # XCFLAGS or XLIBS instead. Make ignores any lines in the makefile that
 # set a variable that was set on the command line.
@@ -54,7 +58,7 @@
 CC_CMD = $(QUIET_CC) $(CC) $(CFLAGS) -o $@ -c $<
 CXX_CMD = $(QUIET_CXX) $(CXX) $(CFLAGS) -o $@ -c $<
 AR_CMD = $(QUIET_AR) $(AR) cr $@ $^
-LINK_CMD = $(QUIET_LINK) $(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
+LINK_CMD = $(QUIET_LINK) $(CC) $(LDFLAGS) -o $@ $^
 MKDIR_CMD = $(QUIET_MKDIR) mkdir -p $@
 RM_CMD = $(QUIET_RM) rm -f $@
 
@@ -106,18 +110,20 @@
 
 # --- Library ---
 
+ifeq "$(NOSTATIC)" ""
 MUPDF_LIB := $(OUT)/libmupdf.a
-MUPDF_JS_NONE_LIB := $(OUT)/libmupdf-js-none.a
+else
+MUPDF_LIB := $(OUT)/libmupdf.so.1
+endif
 
-$(MUPDF_LIB) : $(FITZ_OBJ) $(PDF_OBJ) $(XPS_OBJ) $(CBZ_OBJ) $(IMG_OBJ)
-$(MUPDF_JS_NONE_LIB) : $(PDF_JS_NONE_OBJ)
+$(MUPDF_LIB) : $(FITZ_OBJ) $(PDF_OBJ) $(XPS_OBJ) $(CBZ_OBJ) $(IMG_OBJ) $(PDF_JS_NONE_OBJ)
 
 ifeq "$(V8_PRESENT)" "yes"
 MUPDF_JS_V8_LIB := $(OUT)/libmupdf-js-v8.a
 $(MUPDF_JS_V8_LIB) : $(PDF_JS_V8_OBJ)
 endif
 
-INSTALL_LIBS := $(MUPDF_LIB) $(MUPDF_JS_NONE_LIB) $(MUPDF_JS_V8_LIB)
+INSTALL_LIBS := $(MUPDF_LIB) $(MUPDF_JS_V8_LIB)
 
 # --- Rules ---
 
@@ -129,14 +135,20 @@
 	$(AR_CMD)
 	$(RANLIB_CMD)
 
+$(OUT)/libmupdf.so.1 :
+	$(LINK_CMD) -shared -Wl,-soname,libmupdf.so.1 $(THIRD_LIBS) $(LIBS)
+
 $(OUT)/%: $(OUT)/%.o
 	$(LINK_CMD)
 
 $(OUT)/%.o : source/%.c | $(ALL_DIR)
-	$(CC_CMD)
+	$(CC_CMD) $(LIB_CFLAGS)
 
 $(OUT)/%.o : source/%.cpp | $(ALL_DIR)
-	$(CXX_CMD)
+	$(CXX_CMD) $(LIB_CFLAGS)
+
+$(OUT)/tools/%.o : source/tools/%.c | $(ALL_DIR)
+	$(CC_CMD)
 
 $(OUT)/%.o : scripts/%.c | $(OUT)
 	$(CC_CMD)
@@ -217,14 +229,24 @@
 # --- Tools and Apps ---
 
 MUDRAW := $(addprefix $(OUT)/, mudraw)
-$(MUDRAW) : $(MUPDF_LIB) $(MUPDF_JS_NONE_LIB) $(THIRD_LIBS)
+ifeq "$(NOSTATIC)" ""
+$(MUDRAW) : $(MUPDF_LIB) $(THIRD_LIBS) $(LIBS)
 $(MUDRAW) : $(addprefix $(OUT)/tools/, mudraw.o)
 	$(LINK_CMD)
+else
+$(MUDRAW) : $(addprefix $(OUT)/tools/, mudraw.o)
+	$(LINK_CMD) $(MUPDF_LIB)
+endif
 
 MUTOOL := $(addprefix $(OUT)/, mutool)
-$(MUTOOL) : $(MUPDF_LIB) $(MUPDF_JS_NONE_LIB) $(THIRD_LIBS)
+ifeq "$(NOSTATIC)" ""
+$(MUTOOL) : $(MUPDF_LIB) $(THIRD_LIBS) $(LIBS)
 $(MUTOOL) : $(addprefix $(OUT)/tools/, mutool.o pdfclean.o pdfextract.o pdfinfo.o pdfposter.o pdfshow.o)
 	$(LINK_CMD)
+else
+$(MUTOOL) : $(addprefix $(OUT)/tools/, mutool.o pdfclean.o pdfextract.o pdfinfo.o pdfposter.o pdfshow.o)
+	$(LINK_CMD) $(MUPDF_LIB)
+endif
 
 ifeq "$(V8_PRESENT)" "yes"
 MUJSTEST_V8 := $(OUT)/mujstest-v8
@@ -235,15 +257,25 @@
 
 ifeq "$(NOX11)" ""
 MUVIEW_X11 := $(OUT)/mupdf-x11
-$(MUVIEW_X11) : $(MUPDF_LIB) $(MUPDF_JS_NONE_LIB) $(THIRD_LIBS)
+ifeq "$(NOSTATIC)" ""
+$(MUVIEW_X11) : $(MUPDF_LIB) $(THIRD_LIBS) $(LIBS)
 $(MUVIEW_X11) : $(addprefix $(OUT)/platform/x11/, x11_main.o x11_image.o pdfapp.o)
 	$(LINK_CMD) $(X11_LIBS)
+else
+$(MUVIEW_X11) : $(addprefix $(OUT)/platform/x11/, x11_main.o x11_image.o pdfapp.o)
+	$(LINK_CMD) $(X11_LIBS) $(MUPDF_LIB)
+endif
 
 ifeq "$(NOCURL)" ""
 MUVIEW_X11_CURL := $(OUT)/mupdf-x11-curl
-$(MUVIEW_X11_CURL) : $(MUPDF_LIB) $(MUPDF_JS_NONE_LIB) $(THIRD_LIBS) $(CURL_LIB)
+ifeq "$(NOSTATIC)" ""
+$(MUVIEW_X11_CURL) : $(MUPDF_LIB) $(THIRD_LIBS) $(LIBS) $(CURL_LIB)
 $(MUVIEW_X11_CURL) : $(addprefix $(OUT)/platform/x11/curl/, x11_main.o x11_image.o pdfapp.o curl_stream.o)
 	$(LINK_CMD) $(X11_LIBS) $(CURL_LIBS)
+else
+$(MUVIEW_X11_CURL) : $(addprefix $(OUT)/platform/x11/curl/, x11_main.o x11_image.o pdfapp.o curl_stream.o) $(CURL_LIB)
+	$(LINK_CMD) $(X11_LIBS) $(CURL_LIBS) $(MUPDF_LIB)
+endif
 endif
 endif
 
@@ -285,7 +317,7 @@
 libs: $(INSTALL_LIBS)
 apps: $(INSTALL_APPS)
 
-install: libs apps
+install: third libs apps
 	install -d $(DESTDIR)$(incdir)/mupdf
 	install -d $(DESTDIR)$(incdir)/mupdf/fitz
 	install -d $(DESTDIR)$(incdir)/mupdf/pdf
@@ -295,6 +327,9 @@
 
 	install -d $(DESTDIR)$(libdir)
 	install $(INSTALL_LIBS) $(DESTDIR)$(libdir)
+	if test -n "$(NOSTATIC)"; then \
+		ln -sf libmupdf.so.1 $(DESTDIR)$(libdir)/libmupdf.so; \
+	fi
 
 	install -d $(DESTDIR)$(bindir)
 	install $(INSTALL_APPS) $(DESTDIR)$(bindir)
@@ -313,7 +348,7 @@
 tags: $(shell find include source -name '*.[ch]')
 	ctags $^
 
-all: libs apps
+all: third libs apps
 
 all-nojs:
 	$(MAKE) V8_PRESENT=no
--- mupdf-1.3.orig/Makerules
+++ mupdf-1.3/Makerules
@@ -6,6 +6,11 @@
 
 CFLAGS += -Wall
 
+ifneq "$(NOSTATIC)" ""
+LIB_CFLAGS = -fPIC
+LDFLAGS += -Wl,-rpath,$(prefix)/lib
+endif
+
 ifeq "$(build)" "debug"
 CFLAGS += -pipe -g -DDEBUG
 else ifeq "$(build)" "profile"
@@ -50,20 +55,30 @@
 # Other Unixes use pkg-config for system libraries.
 else
 
-ifeq "$(shell pkg-config --exists libcrypto && echo yes)" "yes"
-SYS_OPENSSL_CFLAGS = -DHAVE_OPENSSL $(shell pkg-config --cflags libcrypto)
-SYS_OPENSSL_LIBS = $(shell pkg-config --libs libcrypto)
+ifeq "$(shell $(PKG_CONFIG) --exists libcrypto && echo yes)" "yes"
+SYS_OPENSSL_CFLAGS = -DHAVE_OPENSSL $(shell $(PKG_CONFIG) --cflags libcrypto)
+SYS_OPENSSL_LIBS = $(shell $(PKG_CONFIG) --libs libcrypto)
 endif
 
+ifeq "$(shell $(PKG_CONFIG) --exists libcurl && echo yes)" "yes"
+SYS_CURL_CFLAGS = $(shell $(PKG_CONFIG) --cflags libcurl)
+SYS_CURL_LIBS = $(shell $(PKG_CONFIG) --libs libcurl)
 SYS_CURL_DEPS = -lpthread -lrt
+else
+NOCURL := yes
+endif
 
-SYS_X11_CFLAGS = $(shell pkg-config --cflags x11 xext)
-SYS_X11_LIBS = $(shell pkg-config --libs x11 xext)
+ifeq "$(shell $(PKG_CONFIG) --exists x11 xext && echo yes)" "yes"
+SYS_X11_CFLAGS = $(shell $(PKG_CONFIG) --cflags x11 xext)
+SYS_X11_LIBS = $(shell $(PKG_CONFIG) --libs x11 xext)
+else
+NOX11 := yes
+endif
 
-SYS_FREETYPE_CFLAGS = $(shell pkg-config --cflags freetype2)
-SYS_FREETYPE_LIBS = $(shell pkg-config --libs freetype2)
-SYS_OPENJPEG_CFLAGS = $(shell pkg-config --cflags libopenjpeg1)
-SYS_OPENJPEG_LIBS = $(shell pkg-config --libs libopenjpeg1)
+SYS_FREETYPE_CFLAGS = $(shell $(PKG_CONFIG) --cflags freetype2)
+SYS_FREETYPE_LIBS = $(shell $(PKG_CONFIG) --libs freetype2)
+SYS_OPENJPEG_CFLAGS = $(shell $(PKG_CONFIG) --cflags libopenjp2)
+SYS_OPENJPEG_LIBS = $(shell $(PKG_CONFIG) --libs libopenjp2)
 SYS_JBIG2DEC_LIBS = -ljbig2dec
 SYS_JPEG_LIBS = -ljpeg
 SYS_ZLIB_LIBS = -lz
--- mupdf-1.3.orig/Makethird
+++ mupdf-1.3/Makethird
@@ -84,6 +84,7 @@
 FT_CFLAGS := -DFT2_BUILD_LIBRARY -DDARWIN_NO_CARBON \
 	'-DFT_CONFIG_MODULES_H="slimftmodules.h"' \
 	'-DFT_CONFIG_OPTIONS_H="slimftoptions.h"'
+FT_CFLAGS += $(LIB_CFLAGS)
 
 $(FREETYPE_OUT)/%.o: $(FREETYPE_DIR)/src/base/%.c	| $(FREETYPE_OUT)
 	$(CC_CMD) $(FT_CFLAGS)
@@ -141,7 +142,7 @@
 $(JBIG2DEC_OUT):
 	$(MKDIR_CMD)
 $(JBIG2DEC_OUT)/%.o: $(JBIG2DEC_DIR)/%.c | $(JBIG2DEC_OUT)
-	$(CC_CMD) -DHAVE_STDINT_H
+	$(CC_CMD) -DHAVE_STDINT_H $(LIB_CFLAGS)
 
 JBIG2DEC_CFLAGS := -I$(JBIG2DEC_DIR)
 else
@@ -192,7 +193,7 @@
 $(JPEG_OUT):
 	$(MKDIR_CMD)
 $(JPEG_OUT)/%.o: $(JPEG_DIR)/%.c | $(JPEG_OUT)
-	$(CC_CMD) -Dmain=xxxmain
+	$(CC_CMD) -Dmain=xxxmain $(LIB_CFLAGS)
 
 JPEG_CFLAGS := -I$(JPEG_DIR)
 else
@@ -236,7 +237,7 @@
 $(OPENJPEG_OUT):
 	$(MKDIR_CMD)
 $(OPENJPEG_OUT)/%.o: $(OPENJPEG_DIR)/src/lib/openjp2/%.c | $(OPENJPEG_OUT)
-	$(CC_CMD) -DOPJ_STATIC -DOPJ_HAVE_STDINT_H
+	$(CC_CMD) -DOPJ_STATIC $(LIB_CFLAGS)
 
 OPENJPEG_CFLAGS += -I$(OPENJPEG_DIR)/src/lib/openjp2
 else
@@ -266,7 +267,7 @@
 $(ZLIB_OUT):
 	$(MKDIR_CMD)
 $(ZLIB_OUT)/%.o: $(ZLIB_DIR)/%.c | $(ZLIB_OUT)
-	$(CC_CMD) -Dverbose=-1
+	$(CC_CMD) $(LIB_CFLAGS)
 
 ZLIB_CFLAGS := -I$(ZLIB_DIR)
 else
@@ -442,7 +443,8 @@
 	$(CC_CMD) $(CRL_CFLAGS)
 
 CURL_CFLAGS := -I$(CURL_DIR)/include
-CURL_LIBS := $(SYS_CURL_DEPS)
+CURL_LIBS := $(CURL_LIB) $(SYS_CURL_DEPS)
 else
-NOCURL := yes
+CURL_CFLAGS := $(SYS_CURL_CFLAGS)
+CURL_LIBS := $(SYS_CURL_LIBS) $(SYS_CURL_DEPS)
 endif
--- mupdf-1.3.orig/platform/debian/mupdf.pc
+++ mupdf-1.3/platform/debian/mupdf.pc
@@ -1,12 +1,10 @@
-prefix=/usr
+prefix=/usr/local
 exec_prefix=${prefix}
 libdir=${exec_prefix}/lib
 includedir=${prefix}/include
 
 Name: mupdf
 Description: Library for rendering PDF documents
-Requires.private: freetype2
-Version: 0.5.0
+Version: 1.3
 Libs: -L${libdir} -lmupdf
-Libs.private: -lopenjpeg -ljbig2dec -ljpeg -lz -lm
 Cflags: -I${includedir}
--- mupdf-1.3.orig/scripts/opj_config.h
+++ mupdf-1.3/scripts/opj_config.h
@@ -19,3 +19,6 @@
 
 
 
+#ifndef _MSC_VER
+#define OPJ_HAVE_STDINT_H
+#endif
--- mupdf-1.3.orig/source/fitz/filter-fax.c
+++ mupdf-1.3/source/fitz/filter-fax.c
@@ -152,22 +152,6 @@
 	{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-3,3}
 };
 
-/* Uncompressed decoding table. */
-static const cfd_node cf_uncompressed_decode[] = {
-	{64,12},{5,6},{4,5},{4,5},{3,4},{3,4},{3,4},{3,4},{2,3},{2,3},
-	{2,3},{2,3},{2,3},{2,3},{2,3},{2,3},{1,2},{1,2},{1,2},{1,2},{1,2},
-	{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},
-	{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},
-	{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},
-	{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},
-	{-1,0},{-1,0},{8,6},{9,6},{6,5},{6,5},{7,5},{7,5},{4,4},{4,4},
-	{4,4},{4,4},{5,4},{5,4},{5,4},{5,4},{2,3},{2,3},{2,3},{2,3},{2,3},
-	{2,3},{2,3},{2,3},{3,3},{3,3},{3,3},{3,3},{3,3},{3,3},{3,3},{3,3},
-	{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},{0,2},
-	{0,2},{0,2},{0,2},{0,2},{0,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},
-	{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2},{1,2}
-};
-
 /* bit magic */
 
 static inline int getbit(const unsigned char *buf, int x)
--- mupdf-1.3.orig/source/fitz/load-jpx.c
+++ mupdf-1.3/source/fitz/load-jpx.c
@@ -4,9 +4,6 @@
  * due to the use of __stdcall. We believe it is required on some
  * linux toolchains too. */
 #define OPJ_STATIC
-#ifndef _MSC_VER
-#define OPJ_HAVE_STDINT_H
-#endif
 
 #include <openjpeg.h>
 
--- mupdf-1.3.orig/source/pdf/pdf-pkcs7.c
+++ mupdf-1.3/source/pdf/pdf-pkcs7.c
@@ -27,7 +27,7 @@
 
 static int bsegs_read(BIO *b, char *buf, int size)
 {
-	BIO_SEGS_CTX *ctx = (BIO_SEGS_CTX *)b->ptr;
+	BIO_SEGS_CTX *ctx = (BIO_SEGS_CTX *) BIO_get_data(b);
 	int read = 0;
 
 	while (size > 0 && ctx->current_seg < ctx->nsegs)
@@ -40,9 +40,9 @@
 		if (nb > 0)
 		{
 			if (ctx->seg_pos == 0)
-				(void)BIO_seek(b->next_bio, ctx->seg[ctx->current_seg][SEG_START]);
+				(void)BIO_seek(BIO_next(b), ctx->seg[ctx->current_seg][SEG_START]);
 
-			(void)BIO_read(b->next_bio, buf, nb);
+			(void)BIO_read(BIO_next(b), buf, nb);
 			ctx->seg_pos += nb;
 			read += nb;
 			buf += nb;
@@ -62,7 +62,7 @@
 
 static long bsegs_ctrl(BIO *b, int cmd, long arg1, void *arg2)
 {
-	return BIO_ctrl(b->next_bio, cmd, arg1, arg2);
+	return BIO_ctrl(BIO_next(b), cmd, arg1, arg2);
 }
 
 static int bsegs_new(BIO *b)
@@ -78,10 +78,9 @@
 	ctx->seg = NULL;
 	ctx->nsegs = 0;
 
-	b->init = 1;
-	b->ptr = (char *)ctx;
-	b->flags = 0;
-	b->num = 0;
+	BIO_set_init(b, 1);
+	BIO_set_data(b, ctx);
+	BIO_clear_flags(b, INT_MAX);
 
 	return 1;
 }
@@ -91,40 +90,47 @@
 	if (b == NULL)
 		return 0;
 
-	free(b->ptr);
-	b->ptr = NULL;
-	b->init = 0;
-	b->flags = 0;
+	free(BIO_get_data(b));
+	BIO_set_data(b, NULL);
+	BIO_set_init(b, 0);
+	BIO_clear_flags(b, INT_MAX);
 
 	return 1;
 }
 
 static long bsegs_callback_ctrl(BIO *b, int cmd, bio_info_cb *fp)
 {
-	return BIO_callback_ctrl(b->next_bio, cmd, fp);
+	return BIO_callback_ctrl(BIO_next(b), cmd, fp);
 }
 
-static BIO_METHOD methods_bsegs =
-{
-	0,"segment reader",
-	NULL,
-	bsegs_read,
-	NULL,
-	NULL,
-	bsegs_ctrl,
-	bsegs_new,
-	bsegs_free,
-	bsegs_callback_ctrl,
-};
+static BIO_METHOD *methods_bsegs = NULL;
 
 static BIO_METHOD *BIO_f_segments(void)
 {
-	return &methods_bsegs;
+	if (methods_bsegs)
+		return methods_bsegs;
+
+	methods_bsegs = BIO_meth_new(BIO_TYPE_NONE, "segment reader");
+	if (!methods_bsegs)
+		return NULL;
+
+	if (!BIO_meth_set_read(methods_bsegs, bsegs_read) ||
+			!BIO_meth_set_ctrl(methods_bsegs, bsegs_ctrl) ||
+			!BIO_meth_set_create(methods_bsegs, bsegs_new) ||
+			!BIO_meth_set_destroy(methods_bsegs, bsegs_free) ||
+			!BIO_meth_set_callback_ctrl(methods_bsegs, bsegs_callback_ctrl))
+
+	{
+		BIO_meth_free(methods_bsegs);
+		methods_bsegs = NULL;
+	}
+
+	return methods_bsegs;
 }
 
 static void BIO_set_segments(BIO *b, int (*seg)[2], int nsegs)
 {
-	BIO_SEGS_CTX *ctx = (BIO_SEGS_CTX *)b->ptr;
+	BIO_SEGS_CTX *ctx = (BIO_SEGS_CTX *) BIO_get_data(b);
 
 	ctx->seg = seg;
 	ctx->nsegs = nsegs;
@@ -132,7 +138,7 @@
 
 typedef struct verify_context_s
 {
-	X509_STORE_CTX x509_ctx;
+	X509_STORE_CTX *x509_ctx;
 	char certdesc[256];
 	int err;
 } verify_context;
@@ -156,7 +162,7 @@
 		X509_STORE_CTX_set_error(ctx, X509_V_ERR_CERT_CHAIN_TOO_LONG);
 	}
 
-	switch (ctx->error)
+	switch (err)
 	{
 	case X509_V_ERR_INVALID_PURPOSE:
 	case X509_V_ERR_CERT_HAS_EXPIRED:
@@ -196,6 +202,8 @@
 	vctx.err = X509_V_OK;
 	ebuf[0] = 0;
 
+	vctx.x509_ctx = X509_STORE_CTX_new();
+
 	OpenSSL_add_all_algorithms();
 
 	EVP_add_digest(EVP_md5());
@@ -205,7 +213,7 @@
 
 	ERR_clear_error();
 
-	X509_VERIFY_PARAM_set_flags(cert_store->param, X509_V_FLAG_CB_ISSUER_CHECK);
+	X509_VERIFY_PARAM_set_flags(X509_STORE_get0_param(cert_store), X509_V_FLAG_CB_ISSUER_CHECK);
 	X509_STORE_set_verify_cb_func(cert_store, verify_callback);
 
 	p7bio = PKCS7_dataInit(p7, detached);
@@ -228,7 +236,7 @@
 	{
 		int rc;
 		si = sk_PKCS7_SIGNER_INFO_value(sk, i);
-		rc = PKCS7_dataVerify(cert_store, &vctx.x509_ctx, p7bio,p7, si);
+		rc = PKCS7_dataVerify(cert_store, vctx.x509_ctx, p7bio,p7, si);
 		if (rc <= 0 || vctx.err != X509_V_OK)
 		{
 			char tbuf[120];
@@ -249,7 +257,7 @@
 	}
 
 exit:
-	X509_STORE_CTX_cleanup(&vctx.x509_ctx);
+	X509_STORE_CTX_free(vctx.x509_ctx);
 	ERR_free_strings();
 
 	return res;
@@ -285,7 +293,7 @@
 	if (bsegs == NULL)
 		goto exit;
 
-	bsegs->next_bio = bdata;
+	BIO_set_next(bsegs, bdata);
 	BIO_set_segments(bsegs, byte_range, byte_range_len);
 
 	/* Find the certificates in the pk7 file */
