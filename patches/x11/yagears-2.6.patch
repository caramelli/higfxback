# This file is part of HiGFXback

# requires
REQUIRES="libpng-build meson-build tiff-build"

PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libxcb-build; then
  XCB=1
  REQUIRES="$REQUIRES libxcb-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists libx11-build; then
  XLIB=1
  REQUIRES="$REQUIRES libx11-build"
fi

test $XLIB || test $XCB || { echo Xlib or XCB packages required; exit 1; }

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  EGL_OPENGL="-Degl-drm=false -Degl-fbdev=false -Dgl=false -Dglesv1_cm=false"
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists glslang-build vulkan-loader-build; then
  VK=1
  VULKAN="-Dvk-d2d=false"
  REQUIRES="$REQUIRES glslang-build vulkan-loader-build"
fi

test $GL || test $VK || { echo OpenGL or Vulkan packages required; exit 1; }

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists glfw-build; then
  test $VK && PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --print-requires glfw-build | grep -q vulkan-loader-build || { echo GLFW with Vulkan support required; exit 1; }
  GLFW=1
  REQUIRES="$REQUIRES glfw-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists glut-build; then
  GLUT=1
  REQUIRES="$REQUIRES glut-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists gtkglarea2-build; then
  GTK2=1
  REQUIRES="$REQUIRES gtkglarea2-build"
fi

if PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists sdl2-build; then
  test $GL && PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --print-requires sdl2-build | grep -q egl-opengl-stubs-build || { echo SDL2 with OpenGL support required; exit 1; }
  test $VK && PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --print-requires sdl2-build | grep -q vulkan-loader-build || { echo SDL2 with Vulkan support required; exit 1; }
  SDL2=1
  REQUIRES="$REQUIRES sdl2-build"
elif test $GL && PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --exists sdl-build; then
  PKG_CONFIG_PATH=/x11/share/pkgconfig pkg-config --print-requires sdl-build | grep -q egl-opengl-stubs-build || { echo SDL with OpenGL support required; exit 1; }
  SDL=1
  REQUIRES="$REQUIRES sdl-build"
fi

# configure
PKG_CONFIG_PATH=/x11/lib/pkgconfig meson setup $EGL_OPENGL $VULKAN --prefix=/x11 build

# build
meson compile -C build

# install
install -d $DESTDIR/x11/bin
test $GL && install build/yagears2 $DESTDIR/x11/bin
test $GL && test $GLFW || test $GLUT || test $GTK2 || test $SDL || test $SDL2 && install build/yagears2-gui $DESTDIR/x11/bin
test $GLUT && install build/yagears2-mosaic $DESTDIR/x11/bin
test $VK && install build/yagears2-vk $DESTDIR/x11/bin
test $VK && test $GLFW || test $SDL2 && install build/yagears2-vk-gui $DESTDIR/x11/bin

# build.pc
install -d $DESTDIR/x11/share/pkgconfig
cat > $DESTDIR/x11/share/pkgconfig/yagears2-build.pc << EOF
Name: yagears
Version: 2.6
Description: Yet Another Gears OpenGL / Vulkan demo
Requires: $REQUIRES

exec=\\
EOF
test $GL && echo /x11/bin/yagears2 \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $GL && test $GLFW || test $GLUT || test $GTK2 || test $SDL || test $SDL2 && echo /x11/bin/yagears2-gui \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $GLUT && echo /x11/bin/yagears2-mosaic \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $VK && echo /x11/bin/yagears2-vk \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
test $VK && test $GLFW || test $SDL2 && echo /x11/bin/yagears2-vk-gui \\ >> $DESTDIR/x11/share/pkgconfig/yagears2-build.pc
sed -i '$ s/ \\//' $DESTDIR/x11/share/pkgconfig/yagears2-build.pc

exit
--- yagears-2.6.orig/CMakeLists.txt
+++ yagears-2.6/CMakeLists.txt
@@ -62,12 +62,12 @@
   pkg_check_modules(GL gl)
   if(GL_FOUND)
     if(ENABLE_GLESV1_CM)
-      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
     endif()
     if(ENABLE_GLESV2)
       find_program(XXD xxd)
       if(XXD)
-        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
       else()
         set(ENABLE_GLESV2 OFF)
       endif()
@@ -84,7 +84,7 @@
   if(ENABLE_GLESV1_CM)
     pkg_check_modules(GLESV1_CM glesv1_cm)
     if(GLESV1_CM_FOUND)
-      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so")
+      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so.1")
       set(GLESV1_CM_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV1_CM OFF)
@@ -95,7 +95,7 @@
     pkg_check_modules(GLESV2 glesv2)
     find_program(XXD xxd)
     if(GLESV2_FOUND AND XXD)
-      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so")
+      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so.2")
       set(GLESV2_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV2 OFF)
@@ -104,7 +104,7 @@
 endif()
 
 if(NOT ENABLE_GL AND NOT ENABLE_GLESV1_CM AND NOT ENABLE_GLESV2)
-  message(FATAL_ERROR "No OpenGL Engines found")
+  message(WARNING "No OpenGL Engines found")
 endif()
 
 # OpenGL Backends
@@ -213,16 +213,20 @@
     endif()
 
     if(ENABLE_EGL_DRM)
-      pkg_check_modules(DRM dri gbm libdrm libevdev)
+      pkg_check_modules(DRM gbm libdrm libevdev)
       if(DRM_FOUND)
-        execute_process(COMMAND pkg-config --variable=dridriverdir dri OUTPUT_VARIABLE DRIDRIVERDIR)
-        string(STRIP ${DRIDRIVERDIR} DRIDRIVERDIR)
-        execute_process(COMMAND pkg-config --modversion dri OUTPUT_VARIABLE MODVERSION)
-        string(STRIP ${MODVERSION} MODVERSION)
-        string(REGEX REPLACE "([0-9]+).([0-9]+).([0-9]+)" \\1 DRIMAJORVERSION ${MODVERSION})
-        string(REGEX REPLACE "([0-9]+).([0-9]+).([0-9]+)" \\2 DRIMINORVERSION ${MODVERSION})
-        list(APPEND DRM_CFLAGS -DDRI_DRIVERDIR="${DRIDRIVERDIR}" -DDRI_MAJOR_VERSION=${DRIMAJORVERSION} -DDRI_MINOR_VERSION=${DRIMINORVERSION})
-        list(APPEND DRM_LDFLAGS -ldl)
+        pkg_check_modules(DRI dri)
+        if(DRI_FOUND)
+          execute_process(COMMAND pkg-config --variable=dridriverdir dri OUTPUT_VARIABLE DRIDRIVERDIR)
+          string(STRIP ${DRIDRIVERDIR} DRIDRIVERDIR)
+          execute_process(COMMAND pkg-config --modversion dri OUTPUT_VARIABLE MODVERSION)
+          string(STRIP ${MODVERSION} MODVERSION)
+          string(REGEX REPLACE "([0-9]+).([0-9]+).([0-9]+)" \\1 DRIMAJORVERSION ${MODVERSION})
+          string(REGEX REPLACE "([0-9]+).([0-9]+).([0-9]+)" \\2 DRIMINORVERSION ${MODVERSION})
+          list(APPEND DRM_CFLAGS -DDRI_DRIVERDIR="${DRIDRIVERDIR}" -DDRI_MAJOR_VERSION=${DRIMAJORVERSION} -DDRI_MINOR_VERSION=${DRIMINORVERSION})
+          list(APPEND DRM_LDFLAGS -ldl)
+          set(HAVE_DRI ON)
+        endif()
       else()
         set(ENABLE_EGL_DRM OFF)
       endif()
@@ -263,7 +267,7 @@
 set(WAFFLE ${ENABLE_WAFFLE})
 
 if(NOT ENABLE_GL_X11 AND NOT ENABLE_GL_DIRECTFB AND NOT ENABLE_GL_FBDEV AND NOT ENABLE_EGL_X11 AND NOT ENABLE_EGL_DIRECTFB AND NOT ENABLE_EGL_FBDEV AND NOT ENABLE_EGL_WAYLAND AND NOT ENABLE_EGL_XCB AND NOT ENABLE_EGL_DRM AND NOT ENABLE_EGL_RPI AND NOT ENABLE_WAFFLE)
-  message(FATAL_ERROR "No OpenGL Backends found")
+  message(WARNING "No OpenGL Backends found")
 endif()
 
 # Vulkan WSIs
@@ -489,6 +493,7 @@
     pkg_check_modules(SDL sdl2)
     if(NOT SDL_FOUND)
       set(ENABLE_SDL OFF)
+      set(WITH_SDL 1)
     endif()
   else()
     set(ENABLE_SDL OFF)
@@ -604,9 +609,17 @@
 
 # Build rules
 
-set(GL ${ENABLE_GL})
-set(GLESV1_CM ${ENABLE_GLESV1_CM})
-set(GLESV2 ${ENABLE_GLESV2})
+set(PNG ${ENABLE_PNG})
+set(TIFF ${ENABLE_TIFF})
+
+if(ENABLE_GL OR ENABLE_GLESV1_CM OR ENABLE_GLESV2)
+  set(GL ${ENABLE_GL})
+  set(GLESV1_CM ${ENABLE_GLESV1_CM})
+  set(GLESV2 ${ENABLE_GLESV2})
+  set(OPENGL ON)
+else()
+  set(OPENGL OFF)
+endif()
 
 if(ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D)
   set(VK ON)
@@ -616,21 +629,27 @@
 
 set(MOSAIC ${ENABLE_GLUT})
 
-if(ENABLE_EFL OR ENABLE_FLTK OR ENABLE_GLFW OR ENABLE_GLUT OR ENABLE_GTK OR ENABLE_QT OR ENABLE_SDL OR ENABLE_SFML OR ENABLE_WX)
+if((ENABLE_GL OR ENABLE_GLESV1_CM OR ENABLE_GLESV2) AND (ENABLE_EFL OR ENABLE_FLTK OR ENABLE_GLFW OR ENABLE_GLUT OR ENABLE_GTK OR ENABLE_QT OR ENABLE_SDL OR ENABLE_SFML OR ENABLE_WX))
   set(GUI ON)
 else()
   set(GUI OFF)
 endif()
 
-if((ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D) AND (ENABLE_GLFW OR ENABLE_SDL))
+if((ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D) AND (ENABLE_GLFW OR (ENABLE_SDL AND WITH_SDL STREQUAL 2)))
   set(VK_GUI ON)
 else()
   set(VK_GUI OFF)
 endif()
 
-set(PNG ${ENABLE_PNG})
-set(TIFF ${ENABLE_TIFF})
+if(PNG)
+set(PNG_SOURCE png_image.c)
+endif()
+
+if(TIFF)
+set(TIFF_SOURCE tiff_image.c)
+endif()
 
+if(OPENGL)
 if(GL)
 set(GL_SOURCE gl_gears.c)
 endif()
@@ -648,14 +667,6 @@
 set(GLESV2_SOURCE glesv2_gears.c)
 endif()
 
-if(PNG)
-set(PNG_SOURCE png_image.c)
-endif()
-
-if(TIFF)
-set(TIFF_SOURCE tiff_image.c)
-endif()
-
 add_library(yagears gears_engine.c ${GL_SOURCE} ${GLESV1_CM_SOURCE} ${GLESV2_SOURCE} ${VERT_XXD_FILE} ${FRAG_XXD_FILE} image_loader.c ${PNG_SOURCE} ${TIFF_SOURCE})
 target_compile_options(yagears PRIVATE ${GL_CFLAGS} ${GLESV1_CM_CFLAGS} ${GLESV2_CFLAGS} ${PNG_CFLAGS} ${TIFF_CFLAGS})
 target_link_libraries(yagears ${GL_LDFLAGS} ${GLESV1_CM_LDFLAGS} ${GLESV2_LDFLAGS} ${PNG_LDFLAGS} ${TIFF_LDFLAGS})
@@ -664,6 +675,7 @@
 target_compile_options(yagears2 PRIVATE ${WAFFLE_CFLAGS} ${EGL_CFLAGS} ${X11_CFLAGS} ${DIRECTFB_CFLAGS} ${WAYLAND_EGL_CFLAGS} ${XCB_CFLAGS} ${DRM_CFLAGS} ${RPI_CFLAGS})
 target_link_libraries(yagears2 -Wl,--whole-archive yagears -Wl,--no-whole-archive ${WAFFLE_LDFLAGS} ${EGL_LDFLAGS} ${X11_LDFLAGS} ${DIRECTFB_LDFLAGS} ${WAYLAND_EGL_LDFLAGS} ${XCB_LDFLAGS} ${DRM_LDFLAGS} ${RPI_LDFLAGS})
 install(TARGETS yagears2 DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
 
 if(VK)
 add_custom_command(OUTPUT vert.spv COMMAND ${GLSLANG_VALIDATOR} ${CMAKE_SOURCE_DIR}/vulkan_gears.vert -V -x DEPENDS ${CMAKE_SOURCE_DIR}/vulkan_gears.vert)
--- yagears-2.6.orig/Makefile.am
+++ yagears-2.6/Makefile.am
@@ -1,5 +1,15 @@
+bin_PROGRAMS =
 BUILT_SOURCES =
 
+if PNG
+PNG_SOURCE = png_image.c
+endif
+
+if TIFF
+TIFF_SOURCE = tiff_image.c
+endif
+
+if OPENGL
 if GL
 GL_SOURCE = gl_gears.c
 endif
@@ -19,24 +29,17 @@
 GLESV2_SOURCE = glesv2_gears.c
 endif
 
-if PNG
-PNG_SOURCE = png_image.c
-endif
-
-if TIFF
-TIFF_SOURCE = tiff_image.c
-endif
-
 noinst_LTLIBRARIES    = libyagears.la
 libyagears_la_SOURCES = gears_engine.c $(GL_SOURCE) $(GLESV1_CM_SOURCE) $(GLESV2_SOURCE) image_loader.c $(PNG_SOURCE) $(TIFF_SOURCE)
 libyagears_la_CFLAGS  = @GL_CFLAGS@ @GLESV1_CM_CFLAGS@ @GLESV2_CFLAGS@ @PNG_CFLAGS@ @TIFF_CFLAGS@
 libyagears_la_LIBADD  = @GL_LIBS@ @GLESV1_CM_LIBS@ @GLESV2_LIBS@ @PNG_LIBS@ @TIFF_LIBS@
 
-bin_PROGRAMS     = yagears2
+bin_PROGRAMS    += yagears2
 yagears2_SOURCES = main.c
 yagears2_CFLAGS  = @WAFFLE_CFLAGS@ @EGL_CFLAGS@ @X11_CFLAGS@ @DIRECTFB_CFLAGS@ @WAYLAND_EGL_CFLAGS@ @XCB_CFLAGS@ @DRM_CFLAGS@ @RPI_CFLAGS@
 yagears2_LDFLAGS = -Wl,--whole-archive,.libs/libyagears.a,--no-whole-archive
 yagears2_LDADD   = libyagears.la @WAFFLE_LIBS@ @EGL_LIBS@ @X11_LIBS@ @DIRECTFB_LIBS@ @WAYLAND_EGL_LIBS@ @XCB_LIBS@ @DRM_LIBS@ @RPI_LIBS@
+endif
 
 if VK
 vert.spv: vulkan_gears.vert
--- yagears-2.6.orig/config.h.cmake
+++ yagears-2.6/config.h.cmake
@@ -43,6 +43,9 @@
 /* Support for GTK+ graphical user interface */
 #cmakedefine GTK
 
+/* Have Direct Rendering Infrastructure */
+#cmakedefine HAVE_DRI
+
 /* Have function wl_shell_surface_set_position */
 #cmakedefine HAVE_WL_SHELL_SURFACE_SET_POSITION
 
--- yagears-2.6.orig/configure.ac
+++ yagears-2.6/configure.ac
@@ -1,6 +1,7 @@
 AC_INIT(yagears, 2.6)
 
 AC_CONFIG_HEADERS(config.h)
+AC_CONFIG_MACRO_DIR([m4])
 
 AM_INIT_AUTOMAKE
 LT_INIT
@@ -131,12 +132,12 @@
   PKG_CHECK_MODULES(GL, gl, , enable_gl=no)
   if test x$enable_gl = xyes; then
     if test x$enable_glesv1_cm = xyes; then
-      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
     fi
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
       else
         enable_glesv2=no
       fi
@@ -151,7 +152,7 @@
   if test x$enable_glesv1_cm = xyes; then
     PKG_CHECK_MODULES(GLESV1_CM, glesv1_cm, , enable_glesv1_cm=no)
     if test x$enable_glesv1_cm = xyes; then
-      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so\\\""
+      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so.1\\\""
       GLESV1_CM_LIBS=-ldl
     fi
   fi
@@ -161,7 +162,7 @@
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so\\\""
+        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so.2\\\""
         GLESV2_LIBS=-ldl
       else
         enable_glesv2=no
@@ -171,7 +172,7 @@
 fi
 
 if test x$enable_gl = xno -a x$enable_glesv1_cm = xno -a x$enable_glesv2 = xno; then
-  AC_MSG_ERROR(No OpenGL Engines found)
+  AC_MSG_WARN(No OpenGL Engines found)
 fi
 
 # OpenGL Backends
@@ -261,14 +262,18 @@
     fi
 
     if test x$enable_egl_drm = xyes; then
-      PKG_CHECK_MODULES(DRM, dri gbm libdrm libevdev, , enable_egl_drm=no)
+      PKG_CHECK_MODULES(DRM, gbm libdrm libevdev, , enable_egl_drm=no)
       if test x$enable_egl_drm = xyes; then
-        DRIDRIVERDIR=`$PKG_CONFIG --variable=dridriverdir dri`
-        MODVERSION=`$PKG_CONFIG --modversion dri`
-        DRIMAJORVERSION=`echo $MODVERSION | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
-        DRI_MINOR_VERSION=`echo $MODVERSION | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
-        DRM_CFLAGS="$DRM_CFLAGS -DDRI_DRIVERDIR=\\\"$DRIDRIVERDIR\\\" -DDRI_MAJOR_VERSION=$DRIMAJORVERSION -DDRI_MINOR_VERSION=$DRI_MINOR_VERSION"
-        DRM_LIBS="$DRM_LIBS -ldl"
+        PKG_CHECK_MODULES(DRI, dri, have_dri=yes, have_dri=no)
+        if test x$have_dri = xyes; then
+          DRIDRIVERDIR=`$PKG_CONFIG --variable=dridriverdir dri`
+          MODVERSION=`$PKG_CONFIG --modversion dri`
+          DRIMAJORVERSION=`echo $MODVERSION | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
+          DRIMINORVERSION=`echo $MODVERSION | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
+          DRM_CFLAGS="$DRM_CFLAGS -DDRI_DRIVERDIR=\\\"$DRIDRIVERDIR\\\" -DDRI_MAJOR_VERSION=$DRIMAJORVERSION -DDRI_MINOR_VERSION=$DRIMINORVERSION"
+          DRM_LIBS="$DRM_LIBS -ldl"
+          AC_DEFINE(HAVE_DRI, 1, Have Direct Rendering Infrastructure)
+        fi
       fi
     fi
 
@@ -320,7 +325,7 @@
 fi
 
 if test x$enable_gl_x11 = xno -a x$enable_gl_directfb = xno -a x$enable_gl_fbdev = xno -a x$enable_egl_x11 = xno -a x$enable_egl_directfb = xno -a x$enable_egl_fbdev = xno -a x$enable_egl_wayland = xno -a x$enable_egl_xcb = xno -a x$enable_egl_drm = xno -a x$enable_egl_rpi = xno -a x$enable_waffle = xno; then
-  AC_MSG_ERROR(No OpenGL Backends found)
+  AC_MSG_WARN(No OpenGL Backends found)
 fi
 
 # Vulkan WSIs
@@ -507,6 +512,9 @@
   AC_MSG_RESULT([$with_sdl])
   if test x$with_sdl = x2; then
     PKG_CHECK_MODULES(SDL, sdl2, , enable_sdl=no)
+    if test x$enable_sdl = xno; then
+      with_sdl=1
+    fi
   else
     enable_sdl=no
   fi
@@ -607,19 +615,20 @@
 
 # Build rules
 
+AM_CONDITIONAL(PNG, test x$enable_png = xyes)
+AM_CONDITIONAL(TIFF, test x$enable_tiff = xyes)
+
 AM_CONDITIONAL(GL, test x$enable_gl = xyes)
 AM_CONDITIONAL(GLESV1_CM, test x$enable_glesv1_cm = xyes)
 AM_CONDITIONAL(GLESV2, test x$enable_glesv2 = xyes)
+AM_CONDITIONAL(OPENGL, test x$enable_gl = xyes -o x$enable_glesv1_cm = xyes -o x$enable_glesv2 = xyes)
 
 AM_CONDITIONAL(VK, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes)
 
 AM_CONDITIONAL(MOSAIC, test x$enable_glut = xyes)
 
-AM_CONDITIONAL(GUI, test x$enable_efl = xyes -o x$enable_fltk = xyes -o x$enable_glfw = xyes -o x$enable_glut = xyes -o x$enable_gtk = xyes -o x$enable_qt = xyes -o x$enable_sdl = xyes -o x$enable_sfml = xyes -o x$enable_wx = xyes)
-
-AM_CONDITIONAL(VK_GUI, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes && test x$enable_glfw = xyes -o x$enable_sdl = xyes)
+AM_CONDITIONAL(GUI, test x$enable_gl = xyes -o x$enable_glesv1_cm = xyes -o x$enable_glesv2 = xyes && test x$enable_efl = xyes -o x$enable_fltk = xyes -o x$enable_glfw = xyes -o x$enable_glut = xyes -o x$enable_gtk = xyes -o x$enable_qt = xyes -o x$enable_sdl = xyes -o x$enable_sfml = xyes -o x$enable_wx = xyes)
 
-AM_CONDITIONAL(PNG, test x$enable_png = xyes)
-AM_CONDITIONAL(TIFF, test x$enable_tiff = xyes)
+AM_CONDITIONAL(VK_GUI, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes && test x$enable_glfw = xyes -o x$enable_sdl = xyes -a x$with_sdl = x2)
 
 AC_OUTPUT(Makefile)
--- yagears-2.6.orig/gui.cc
+++ yagears-2.6/gui.cc
@@ -38,7 +38,11 @@
 #endif
 #if defined(GLUT)
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
 extern "C" {
+void glutInitContextProfile(int);
 void glutLeaveMainLoop();
 void glutExit();
 }
@@ -1178,6 +1182,7 @@
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
     glutInitWindowSize(win_width, win_height);
     glutInitWindowPosition(win_posx, win_posy);
+    glutInitContextProfile(gears_engine_version(gears_engine) ? GLUT_ES_PROFILE : 0);
     glut_win = glutCreateWindow("yagears");
     glutDisplayFunc(glutDisplay);
     glutIdleFunc(glutIdle);
@@ -1229,6 +1234,7 @@
   #if defined(SDL)
   if (!strcmp(toolkit, "sdl")) {
     #if SDL_VERSION_ATLEAST(2, 0, 0)
+    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, gears_engine_version(gears_engine) ? SDL_GL_CONTEXT_PROFILE_ES : 0);
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_OPENGL);
     SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, gears_engine_version(gears_engine));
     SDL_GL_CreateContext(sdl_win);
--- yagears-2.6.orig/main.c
+++ yagears-2.6/main.c
@@ -61,13 +61,14 @@
 #include <xcb/xcb.h>
 #endif
 #if defined(EGL_DRM)
-#include <dlfcn.h>
 #include <fcntl.h>
 #include <gbm.h>
 #include <libevdev/libevdev.h>
-#include <limits.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
+#ifdef HAVE_DRI
+#include <dlfcn.h>
+#include <limits.h>
 
 struct __DRIextensionRec {
   char *name;
@@ -115,6 +116,7 @@
   int (*queryImage)(struct __DRIimageRec *, int, int *);
 };
 #endif
+#endif
 #if defined(EGL_RPI)
 #include <bcm_host.h>
 #include <fcntl.h>
@@ -558,6 +560,7 @@
 #define drm_surface gbm_surface
 #define drm_bo gbm_bo
 
+#ifdef HAVE_DRI
 struct drm_display {
   struct drm_display *(*dummy)(int);
   int fd;
@@ -670,6 +673,7 @@
 {
   drmModeRmFB(bo->display->fd, (uintptr_t)data);
 }
+#endif
 
 static void gbm_destroy_user_data(struct gbm_bo *bo, void *data)
 {
@@ -925,9 +929,11 @@
   struct drm_display *drm_dpy = NULL;
   struct drm_surface *drm_win = NULL;
   int drm_fd = -1;
+  #ifdef HAVE_DRI
   char drm_driver_path[PATH_MAX];
   struct __DRIcoreExtensionRec **drm_driver_extensions = NULL;
   struct __DRIextensionRec *drm_extensions[] = { &image_loader_extension.base, NULL };
+  #endif
   drmModeResPtr drm_resources = NULL;
   drmModeConnectorPtr drm_connector = NULL;
   drmModeEncoderPtr drm_encoder = NULL;
@@ -1202,6 +1208,7 @@
       goto out;
     }
 
+    #ifdef HAVE_DRI
     if (getenv("NO_GBM")) {
       drm_dpy = calloc(1, sizeof(struct drm_display));
       if (!drm_dpy) {
@@ -1249,7 +1256,9 @@
       drm_dpy->bo_create = drm_bo_create;
       drm_dpy->bo_destroy = drm_bo_destroy;
     }
-    else {
+    else
+    #endif
+    {
       drm_dpy = gbm_create_device(drm_fd);
       if (!drm_dpy) {
         printf("gbm_create_device failed\n");
@@ -1391,7 +1400,7 @@
 
   if (!strcmp(backend, "egl-x11") || !strcmp(backend, "egl-directfb") || !strcmp(backend, "egl-fbdev") || !strcmp(backend, "egl-wayland") || !strcmp(backend, "egl-xcb") || !strcmp(backend, "egl-drm")) {
     egl_extensions = eglQueryString(EGL_NO_DISPLAY, EGL_EXTENSIONS);
-    if (egl_extensions && strstr(egl_extensions, egl_extension_name) && !getenv("NO_EGL_EXT_platform_base")) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && egl_extensions && strstr(egl_extensions, egl_extension_name)) {
       eglGetPlatformDisplayEXT = (PFNEGLGETPLATFORMDISPLAYEXTPROC)eglGetProcAddress("eglGetPlatformDisplayEXT");
       eglCreatePlatformWindowSurfaceEXT = (PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC)eglGetProcAddress("eglCreatePlatformWindowSurfaceEXT");
     }
@@ -1567,8 +1576,6 @@
     egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_BLUE_SIZE;
     egl_config_attr[opt++] = 1;
-    egl_config_attr[opt++] = EGL_ALPHA_SIZE;
-    egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_DEPTH_SIZE;
     egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_RENDERABLE_TYPE;
@@ -1630,6 +1637,8 @@
       goto out;
     }
 
+    XInternAtom(x11_dpy, "WM_DELETE_WINDOW", True);
+
     XMapWindow(x11_dpy, x11_win);
 
     XMoveWindow(x11_dpy, x11_win, win_posx, win_posy);
@@ -1775,6 +1784,7 @@
   #endif
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
+    #ifdef HAVE_DRI
     if (getenv("NO_GBM")) {
       drm_win = calloc(1, sizeof(struct drm_surface));
       if (!drm_win) {
@@ -1786,8 +1796,10 @@
       drm_win->width = drm_connector->modes[0].hdisplay;
       drm_win->height = drm_connector->modes[0].vdisplay;
     }
-    else {
-      drm_win = gbm_surface_create(drm_dpy, drm_connector->modes[0].hdisplay, drm_connector->modes[0].vdisplay, GBM_BO_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT);
+    else
+    #endif
+    {
+      drm_win = gbm_surface_create(drm_dpy, drm_connector->modes[0].hdisplay, drm_connector->modes[0].vdisplay, GBM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT);
       if (!drm_win) {
         printf("gbm_surface_create failed\n");
         goto out;
@@ -1949,7 +1961,6 @@
   #endif
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
-    egl_win = eglCreateWindowSurface(egl_dpy, egl_config, (EGLNativeWindowType)drm_win, NULL);
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_GBM_KHR)
     if (eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, drm_win, NULL);
@@ -2241,31 +2252,45 @@
     #if defined(EGL_DRM)
     if (!strcmp(backend, "egl-drm")) {
       if (redisplay) {
+        #ifdef HAVE_DRI
         if (getenv("NO_GBM")) {
           drm_bo = drm_dpy->surface_lock_front_buffer(drm_win);
         }
-        else {
+        else
+        #endif
+        {
           drm_bo = gbm_surface_lock_front_buffer(drm_win);
         }
         if (drm_bo) {
-          drm_fb_id = getenv("NO_GBM") ? (uintptr_t)drm_bo->user_data : (uintptr_t)gbm_bo_get_user_data(drm_bo);
-          if(!drm_fb_id) {
-            drmModeAddFB(drm_fd, getenv("NO_GBM") ? drm_bo->width : gbm_bo_get_width(drm_bo), getenv("NO_GBM") ? drm_bo->height : gbm_bo_get_height(drm_bo), 24, 32, getenv("NO_GBM") ? drm_bo->stride : gbm_bo_get_stride(drm_bo), getenv("NO_GBM") ? drm_bo->handle : gbm_bo_get_handle(drm_bo).u32, &drm_fb_id);
-            drmModeSetCrtc(drm_fd, drm_encoder->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
-            if (getenv("NO_GBM")) {
+          #ifdef HAVE_DRI
+          if (getenv("NO_GBM")) {
+            drm_fb_id = (uintptr_t)drm_bo->user_data;
+            if (!drm_fb_id) {
+              drmModeAddFB(drm_fd, drm_bo->width, drm_bo->height, 24, 32, drm_bo->stride, drm_bo->handle, &drm_fb_id);
+              drmModeSetCrtc(drm_fd, drm_crtc->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
               drm_bo->user_data = (void *)(uintptr_t)drm_fb_id;
               drm_bo->destroy_user_data = drm_destroy_user_data;
             }
-            else {
+          }
+          else
+          #endif
+          {
+            drm_fb_id = (uintptr_t)gbm_bo_get_user_data(drm_bo);
+            if (!drm_fb_id) {
+              drmModeAddFB(drm_fd, gbm_bo_get_width(drm_bo), gbm_bo_get_height(drm_bo), 24, 32, gbm_bo_get_stride(drm_bo), gbm_bo_get_handle(drm_bo).u32, &drm_fb_id);
+              drmModeSetCrtc(drm_fd, drm_crtc->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
               gbm_bo_set_user_data(drm_bo, (void *)(uintptr_t)drm_fb_id, gbm_destroy_user_data);
             }
           }
-          drmModePageFlip(drm_fd, drm_encoder->crtc_id, drm_fb_id, DRM_MODE_PAGE_FLIP_EVENT, NULL);
+          drmModePageFlip(drm_fd, drm_crtc->crtc_id, drm_fb_id, DRM_MODE_PAGE_FLIP_EVENT, NULL);
           drmHandleEvent(drm_fd, &drm_context);
+          #ifdef HAVE_DRI
           if (getenv("NO_GBM")) {
             drm_dpy->surface_release_buffer(drm_win, drm_bo);
           }
-          else {
+          else
+          #endif
+          {
             gbm_surface_release_buffer(drm_win, drm_bo);
           }
         }
@@ -2622,10 +2647,13 @@
     }
 
     if (drm_win) {
+      #ifdef HAVE_DRI
       if (getenv("NO_GBM")) {
         free(drm_win);
       }
-      else {
+      else
+      #endif
+      {
         gbm_surface_destroy(drm_win);
       }
     }
@@ -2648,8 +2676,9 @@
     }
 
     if (drm_dpy) {
+      #ifdef HAVE_DRI
       if (getenv("NO_GBM")) {
-        if (!drm_dpy->screen) {
+        if (drm_dpy->screen) {
           for (opt = 0; drm_dpy->driver_configs[opt]; opt++)
             free(drm_dpy->driver_configs[opt]);
           free(drm_dpy->driver_configs);
@@ -2657,13 +2686,15 @@
           drm_dpy->core->destroyScreen(drm_dpy->screen);
         }
 
-        if (!drm_dpy->driver) {
+        if (drm_dpy->driver) {
           dlclose(drm_dpy->driver);
         }
 
         free(drm_dpy);
       }
-      else {
+      else
+      #endif
+      {
         gbm_device_destroy(drm_dpy);
       }
     }
--- yagears-2.6.orig/meson.build
+++ yagears-2.6/meson.build
@@ -56,12 +56,12 @@
   gl_dep = dependency('gl', required: false)
   if gl_dep.found()
     if enable_glesv1_cm
-      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
     endif
     if enable_glesv2
       xxd = find_program('xxd', required: false)
       if xxd.found()
-        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
       else
         enable_glesv2 = false
       endif
@@ -80,8 +80,8 @@
   if enable_glesv1_cm
     glesv1_cm_dep = dependency('glesv1_cm', required: false)
     if glesv1_cm_dep.found()
-      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm').stdout().strip().split(' '))
-      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
+      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm', check: true).stdout().strip().split(' '))
+      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so.1"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
     else
       enable_glesv1_cm = false
     endif
@@ -91,8 +91,8 @@
     glesv2_dep = dependency('glesv2', required: false)
     xxd = find_program('xxd', required: false)
     if glesv2_dep.found() and xxd.found()
-      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2').stdout().strip().split(' '))
-      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so"'], link_args: '-ldl', dependencies: glesv2_dep)
+      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2', check: true).stdout().strip().split(' '))
+      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so.2"'], link_args: '-ldl', dependencies: glesv2_dep)
     else
       enable_glesv2 = false
     endif
@@ -100,7 +100,7 @@
 endif
 
 if not enable_gl and not enable_glesv1_cm and not enable_glesv2
-  error('No OpenGL Engines found')
+  warning('No OpenGL Engines found')
 endif
 
 # OpenGL Backends
@@ -109,7 +109,7 @@
 directfb_dep = []
 if enable_gl
   if enable_gl_x11
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if cc.has_function('glXCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       x11_dep = dependency('x11', required: false)
       if not x11_dep.found()
@@ -122,8 +122,8 @@
 
   if enable_gl_directfb
     message('Checking for DirectFBGL module')
-    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal').stdout().strip()
-    if run_command('test', '-d', moduledir + '/interfaces/IDirectFBGL').returncode() == 0
+    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal', check: false).stdout().strip()
+    if import('fs').is_dir(moduledir + '/interfaces/IDirectFBGL')
       message('DirectFBGL found')
       directfb_dep = dependency('directfb', required: false)
       if not directfb_dep.found()
@@ -136,7 +136,7 @@
   endif
 
   if enable_gl_fbdev
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if not cc.has_function('glFBDevCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       enable_gl_fbdev = false
     endif
@@ -204,7 +204,7 @@
           config_h.set('HAVE_WL_SHELL_SURFACE_SET_POSITION', false, description: 'Have function wl_shell_surface_set_position')
         endif
 
-        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client').stdout().strip())]
+        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client', check: true).stdout().strip())]
       endif
     endif
 
@@ -216,18 +216,22 @@
     endif
 
     if enable_egl_drm
-      drm_dep = [dependency('dri', required: false), dependency('gbm', required: false), dependency('libdrm', required: false), dependency('libevdev', required: false)]
+      drm_dep = [dependency('gbm', required: false), dependency('libdrm', required: false), dependency('libevdev', required: false)]
       foreach dep : drm_dep
         if not dep.found()
           enable_egl_drm = false
         endif
       endforeach
       if enable_egl_drm
-        dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri').stdout().strip()
-        modversion = run_command('pkg-config', '--modversion', 'dri')
-        drimajorversion = modversion.stdout().split('.')[0]
-        driminorversion = modversion.stdout().split('.')[1]
-        drm_dep = declare_dependency(compile_args: ['-DDRI_DRIVERDIR="@0@"'.format(dridriverdir), '-DDRI_MAJOR_VERSION=@0@'.format(drimajorversion), '-DDRI_MINOR_VERSION=@0@'.format(driminorversion)], link_args: '-ldl', dependencies: drm_dep)
+        dri_dep = dependency('dri', required: false)
+        if dri_dep.found()
+          dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri', check: true).stdout().strip()
+          modversion = run_command('pkg-config', '--modversion', 'dri', check: true)
+          drimajorversion = modversion.stdout().split('.')[0]
+          driminorversion = modversion.stdout().split('.')[1]
+          drm_dep = declare_dependency(compile_args: ['-DDRI_DRIVERDIR="@0@"'.format(dridriverdir), '-DDRI_MAJOR_VERSION=@0@'.format(drimajorversion), '-DDRI_MINOR_VERSION=@0@'.format(driminorversion)], link_args: '-ldl', dependencies: drm_dep)
+          config_h.set('HAVE_DRI', true, description: 'Have Direct Rendering Infrastructure')
+        endif
       endif
     endif
 
@@ -269,7 +273,7 @@
 config_h.set('WAFFLE', enable_waffle, description: 'Support for Waffle cross-platform wrapper')
 
 if not enable_gl_x11 and not enable_gl_directfb and not enable_gl_fbdev and not enable_egl_x11 and not enable_egl_directfb and not enable_egl_fbdev and not enable_egl_wayland and not enable_egl_xcb and not enable_egl_drm and not enable_egl_rpi and not enable_waffle
-  error('No OpenGL Backends found')
+  warning('No OpenGL Backends found')
 endif
 
 # Vulkan WSIs
@@ -280,7 +284,7 @@
   vulkan_dep = dependency('vulkan', required: false)
   glslang_validator = find_program('glslangValidator', required: false)
   if vulkan_dep.found() and glslang_validator.found()
-    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan', check: true).stdout().strip()
 
     if enable_vk_x11
       if cc.has_function('vkCreateXlibSurfaceKHR', dependencies: cc.find_library('vulkan', dirs: libdir))
@@ -405,7 +409,7 @@
 if enable_fltk
   fltk_config = find_program('fltk-config', required: false)
   if fltk_config.found()
-    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags').stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags').stdout().strip().split(' '))
+    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags', check: true).stdout().strip().split(' '))
   else
     enable_fltk = false
   endif
@@ -494,6 +498,7 @@
     sdl_dep = dependency('sdl2', required: false)
     if not sdl_dep.found()
       enable_sdl = false
+      with_sdl = '1'
     endif
   else
     enable_sdl = false
@@ -522,7 +527,7 @@
 if enable_wx
   wx_config = find_program('wx-config', required: false)
   if wx_config.found()
-    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags').stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl').stdout().strip().split(' '))
+    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl', check: true).stdout().strip().split(' '))
   else
     enable_wx = false
   endif
@@ -606,9 +611,17 @@
 
 # Build rules
 
-GL = enable_gl
-GLESV1_CM = enable_glesv1_cm
-GLESV2 = enable_glesv2
+PNG = enable_png
+TIFF = enable_tiff
+
+if enable_gl or enable_glesv1_cm or enable_glesv2
+  GL = enable_gl
+  GLESV1_CM = enable_glesv1_cm
+  GLESV2 = enable_glesv2
+  OPENGL = true
+else
+  OPENGL = false
+endif
 
 if enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d
   VK = true
@@ -618,21 +631,29 @@
 
 MOSAIC = enable_glut
 
-if enable_efl or enable_fltk or enable_glfw or enable_glut or enable_gtk or enable_qt or enable_sdl or enable_sfml or enable_wx
+if (enable_gl or enable_glesv1_cm or enable_glesv2) and (enable_efl or enable_fltk or enable_glfw or enable_glut or enable_gtk or enable_qt or enable_sdl or enable_sfml or enable_wx)
   GUI = true
 else
   GUI = false
 endif
 
-if (enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d) and (enable_glfw or enable_sdl)
+if (enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d) and (enable_glfw or (enable_sdl and with_sdl == '2'))
   VK_GUI = true
 else
   VK_GUI = false
 endif
 
-PNG = enable_png
-TIFF = enable_tiff
+png_source = []
+if PNG
+png_source = 'png_image.c'
+endif
+
+tiff_source = []
+if TIFF
+tiff_source = 'tiff_image.c'
+endif
 
+if OPENGL
 gl_source = []
 if GL
 gl_source = 'gl_gears.c'
@@ -653,16 +674,6 @@
 glesv2_source = 'glesv2_gears.c'
 endif
 
-png_source = []
-if PNG
-png_source = 'png_image.c'
-endif
-
-tiff_source = []
-if TIFF
-tiff_source = 'tiff_image.c'
-endif
-
 libyagears = static_library('yagears',
                             'gears_engine.c', gl_source, glesv1_cm_source, glesv2_source, vert_xxd_file, frag_xxd_file, 'image_loader.c', png_source, tiff_source,
                             dependencies: [gl_dep, glesv1_cm_dep, glesv2_dep, png_dep, tiff_dep])
@@ -672,6 +683,7 @@
            dependencies: [waffle_dep, egl_dep, x11_dep, directfb_dep, wayland_egl_dep, xcb_dep, drm_dep, rpi_dep],
            link_whole: libyagears,
            install: true)
+endif
 
 if VK
 vert_spv_file = custom_target('vert_spv', command: [glslang_validator, '@INPUT@', '-V', '-x'], input: 'vulkan_gears.vert', output: 'vert.spv')
@@ -701,7 +713,7 @@
 
 if VK_GUI
 executable('yagears2-vk-gui',
-           'vk-gui.cc', 'vulkan_gears.c', 'image_loader.c', png_source, tiff_source,
+           'vk-gui.cc', 'vulkan_gears.c', vert_spv_file, frag_spv_file, 'image_loader.c', png_source, tiff_source,
            dependencies: [vulkan_dep, png_dep, tiff_dep, glfw_dep, sdl_dep],
            install: true)
 endif
--- yagears-2.6.orig/mosaic.c
+++ yagears-2.6/mosaic.c
@@ -24,6 +24,10 @@
 #include "config.h"
 
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
+void glutInitContextProfile(int);
 void glutSetWindowData(void *data);
 void *glutGetWindowData();
 void glutLeaveMainLoop();
@@ -196,6 +200,7 @@
     for (j = 0; j < COLS; j++) {
       gears_engine[i * COLS + j] = gears_engine_new(gears_engine_name(opt));
       glutInitWindowPosition(win_posx, win_posy);
+      glutInitContextProfile(gears_engine_version(gears_engine[i * COLS + j]) ? GLUT_ES_PROFILE : 0);
       glut_win[i * COLS + j] = glutCreateWindow(NULL);
       glutSetWindowData((void *)(long)(i * COLS + j));
       glutDisplayFunc(glutDisplay);
--- yagears-2.6.orig/vk-gui.cc
+++ yagears-2.6/vk-gui.cc
@@ -37,8 +37,10 @@
 #endif
 #if defined(SDL)
 #include <SDL.h>
+#if SDL_MAJOR_VERSION >= 2
 #include <SDL_vulkan.h>
 #endif
+#endif
 
 #include "vulkan_gears.h"
 
@@ -165,7 +167,7 @@
 }
 #endif
 
-#if defined(SDL)
+#if SDL_MAJOR_VERSION >= 2
 static void SDL_Display(SDL_Window *window)
 {
   if (animate) { if (frames) rotate(); else t_rate = t_rot = current_time(); }
@@ -256,7 +258,7 @@
   #if defined(GLFW)
   GLFWwindow *glfw_win;
   #endif
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   SDL_Window *sdl_win;
   int sdl_idle_id;
   #endif
@@ -278,7 +280,7 @@
   #if defined(GLFW)
   strcat(toolkits, "glfw ");
   #endif
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   strcat(toolkits, "sdl ");
   #endif
 
@@ -325,7 +327,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Init(SDL_INIT_VIDEO);
 
@@ -363,7 +365,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_VULKAN);
     sdl_idle_id = 1;
@@ -378,7 +380,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Vulkan_GetInstanceExtensions(sdl_win, &vk_extension_count, NULL);
     vk_extension_names = (const char **)calloc(vk_extension_count, sizeof(const char *));
@@ -419,7 +421,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Vulkan_CreateSurface(sdl_win, vk_instance, &vk_surface);
   }
@@ -482,7 +484,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Display(sdl_win);
     while (1) {
@@ -541,7 +543,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     free(vk_extension_names);
     SDL_DestroyWindow(sdl_win);
