# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build egl-opengl-stubs-build libpng-build tiff-build"

PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists glut-build; then
  GLUT=1
  REQUIRES="$REQUIRES glut-build"
fi

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists gtkglarea2-build; then
  GTK2=1
  REQUIRES="$REQUIRES gtkglarea2-build"
fi

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists sdl-build; then
  PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --print-requires sdl-build | grep -q egl-opengl-stubs-build || { echo SDL with OpenGL support required; exit 1; }
  SDL=1
  REQUIRES="$REQUIRES sdl-build"
elif PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists sdl2-build; then
  PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --print-requires sdl2-build | grep -q egl-opengl-stubs-build || { echo SDL2 with OpenGL support required; exit 1; }
  SDL=1
  REQUIRES="$REQUIRES sdl2-build"
fi

# configure (ac-2.69; am-1.14; lt-2.4.2)
libtoolize -c -f; aclocal; autoconf; autoheader -f; automake -a -c
PKG_CONFIG_PATH=/dfb/lib/pkgconfig LDFLAGS=-Wl,-rpath,/dfb/lib ./configure --disable-egl-drm --disable-egl-fbdev --disable-gl-fbdev --disable-glesv1_cm --prefix=/dfb

# build
make

# install
install -d $DESTDIR/dfb/bin
install yagears $DESTDIR/dfb/bin
test $GLUT || $GTK2 || test $SDL && install yagears-gui $DESTDIR/dfb/bin
test $GLUT && install yagears-mosaic $DESTDIR/fb/bin

# build.pc
install -d $DESTDIR/dfb/share/pkgconfig
cat > $DESTDIR/dfb/share/pkgconfig/yagears-build.pc << EOF
Name: yagears
Version: 1.0
Description: Yet Another Gears OpenGL demo
Requires: $REQUIRES

exec=\\
/dfb/bin/yagears \\
EOF
test $GLUT || test $GTK2 || test $SDL && echo /dfb/bin/yagears-gui \\ >> $DESTDIR/dfb/share/pkgconfig/yagears-build.pc
test $GLUT && echo /dfb/bin/yagears-mosaic \\ >> $DESTDIR/dfb/share/pkgconfig/yagears-build.pc
sed -i '$ s/ \\//' $DESTDIR/dfb/share/pkgconfig/yagears-build.pc

exit
--- yagears-1.0.orig/configure.ac
+++ yagears-1.0/configure.ac
@@ -1,6 +1,7 @@
 AC_INIT(yagears, 1.0)
 
 AC_CONFIG_HEADERS(config.h)
+AC_CONFIG_MACRO_DIR([m4])
 
 AM_INIT_AUTOMAKE
 
@@ -134,6 +135,7 @@
    test x$enable_egl_wayland = xyes || test x$enable_egl_drm || test x$enable_egl_rpi; then
   PKG_CHECK_MODULES(EGL, egl, enable_egl=yes, enable_egl=no)
   if test x$enable_egl = xyes; then
+    EGL_CFLAGS="$EGL_CFLAGS -DEGL_NO_PLATFORM_SPECIFIC_TYPES"
     if test x$enable_egl_x11 = xyes; then
       if test x$enable_gl_x11 = xyes; then
         AC_DEFINE(EGL_X11, 1, Support for EGL with Xlib platform)
@@ -175,8 +177,12 @@
                         AC_DEFINE(EGL_DRM, 1, Support for EGL with DRM platform),
                         enable_egl_drm=no)
       if test x$enable_egl_drm = xyes; then
-        DRM_CFLAGS="$DRM_CFLAGS -DDRI_DRIVERDIR=\\\"`$PKG_CONFIG --variable=dridriverdir dri`\\\" -DDRI_MAJOR_VERSION=`$PKG_CONFIG --modversion dri | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'` -DDRI_MINOR_VERSION=`$PKG_CONFIG --modversion dri | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`"
-        DRM_LIBS="$DRM_LIBS -ldl"
+        PKG_CHECK_MODULES(DRI, dri, have_dri=yes, have_dri=no)
+        if test x$have_dri = xyes; then
+          DRM_CFLAGS="$DRM_CFLAGS -DDRI_DRIVERDIR=\\\"`$PKG_CONFIG --variable=dridriverdir dri`\\\" -DDRI_MAJOR_VERSION=`$PKG_CONFIG --modversion dri | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'` -DDRI_MINOR_VERSION=`$PKG_CONFIG --modversion dri | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`"
+          DRM_LIBS="$DRM_LIBS -ldl"
+          AC_DEFINE(HAVE_DRI, 1, Have Direct Rendering Infrastructure)
+        fi
       fi
     fi
     if test x$enable_egl_rpi = xyes; then
--- yagears-1.0.orig/gui.cc
+++ yagears-1.0/gui.cc
@@ -44,7 +44,11 @@
 #endif
 #if defined(GLUT)
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
 extern "C" {
+void glutInitContextProfile(int);
 void glutLeaveMainLoop();
 void glutExit();
 }
@@ -1104,6 +1108,7 @@
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
     glutInitWindowSize(win_width, win_height);
     glutInitWindowPosition(win_posx, win_posy);
+    glutInitContextProfile(gears_engine_version(gears_engine) ? GLUT_ES_PROFILE : 0);
     glut_win = glutCreateWindow("yagears");
     glutDisplayFunc(glutDisplay);
     glutIdleFunc(glutIdle);
@@ -1122,7 +1127,8 @@
     gtk_gl_area_set_has_depth_buffer(GTK_GL_AREA(gtk_glarea), TRUE);
     g_signal_connect(gtk_glarea, "render", G_CALLBACK(gtk_render), NULL);
     #else
-    int gdk_glconfig[] = { GDK_GL_RGBA, GDK_GL_DOUBLEBUFFER, GDK_GL_DEPTH_SIZE, 1, GDK_GL_NONE };
+    int gdk_glconfig[] = { GDK_GL_RGBA, GDK_GL_DOUBLEBUFFER, GDK_GL_DEPTH_SIZE, 1, GDK_GL_NONE, GDK_GL_NONE };
+    if (gears_engine_version(gears_engine)) gdk_glconfig[4] = GDK_GL_USE_ES;
     gtk_glarea = gtk_gl_area_new(gdk_glconfig);
     #if GTK_CHECK_VERSION(3,0,0)
     g_signal_connect(gtk_glarea, "draw", G_CALLBACK(gtk_render), NULL);
@@ -1155,6 +1161,7 @@
   #if defined(SDL)
   if (!strcmp(toolkit, "sdl")) {
     #if SDL_VERSION_ATLEAST(2, 0, 0)
+    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, gears_engine_version(gears_engine) ? SDL_GL_CONTEXT_PROFILE_ES : 0);
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_OPENGL);
     SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, gears_engine_version(gears_engine));
     SDL_GL_CreateContext(sdl_win);
--- yagears-1.0.orig/main.c
+++ yagears-1.0/main.c
@@ -59,13 +59,14 @@
 #include <xkbcommon/xkbcommon.h>
 #endif
 #if defined(EGL_DRM)
-#include <dlfcn.h>
 #include <fcntl.h>
 #include <gbm.h>
-#include <limits.h>
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <libevdev/libevdev.h>
+#ifdef HAVE_DRI
+#include <dlfcn.h>
+#include <limits.h>
 
 struct __DRIextensionRec {
   char *name;
@@ -113,6 +114,7 @@
   int (*queryImage)(struct __DRIimageRec *, int, int *);
 };
 #endif
+#endif
 #if defined(EGL_RPI)
 #include <fcntl.h>
 #include <termios.h>
@@ -457,6 +459,7 @@
 #define drm_surface gbm_surface
 #define drm_bo gbm_bo
 
+#ifdef HAVE_DRI
 struct drm_display {
   struct drm_display *(*dummy)(int);
   int fd;
@@ -569,6 +572,7 @@
 {
   drmModeRmFB(bo->display->fd, (uintptr_t)data);
 }
+#endif
 
 static void gbm_destroy_user_data(struct gbm_bo *bo, void *data)
 {
@@ -726,9 +730,11 @@
   #if defined(EGL_DRM)
   int drm_fd = -1;
   struct drm_display *drm_dpy = NULL;
+  #ifdef HAVE_DRI
   char drm_driver_path[PATH_MAX];
   struct __DRIcoreExtensionRec **drm_driver_extensions = NULL;
   struct __DRIextensionRec *drm_extensions[] = { &image_loader_extension.base, NULL };
+  #endif
   drmModeResPtr drm_resources = NULL;
   drmModeConnectorPtr drm_connector = NULL;
   drmModeEncoderPtr drm_encoder = NULL;
@@ -988,6 +994,7 @@
       }
     }
 
+    #ifdef HAVE_DRI
     if (getenv("NO_GBM")) {
       drm_dpy = calloc(1, sizeof(struct drm_display));
       if (!drm_dpy) {
@@ -1035,7 +1042,9 @@
       drm_dpy->bo_create = drm_bo_create;
       drm_dpy->bo_destroy = drm_bo_destroy;
     }
-    else {
+    else
+    #endif
+    {
       drm_dpy = gbm_create_device(drm_fd);
       if (!drm_dpy) {
         printf("gbm_create_device failed\n");
@@ -1279,6 +1288,9 @@
     memset(&dfb_desc, 0, sizeof(DFBWindowDescription));
     dfb_desc.flags = DWDESC_SURFACE_CAPS | DWDESC_WIDTH | DWDESC_HEIGHT | DWDESC_POSX | DWDESC_POSY;
     dfb_desc.surface_caps = dfb_attr;
+    if (getenv("DSCAPS_GL")) {
+      dfb_desc.surface_caps |= DSCAPS_GL;
+    }
     dfb_desc.width = win_width;
     dfb_desc.height = win_height;
     dfb_desc.posx = win_posx;
@@ -1343,6 +1355,7 @@
   #endif
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
+    #ifdef HAVE_DRI
     if (getenv("NO_GBM")) {
       drm_win = calloc(1, sizeof(struct drm_surface));
       if (!drm_win) {
@@ -1354,8 +1367,10 @@
       drm_win->width = win_width;
       drm_win->height = win_height;
     }
-    else {
-      drm_win = gbm_surface_create(drm_dpy, win_width, win_height, GBM_BO_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT);
+    else
+    #endif
+    {
+      drm_win = gbm_surface_create(drm_dpy, drm_connector->modes[0].hdisplay, drm_connector->modes[0].vdisplay, GBM_FORMAT_XRGB8888, GBM_BO_USE_SCANOUT);
       if (!drm_win) {
         printf("gbm_surface_create failed\n");
         goto out;
@@ -1463,6 +1478,10 @@
   #endif
   #if defined(GL_DIRECTFB)
   if (!strcmp(backend, "gl-directfb")) {
+    c = alloca(2);
+    sprintf(c, "%d", gears_engine_version(gears_engine));
+    DirectFBSetOption("gles", c);
+
     err = dfb_win->GetGL(dfb_win, &dfb_ctx);
     if (err) {
       printf("GetGL failed: %s\n", DirectFBErrorString(err));
@@ -1701,7 +1720,12 @@
       #endif
       #if defined(GL_DIRECTFB)
       if (!strcmp(backend, "gl-directfb")) {
-        dfb_win->Flip(dfb_win, NULL, DSFLIP_WAITFORSYNC);
+        if (getenv("DSCAPS_GL")) {
+          dfb_ctx->SwapBuffers(dfb_ctx);
+        }
+        else {
+          dfb_win->Flip(dfb_win, NULL, DSFLIP_WAITFORSYNC);
+        }
       }
       #endif
       #if defined(GL_FBDEV)
@@ -1737,8 +1761,13 @@
     #endif
     #if defined(GL_DIRECTFB) || defined(EGL_DIRECTFB)
     if (!strcmp(backend, "gl-directfb") || !strcmp(backend, "egl-directfb")) {
-      if (!animate && redisplay) {
-        redisplay = 0;
+      if (redisplay) {
+        if (getenv("DSCAPS_GL")) {
+          dfb_win->Flip(dfb_win, NULL, DSFLIP_WAITFORSYNC);
+        }
+        if (!animate) {
+          redisplay = 0;
+        }
       }
 
       memset(&dfb_event, 0, sizeof(DFBWindowEvent));
@@ -1775,35 +1804,47 @@
     #if defined(EGL_DRM)
     if (!strcmp(backend, "egl-drm")) {
       if (redisplay) {
-        if (drm_bo) {
-          if (getenv("NO_GBM")) {
-            drm_dpy->surface_release_buffer(drm_win, drm_bo);
-          }
-          else {
-            gbm_surface_release_buffer(drm_win, drm_bo);
-          }
-        }
+        #ifdef HAVE_DRI
         if (getenv("NO_GBM")) {
           drm_bo = drm_dpy->surface_lock_front_buffer(drm_win);
         }
-        else {
+        else
+        #endif
+        {
           drm_bo = gbm_surface_lock_front_buffer(drm_win);
         }
         if (drm_bo) {
-          drm_fb_id = getenv("NO_GBM") ? (uintptr_t)drm_bo->user_data : (uintptr_t)gbm_bo_get_user_data(drm_bo);
-          if(!drm_fb_id) {
-            drmModeAddFB(drm_fd, win_width, win_height, 24, 32, getenv("NO_GBM") ? drm_bo->stride : gbm_bo_get_stride(drm_bo), getenv("NO_GBM") ? drm_bo->handle : gbm_bo_get_handle(drm_bo).u32, &drm_fb_id);
-            drmModeSetCrtc(drm_fd, drm_encoder->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
-            if (getenv("NO_GBM")) {
+          #ifdef HAVE_DRI
+          if (getenv("NO_GBM")) {
+            drm_fb_id = (uintptr_t)drm_bo->user_data;
+            if (!drm_fb_id) {
+              drmModeAddFB(drm_fd, drm_bo->width, drm_bo->height, 24, 32, drm_bo->stride, drm_bo->handle, &drm_fb_id);
+              drmModeSetCrtc(drm_fd, drm_crtc->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
               drm_bo->user_data = (void *)(uintptr_t)drm_fb_id;
               drm_bo->destroy_user_data = drm_destroy_user_data;
             }
-            else {
+          }
+          else
+          #endif
+          {
+            drm_fb_id = (uintptr_t)gbm_bo_get_user_data(drm_bo);
+            if (!drm_fb_id) {
+              drmModeAddFB(drm_fd, gbm_bo_get_width(drm_bo), gbm_bo_get_height(drm_bo), 24, 32, gbm_bo_get_stride(drm_bo), gbm_bo_get_handle(drm_bo).u32, &drm_fb_id);
+              drmModeSetCrtc(drm_fd, drm_crtc->crtc_id, drm_fb_id, 0, 0, &drm_connector->connector_id, 1, &drm_connector->modes[0]);
               gbm_bo_set_user_data(drm_bo, (void *)(uintptr_t)drm_fb_id, gbm_destroy_user_data);
             }
           }
-          drmModePageFlip(drm_fd, drm_encoder->crtc_id, drm_fb_id, DRM_MODE_PAGE_FLIP_EVENT, NULL);
+          drmModePageFlip(drm_fd, drm_crtc->crtc_id, drm_fb_id, DRM_MODE_PAGE_FLIP_EVENT, NULL);
           drmHandleEvent(drm_fd, &drm_context);
+          #ifdef HAVE_DRI
+          if (getenv("NO_GBM")) {
+            drm_dpy->surface_release_buffer(drm_win, drm_bo);
+          }
+          else
+          #endif
+          {
+            gbm_surface_release_buffer(drm_win, drm_bo);
+          }
         }
         if (!animate) {
           redisplay = 0;
@@ -2108,10 +2149,13 @@
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
     if (drm_win) {
+      #ifdef HAVE_DRI
       if (getenv("NO_GBM")) {
         free(drm_win);
       }
-      else {
+      else
+      #endif
+      {
         gbm_surface_destroy(drm_win);
       }
     }
@@ -2134,8 +2178,9 @@
     }
 
     if (drm_dpy) {
+      #ifdef HAVE_DRI
       if (getenv("NO_GBM")) {
-        if (!drm_dpy->screen) {
+        if (drm_dpy->screen) {
           for (opt = 0; drm_dpy->driver_configs[opt]; opt++)
             free(drm_dpy->driver_configs[opt]);
           free(drm_dpy->driver_configs);
@@ -2143,13 +2188,15 @@
           drm_dpy->core->destroyScreen(drm_dpy->screen);
         }
 
-        if (!drm_dpy->driver) {
+        if (drm_dpy->driver) {
           dlclose(drm_dpy->driver);
         }
 
         free(drm_dpy);
       }
-      else {
+      else
+      #endif
+      {
         gbm_device_destroy(drm_dpy);
       }
     }
--- yagears-1.0.orig/mosaic.c
+++ yagears-1.0/mosaic.c
@@ -24,6 +24,10 @@
 #include "config.h"
 
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
+void glutInitContextProfile(int);
 void glutSetWindowData(void *data);
 void *glutGetWindowData();
 void glutLeaveMainLoop();
@@ -82,7 +86,7 @@
 
 static void glutDisplay()
 {
-  int n = (int)glutGetWindowData();
+  int n = (long)glutGetWindowData();
 
   if (animate) { if (frames) rotate(n); else t_rate = t_rot = current_time(); }
   gears_engine_draw(gears_engine[n], view_tz[n], view_rx[n], view_ry[n], model_rz[n]);
@@ -121,7 +125,7 @@
 
 static void glutSpecial(int key, int x, int y)
 {
-  int n = (int)glutGetWindowData();
+  int n = (long)glutGetWindowData();
 
   switch (key) {
     case GLUT_KEY_PAGE_DOWN:
@@ -196,8 +200,9 @@
     for (j = 0; j < COLS; j++) {
       gears_engine[i * COLS + j] = gears_engine_new(gears_engine_name(opt));
       glutInitWindowPosition(win_posx, win_posy);
+      glutInitContextProfile(gears_engine_version(gears_engine[i * COLS + j]) ? GLUT_ES_PROFILE : 0);
       glut_win[i * COLS + j] = glutCreateWindow(NULL);
-      glutSetWindowData((void *)(i * COLS + j));
+      glutSetWindowData((void *)(long)(i * COLS + j));
       glutDisplayFunc(glutDisplay);
       glutIdleFunc(glutIdle);
       glutKeyboardFunc(glutKeyboard);
