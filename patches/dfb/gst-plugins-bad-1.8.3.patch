# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build curl-build directfb2-build gst-plugins-base-build libxml2-build libwebp-build openssl-build"

PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if pkg-config --exists openjpeg2-build; then
  REQUIRES="$REQUIRES openjpeg2-build"
else
  pkg-config --exists --print-errors openjpeg-build || exit 1
  REQUIRES="$REQUIRES openjpeg-build"
fi

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists libde265-build; then
  DE265=1
  REQUIRES="$REQUIRES libde265-build"
fi

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

if pkg-config --exists openal-soft-build; then
  OPENAL=1
  REQUIRES="$REQUIRES openal-soft-build"
fi

if pkg-config --exists x265-build; then
  X265=1
  REQUIRES="$REQUIRES x265-build"
fi

# configure (ac-2.69; am-1.15; lt-2.4.6)
libtoolize -c -f; aclocal -I m4 -I common/m4; autoconf; autoheader -f; automake -a -c
PKG_CONFIG_PATH=/dfb/lib/pkgconfig LDFLAGS=-Wl,-rpath,/dfb/lib ./configure --disable-decklink --disable-fbdev --prefix=/dfb

# build
make

# install
install -d $DESTDIR/dfb/lib
install gst-libs/gst/adaptivedemux/.libs/libgstadaptivedemux-1.0.so.0.* $DESTDIR/dfb/lib/libgstadaptivedemux-1.0.so.0
install gst-libs/gst/audio/.libs/libgstbadaudio-1.0.so.0.* $DESTDIR/dfb/lib/libgstbadaudio-1.0.so.0
install gst-libs/gst/base/.libs/libgstbadbase-1.0.so.0.* $DESTDIR/dfb/lib/libgstbadbase-1.0.so.0
install gst-libs/gst/basecamerabinsrc/.libs/libgstbasecamerabinsrc-1.0.so.0.* $DESTDIR/dfb/lib/libgstbasecamerabinsrc-1.0.so.0
install gst-libs/gst/codecparsers/.libs/libgstcodecparsers-1.0.so.0.* $DESTDIR/dfb/lib/libgstcodecparsers-1.0.so.0
test $GL && install gst-libs/gst/gl/.libs/libgstgl-1.0.so.0.* $DESTDIR/dfb/lib/libgstgl-1.0.so.0
install gst-libs/gst/interfaces/.libs/libgstphotography-1.0.so.0.* $DESTDIR/dfb/lib/libgstphotography-1.0.so.0
install gst-libs/gst/mpegts/.libs/libgstmpegts-1.0.so.0.* $DESTDIR/dfb/lib/libgstmpegts-1.0.so.0
install gst-libs/gst/uridownloader/.libs/libgsturidownloader-1.0.so.0.* $DESTDIR/dfb/lib/libgsturidownloader-1.0.so.0
install gst-libs/gst/video/.libs/libgstbadvideo-1.0.so.0.* $DESTDIR/dfb/lib/libgstbadvideo-1.0.so.0
install -d $DESTDIR/dfb/lib/gstreamer-1.0
install ext/bz2/.libs/libgstbz2.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/curl/.libs/libgstcurl.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/dash/.libs/libgstdashdemux.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/directfb/.libs/libgstdfbvideosink.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/dtls/.libs/libgstdtls.so $DESTDIR/dfb/lib/gstreamer-1.0
test $GL && install ext/gl/.libs/libgstopengl.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/hls/.libs/libgsthls.so $DESTDIR/dfb/lib/gstreamer-1.0
test $DE265 && install ext/libde265/.libs/libgstlibde265.so $DESTDIR/dfb/lib/gstreamer-1.0
test $OPENAL && install ext/openal/.libs/libgstopenal.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/openjpeg/.libs/libgstopenjpeg.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/smoothstreaming/.libs/libgstsmoothstreaming.so $DESTDIR/dfb/lib/gstreamer-1.0
install ext/webp/.libs/libgstwebp.so $DESTDIR/dfb/lib/gstreamer-1.0
test $X265 && install ext/x265/.libs/libgstx265.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/accurip/.libs/libgstaccurip.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/adpcmdec/.libs/libgstadpcmdec.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/adpcmenc/.libs/libgstadpcmenc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/aiff/.libs/libgstaiff.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/asfmux/.libs/libgstasfmux.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/audiofxbad/.libs/libgstaudiofxbad.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/audiomixer/.libs/libgstaudiomixer.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/audiovisualizers/.libs/libgstaudiovisualizers.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/autoconvert/.libs/libgstautoconvert.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/bayer/.libs/libgstbayer.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/camerabin2/.libs/libgstcamerabin2.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/coloreffects/.libs/libgstcoloreffects.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/compositor/.libs/libgstcompositor.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/dataurisrc/.libs/libgstdataurisrc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/debugutils/.libs/libgstdebugutilsbad.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/dvbsuboverlay/.libs/libgstdvbsuboverlay.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/dvdspu/.libs/libgstdvdspu.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/festival/.libs/libgstfestival.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/fieldanalysis/.libs/libgstfieldanalysis.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/freeverb/.libs/libgstfreeverb.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/frei0r/.libs/libgstfrei0r.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/gaudieffects/.libs/libgstgaudieffects.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/gdp/.libs/libgstgdp.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/geometrictransform/.libs/libgstgeometrictransform.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/id3tag/.libs/libgstid3tag.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/inter/.libs/libgstinter.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/interlace/.libs/libgstinterlace.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/ivfparse/.libs/libgstivfparse.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/ivtc/.libs/libgstivtc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/jp2kdecimator/.libs/libgstjp2kdecimator.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/jpegformat/.libs/libgstjpegformat.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/librfb/.libs/libgstrfbsrc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/midi/.libs/libgstmidi.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/mpegdemux/.libs/libgstmpegpsdemux.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/mpegpsmux/.libs/libgstmpegpsmux.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/mpegtsdemux/.libs/libgstmpegtsdemux.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/mpegtsmux/.libs/libgstmpegtsmux.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/mxf/.libs/libgstmxf.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/netsim/.libs/libgstnetsim.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/pcapparse/.libs/libgstpcapparse.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/pnm/.libs/libgstpnm.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/rawparse/.libs/libgstrawparse.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/removesilence/.libs/libgstremovesilence.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/onvif/.libs/libgstrtponvif.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/sdp/.libs/libgstsdpelem.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/segmentclip/.libs/libgstsegmentclip.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/siren/.libs/libgstsiren.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/smooth/.libs/libgstsmooth.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/speed/.libs/libgstspeed.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/stereo/.libs/libgststereo.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/subenc/.libs/libgstsubenc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/videofilters/.libs/libgstvideofiltersbad.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/videoframe_audiolevel/.libs/libgstvideoframe_audiolevel.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/videoparsers/.libs/libgstvideoparsersbad.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/videosignal/.libs/libgstvideosignal.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/vmnc/.libs/libgstvmnc.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/y4m/.libs/libgsty4mdec.so $DESTDIR/dfb/lib/gstreamer-1.0
install gst/yadif/.libs/libgstyadif.so $DESTDIR/dfb/lib/gstreamer-1.0
install sys/dvb/.libs/libgstdvb.so $DESTDIR/dfb/lib/gstreamer-1.0
install sys/shm/.libs/libgstshm.so $DESTDIR/dfb/lib/gstreamer-1.0
install sys/vcd/.libs/libgstvcdsrc.so $DESTDIR/dfb/lib/gstreamer-1.0

# build.pc
install -d $DESTDIR/dfb/share/pkgconfig
cat > $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
Name: gst-plugins-bad
Version: 1.8.3
Description: Bad GStreamer plugins
Requires: $REQUIRES

exec=\\
/dfb/lib/libgstadaptivedemux-1.0.so.0 \\
/dfb/lib/libgstbadaudio-1.0.so.0 \\
/dfb/lib/libgstbadbase-1.0.so.0 \\
/dfb/lib/libgstbadvideo-1.0.so.0 \\
/dfb/lib/libgstbasecamerabinsrc-1.0.so.0 \\
/dfb/lib/libgstcodecparsers-1.0.so.0 \\
EOF
test $GL && cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/libgstgl-1.0.so.0 \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/libgstmpegts-1.0.so.0 \\
/dfb/lib/libgstphotography-1.0.so.0 \\
/dfb/lib/libgsturidownloader-1.0.so.0 \\
/dfb/lib/gstreamer-1.0/libgstaccurip.so \\
/dfb/lib/gstreamer-1.0/libgstadpcmdec.so \\
/dfb/lib/gstreamer-1.0/libgstadpcmenc.so \\
/dfb/lib/gstreamer-1.0/libgstaiff.so \\
/dfb/lib/gstreamer-1.0/libgstasfmux.so \\
/dfb/lib/gstreamer-1.0/libgstaudiofxbad.so \\
/dfb/lib/gstreamer-1.0/libgstaudiomixer.so \\
/dfb/lib/gstreamer-1.0/libgstaudiovisualizers.so \\
/dfb/lib/gstreamer-1.0/libgstautoconvert.so \\
/dfb/lib/gstreamer-1.0/libgstbayer.so \\
/dfb/lib/gstreamer-1.0/libgstbz2.so \\
/dfb/lib/gstreamer-1.0/libgstcamerabin2.so \\
/dfb/lib/gstreamer-1.0/libgstcoloreffects.so \\
/dfb/lib/gstreamer-1.0/libgstcompositor.so \\
/dfb/lib/gstreamer-1.0/libgstcurl.so \\
/dfb/lib/gstreamer-1.0/libgstdashdemux.so \\
/dfb/lib/gstreamer-1.0/libgstdataurisrc.so \\
/dfb/lib/gstreamer-1.0/libgstdebugutilsbad.so \\
/dfb/lib/gstreamer-1.0/libgstdfbvideosink.so \\
/dfb/lib/gstreamer-1.0/libgstdtls.so \\
/dfb/lib/gstreamer-1.0/libgstdvb.so \\
/dfb/lib/gstreamer-1.0/libgstdvbsuboverlay.so \\
/dfb/lib/gstreamer-1.0/libgstdvdspu.so \\
/dfb/lib/gstreamer-1.0/libgstfestival.so \\
/dfb/lib/gstreamer-1.0/libgstfieldanalysis.so \\
/dfb/lib/gstreamer-1.0/libgstfreeverb.so \\
/dfb/lib/gstreamer-1.0/libgstfrei0r.so \\
/dfb/lib/gstreamer-1.0/libgstgaudieffects.so \\
/dfb/lib/gstreamer-1.0/libgstgdp.so \\
/dfb/lib/gstreamer-1.0/libgstgeometrictransform.so \\
/dfb/lib/gstreamer-1.0/libgsthls.so \\
/dfb/lib/gstreamer-1.0/libgstid3tag.so \\
/dfb/lib/gstreamer-1.0/libgstinter.so \\
/dfb/lib/gstreamer-1.0/libgstinterlace.so \\
/dfb/lib/gstreamer-1.0/libgstivfparse.so \\
/dfb/lib/gstreamer-1.0/libgstivtc.so \\
/dfb/lib/gstreamer-1.0/libgstjp2kdecimator.so \\
/dfb/lib/gstreamer-1.0/libgstjpegformat.so \\
EOF
test $DE265 && cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstlibde265.so \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstmidi.so \\
/dfb/lib/gstreamer-1.0/libgstmpegpsdemux.so \\
/dfb/lib/gstreamer-1.0/libgstmpegpsmux.so \\
/dfb/lib/gstreamer-1.0/libgstmpegtsdemux.so \\
/dfb/lib/gstreamer-1.0/libgstmpegtsmux.so \\
/dfb/lib/gstreamer-1.0/libgstmxf.so \\
/dfb/lib/gstreamer-1.0/libgstnetsim.so \\
EOF
test $OPENAL && cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstopenal.so \\
EOF
test $GL && cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstopengl.so \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstopenjpeg.so \\
/dfb/lib/gstreamer-1.0/libgstpcapparse.so \\
/dfb/lib/gstreamer-1.0/libgstpnm.so \\
/dfb/lib/gstreamer-1.0/libgstrawparse.so \\
/dfb/lib/gstreamer-1.0/libgstremovesilence.so \\
/dfb/lib/gstreamer-1.0/libgstrfbsrc.so \\
/dfb/lib/gstreamer-1.0/libgstrtponvif.so \\
/dfb/lib/gstreamer-1.0/libgstsdpelem.so \\
/dfb/lib/gstreamer-1.0/libgstsegmentclip.so \\
/dfb/lib/gstreamer-1.0/libgstshm.so \\
/dfb/lib/gstreamer-1.0/libgstsiren.so \\
/dfb/lib/gstreamer-1.0/libgstsmooth.so \\
/dfb/lib/gstreamer-1.0/libgstsmoothstreaming.so \\
/dfb/lib/gstreamer-1.0/libgstspeed.so \\
/dfb/lib/gstreamer-1.0/libgststereo.so \\
/dfb/lib/gstreamer-1.0/libgstsubenc.so \\
/dfb/lib/gstreamer-1.0/libgstvcdsrc.so \\
/dfb/lib/gstreamer-1.0/libgstvideofiltersbad.so \\
/dfb/lib/gstreamer-1.0/libgstvideoframe_audiolevel.so \\
/dfb/lib/gstreamer-1.0/libgstvideoparsersbad.so \\
/dfb/lib/gstreamer-1.0/libgstvideosignal.so \\
/dfb/lib/gstreamer-1.0/libgstvmnc.so \\
/dfb/lib/gstreamer-1.0/libgstwebp.so \\
EOF
test $X265 && cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgstx265.so \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/gst-plugins-bad-build.pc << EOF
/dfb/lib/gstreamer-1.0/libgsty4mdec.so \\
/dfb/lib/gstreamer-1.0/libgstyadif.so
EOF

exit
--- gst-plugins-bad-1.8.3.orig/configure.ac
+++ gst-plugins-bad-1.8.3/configure.ac
@@ -780,6 +780,8 @@
     CFLAGS=$old_CFLAGS
 
     PKG_CHECK_MODULES(WAYLAND_EGL, wayland-client >= 1.0 wayland-cursor >= 1.0 wayland-egl >= 9.0, HAVE_WAYLAND_EGL=yes, HAVE_WAYLAND_EGL=no)
+
+    PKG_CHECK_MODULES(DIRECTFB, directfb, HAVE_DFB=yes, HAVE_DFB=no)
   ;;
 esac
 
@@ -964,7 +966,9 @@
 
     if test "x$HAVE_X" = "xno"; then
       if test "x$HAVE_WAYLAND_EGL" = "xno"; then
-        AC_MSG_WARN([X or Wayland is required for OpenGL support])
+        if test "x$HAVE_DFB" = "xno"; then
+          AC_MSG_WARN([X, Wayland or DirectFB is required for OpenGL support])
+        fi
       fi
     fi
 
@@ -1003,6 +1007,16 @@
       fi
     fi
 
+    if test "x$HAVE_DFB" = "xyes"; then
+      if test "x$NEED_EGL" = "xno" -o "x$HAVE_EGL" = "xno"; then
+        AC_MSG_WARN([EGL is required by the DirectFB backend for OpenGL support])
+      else
+        GL_LIBS="$GL_LIBS $DIRECTFB_LIBS"
+        GL_CFLAGS="$GL_CFLAGS $DIRECTFB_CFLAGS -DEGL_NO_PLATFORM_SPECIFIC_TYPES"
+        HAVE_WINDOW_DIRECTFB=yes
+      fi
+    fi
+
     if test "x$HAVE_EGL_RPI" = "xyes"; then
       if test "x$NEED_DISPMANX" != "xno"; then
         HAVE_WINDOW_DISPMANX=yes
@@ -1017,7 +1031,7 @@
       fi
     else
       if test "x$NEED_EGL" != "xno"; then
-        if test "x$HAVE_WINDOW_WAYLAND" = "xyes" -o "x$HAVE_WINDOW_X11" = "xyes" -o "x$HAVE_WINDOW_DISPMANX" = "xyes"; then
+        if test "x$HAVE_WINDOW_WAYLAND" = "xyes" -o "x$HAVE_WINDOW_X11" = "xyes" -o "x$HAVE_WINDOW_DIRECTFB" = "xyes" -o "x$HAVE_WINDOW_DISPMANX" = "xyes"; then
           GL_LIBS="$GL_LIBS -lEGL $EGL_LIBS"
           GL_CFLAGS="$GL_CFLAGS $EGL_CFLAGS"
           USE_EGL=yes
@@ -1164,6 +1178,7 @@
 GST_GL_HAVE_WINDOW_WIN32=0
 GST_GL_HAVE_WINDOW_WAYLAND=0
 GST_GL_HAVE_WINDOW_ANDROID=0
+GST_GL_HAVE_WINDOW_DIRECTFB=0
 GST_GL_HAVE_WINDOW_DISPMANX=0
 GST_GL_HAVE_WINDOW_EAGL=0
 
@@ -1187,6 +1202,10 @@
   GL_WINDOWS="android $GL_WINDOWS"
   GST_GL_HAVE_WINDOW_ANDROID=1
 fi
+if test "x$HAVE_WINDOW_DIRECTFB" = "xyes"; then
+  GL_WINDOWS="directfb $GL_WINDOWS"
+  GST_GL_HAVE_WINDOW_DIRECTFB=1
+fi
 if test "x$HAVE_WINDOW_DISPMANX" = "xyes"; then
   GL_WINDOWS="dispmanx $GL_WINDOWS"
   GST_GL_HAVE_WINDOW_DISPMANX=1
@@ -1202,6 +1221,7 @@
 #define GST_GL_HAVE_WINDOW_WIN32 $GST_GL_HAVE_WINDOW_WIN32
 #define GST_GL_HAVE_WINDOW_WAYLAND $GST_GL_HAVE_WINDOW_WAYLAND
 #define GST_GL_HAVE_WINDOW_ANDROID $GST_GL_HAVE_WINDOW_ANDROID
+#define GST_GL_HAVE_WINDOW_DIRECTFB $GST_GL_HAVE_WINDOW_DIRECTFB
 #define GST_GL_HAVE_WINDOW_DISPMANX $GST_GL_HAVE_WINDOW_DISPMANX
 #define GST_GL_HAVE_WINDOW_EAGL $GST_GL_HAVE_WINDOW_EAGL
 "
@@ -1274,6 +1294,7 @@
 
   HAVE_WINDOW_X11=no
   HAVE_WINDOW_WIN32=no
+  HAVE_WINDOW_DIRECTFB=no
   HAVE_WINDOW_DISPMANX=no
   HAVE_WINDOW_WAYLAND=no
   HAVE_WINDOW_ANDROID=no
@@ -1290,6 +1311,7 @@
 AM_CONDITIONAL(HAVE_WINDOW_X11, test "x$HAVE_WINDOW_X11" = "xyes")
 AM_CONDITIONAL(HAVE_WINDOW_COCOA, test "x$HAVE_WINDOW_COCOA" = "xyes")
 AM_CONDITIONAL(HAVE_WINDOW_WIN32, test "x$HAVE_WINDOW_WIN32" = "xyes")
+AM_CONDITIONAL(HAVE_WINDOW_DIRECTFB, test "x$HAVE_WINDOW_DIRECTFB" = "xyes")
 AM_CONDITIONAL(HAVE_WINDOW_DISPMANX, test "x$HAVE_WINDOW_DISPMANX" = "xyes")
 AM_CONDITIONAL(HAVE_WINDOW_WAYLAND, test "x$HAVE_WINDOW_WAYLAND" = "xyes")
 AM_CONDITIONAL(HAVE_WINDOW_ANDROID, test "x$HAVE_WINDOW_ANDROID" = "xyes")
@@ -2150,14 +2172,11 @@
 
 dnl **** DirectFB ****
 translit(dnm, m, l) AM_CONDITIONAL(USE_DIRECTFB, true)
-AG_GST_CHECK_FEATURE(DIRECTFB, [directfb], dfbvideosink , [
-  PKG_CHECK_MODULES(DIRECTFB, directfb >= 0.9.24, HAVE_DIRECTFB="yes", [
-    HAVE_DIRECTFB="no"
-  ])
-])
+AG_GST_CHECK_FEATURE(DIRECTFB, [directfb sink], dfbvideosink, HAVE_DIRECTFB=$HAVE_DFB)
 
 dnl **** Wayland ****
 translit(dnm, m, l) AM_CONDITIONAL(USE_WAYLAND, true)
+echo
 AC_PATH_PROG([wayland_scanner], [wayland-scanner])
 AG_GST_CHECK_FEATURE(WAYLAND, [wayland sink], wayland , [
   PKG_CHECK_MODULES(WAYLAND, wayland-client >= 1.4.0, [
@@ -2722,7 +2741,7 @@
   if test x"$HAVE_OPENJPEG" = x"yes"; then
     dnl minor API changes in v2.1
     AG_GST_PKG_CHECK_MODULES(OPENJPEG_2_1, libopenjp2 >= 2.1)
-    if test x"$HAVE_OPENJPEG" = x"yes"; then
+    if test x"$HAVE_OPENJPEG_2_1" = x"yes"; then
       AC_DEFINE([HAVE_OPENJPEG_2_1], 1, [Define if OpenJPEG 2.1 is used])
     fi
   else
@@ -3582,6 +3601,7 @@
 gst-libs/gst/gl/Makefile
 gst-libs/gst/gl/android/Makefile
 gst-libs/gst/gl/cocoa/Makefile
+gst-libs/gst/gl/directfb/Makefile
 gst-libs/gst/gl/dispmanx/Makefile
 gst-libs/gst/gl/glprototypes/Makefile
 gst-libs/gst/gl/eagl/Makefile
--- gst-plugins-bad-1.8.3.orig/ext/dash/gstdashdemux.c
+++ gst-plugins-bad-1.8.3/ext/dash/gstdashdemux.c
@@ -151,7 +151,7 @@
 #include <gio/gio.h>
 #include <gst/base/gsttypefindhelper.h>
 #include <gst/tag/tag.h>
-#include <gst/net/gstnet.h>
+#include <gst/net/net.h>
 #include "gst/gst-i18n-plugin.h"
 #include "gstdashdemux.h"
 #include "gstdash_debug.h"
--- gst-plugins-bad-1.8.3.orig/ext/directfb/dfbvideosink.c
+++ gst-plugins-bad-1.8.3/ext/directfb/dfbvideosink.c
@@ -589,10 +589,9 @@
           switch (event.input.key_symbol) {
             case DIKS_ESCAPE:
             {
-              GST_ELEMENT_ERROR (dfbvideosink, RESOURCE, OPEN_WRITE,
-                  ("Video output device is gone."),
-                  ("We were running fullscreen and user "
-                      "pressed the ESC key, stopping playback."));
+              GstPad *pad = gst_pad_get_peer (GST_VIDEO_SINK_PAD (dfbvideosink));
+              gst_pad_push_event (pad, gst_event_new_eos ());
+              gst_object_unref (pad);
             }
             default:
               GST_DEBUG_OBJECT (dfbvideosink, "key press event %c !",
@@ -1117,12 +1116,15 @@
       pixel_format = DSPF_RGB16;
       break;
     case GST_VIDEO_FORMAT_RGB:
+    case GST_VIDEO_FORMAT_BGR:
       pixel_format = DSPF_RGB24;
       break;
     case GST_VIDEO_FORMAT_xRGB:
+    case GST_VIDEO_FORMAT_BGRx:
       pixel_format = DSPF_RGB32;
       break;
     case GST_VIDEO_FORMAT_ARGB:
+    case GST_VIDEO_FORMAT_BGRA:
       pixel_format = DSPF_ARGB;
       break;
     case GST_VIDEO_FORMAT_I420:
@@ -1160,13 +1162,25 @@
       fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_RGB16);
       break;
     case DSPF_RGB24:
+#if G_BYTE_ORDER == G_BIG_ENDIAN
       fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_RGB);
+#else
+      fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_BGR);
+#endif
       break;
     case DSPF_RGB32:
+#if G_BYTE_ORDER == G_BIG_ENDIAN
       fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_xRGB);
+#else
+      fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_BGRx);
+#endif
       break;
     case DSPF_ARGB:
+#if G_BYTE_ORDER == G_BIG_ENDIAN
       fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_ARGB);
+#else
+      fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_BGRA);
+#endif
       break;
     case DSPF_YUY2:
       fourcc = gst_video_format_to_string (GST_VIDEO_FORMAT_YUY2);
@@ -1594,11 +1608,9 @@
     lc.flags = DLCONF_PIXELFORMAT;
     lc.pixelformat = pixel_format;
 
-    ret = dfbvideosink->layer->SetConfiguration (dfbvideosink->layer, &lc);
-    if (ret != DFB_OK) {
-      GST_WARNING_OBJECT (dfbvideosink, "failed setting layer pixelformat "
-          "to %s", gst_dfbvideosink_get_format_name (pixel_format));
-    } else {
+    if (DFB_BYTES_PER_PIXEL(pixel_format) ==
+        DFB_BYTES_PER_PIXEL(dfbvideosink->pixel_format)) {
+      dfbvideosink->layer->SetConfiguration (dfbvideosink->layer, &lc);
       dfbvideosink->layer->GetConfiguration (dfbvideosink->layer, &lc);
       dfbvideosink->out_width = lc.width;
       dfbvideosink->out_height = lc.height;
@@ -1609,12 +1621,6 @@
     }
   }
 
-  if (pixel_format != dfbvideosink->pixel_format) {
-    GST_WARNING_OBJECT (dfbvideosink, "setcaps sent us a different pixel "
-        "format %s", gst_dfbvideosink_get_format_name (pixel_format));
-    goto beach;
-  }
-
   dfbvideosink->video_width = video_width;
   dfbvideosink->video_height = video_height;
 
@@ -1634,7 +1640,8 @@
         "failed to set buffer pool configuration");
     goto beach;
   }
-  if (!gst_buffer_pool_set_active (dfbvideosink->pool, TRUE)) {
+  if (pixel_format == dfbvideosink->pixel_format &&
+      !gst_buffer_pool_set_active (dfbvideosink->pool, TRUE)) {
     GST_WARNING_OBJECT (dfbvideosink, "failed to activate buffer pool");
     goto beach;
   }
--- gst-plugins-bad-1.8.3.orig/ext/dtls/gstdtlsconnection.c
+++ gst-plugins-bad-1.8.3/ext/dtls/gstdtlsconnection.c
@@ -239,7 +239,7 @@
       priv->bio = BIO_new (BIO_s_gst_dtls_connection ());
       g_return_if_fail (priv->bio);
 
-      priv->bio->ptr = self;
+      BIO_set_data (priv->bio, self);
       SSL_set_bio (priv->ssl, priv->bio, priv->bio);
 
       SSL_set_verify (priv->ssl,
@@ -573,10 +573,9 @@
   states |= (! !SSL_want_write (priv->ssl) << 20);
   states |= (! !SSL_want_read (priv->ssl) << 24);
 
-  GST_LOG_OBJECT (self, "%s: role=%s buf=(%d,%p:%d/%d) %x|%x %s",
+  GST_LOG_OBJECT (self, "%s: role=%s buf=(%p:%d/%d) %x|%x %s",
       str,
       priv->is_client ? "client" : "server",
-      pqueue_size (priv->ssl->d1->sent_messages),
       priv->bio_buffer,
       priv->bio_buffer_offset,
       priv->bio_buffer_len,
@@ -737,7 +736,7 @@
   self = SSL_get_ex_data (ssl, connection_ex_index);
   g_return_val_if_fail (GST_IS_DTLS_CONNECTION (self), FALSE);
 
-  pem = _gst_dtls_x509_to_pem (x509_ctx->cert);
+  pem = _gst_dtls_x509_to_pem (X509_STORE_CTX_get0_cert (x509_ctx));
 
   if (!pem) {
     GST_WARNING_OBJECT (self,
@@ -749,7 +748,8 @@
       gint len;
 
       len =
-          X509_NAME_print_ex (bio, X509_get_subject_name (x509_ctx->cert), 1,
+          X509_NAME_print_ex (bio,
+          X509_get_subject_name (X509_STORE_CTX_get0_cert (x509_ctx)), 1,
           XN_FLAG_MULTILINE);
       BIO_read (bio, buffer, len);
       buffer[len] = '\0';
@@ -777,29 +777,32 @@
     ########  ####  #######
 */
 
-static BIO_METHOD custom_bio_methods = {
-  BIO_TYPE_BIO,
-  "stream",
-  bio_method_write,
-  bio_method_read,
-  NULL,
-  NULL,
-  bio_method_ctrl,
-  bio_method_new,
-  bio_method_free,
-  NULL,
-};
+static BIO_METHOD *custom_bio_methods;
 
 static BIO_METHOD *
 BIO_s_gst_dtls_connection (void)
 {
-  return &custom_bio_methods;
+  if (custom_bio_methods != NULL)
+    return custom_bio_methods;
+
+  custom_bio_methods = BIO_meth_new (BIO_TYPE_BIO, "stream");
+  if (custom_bio_methods == NULL
+      || !BIO_meth_set_write (custom_bio_methods, bio_method_write)
+      || !BIO_meth_set_read (custom_bio_methods, bio_method_read)
+      || !BIO_meth_set_ctrl (custom_bio_methods, bio_method_ctrl)
+      || !BIO_meth_set_create (custom_bio_methods, bio_method_new)
+      || !BIO_meth_set_destroy (custom_bio_methods, bio_method_free)) {
+    BIO_meth_free (custom_bio_methods);
+    return NULL;
+  }
+
+  return custom_bio_methods;
 }
 
 static int
 bio_method_write (BIO * bio, const char *data, int size)
 {
-  GstDtlsConnection *self = GST_DTLS_CONNECTION (bio->ptr);
+  GstDtlsConnection *self = GST_DTLS_CONNECTION (BIO_get_data (bio));
 
   GST_LOG_OBJECT (self, "BIO: writing %d", size);
 
@@ -824,7 +827,7 @@
 static int
 bio_method_read (BIO * bio, char *out_buffer, int size)
 {
-  GstDtlsConnection *self = GST_DTLS_CONNECTION (bio->ptr);
+  GstDtlsConnection *self = GST_DTLS_CONNECTION (BIO_get_data (bio));
   GstDtlsConnectionPrivate *priv = self->priv;
   guint internal_size;
   gint copy_size;
@@ -868,7 +871,7 @@
 static long
 bio_method_ctrl (BIO * bio, int cmd, long arg1, void *arg2)
 {
-  GstDtlsConnection *self = GST_DTLS_CONNECTION (bio->ptr);
+  GstDtlsConnection *self = GST_DTLS_CONNECTION (BIO_get_data (bio));
   GstDtlsConnectionPrivate *priv = self->priv;
 
   switch (cmd) {
@@ -916,8 +919,8 @@
 {
   GST_LOG_OBJECT (NULL, "BIO: new");
 
-  bio->shutdown = 0;
-  bio->init = 1;
+  BIO_set_shutdown (bio, 0);
+  BIO_set_init (bio, 1);
 
   return 1;
 }
@@ -930,6 +933,6 @@
     return 0;
   }
 
-  GST_LOG_OBJECT (GST_DTLS_CONNECTION (bio->ptr), "BIO free");
+  GST_LOG_OBJECT (GST_DTLS_CONNECTION (BIO_get_data (bio)), "BIO free");
   return 0;
 }
--- gst-plugins-bad-1.8.3.orig/ext/hls/gsthlsdemux.c
+++ gst-plugins-bad-1.8.3/ext/hls/gsthlsdemux.c
@@ -1100,11 +1100,11 @@
 gst_hls_demux_decrypt_start (GstHLSDemux * demux, const guint8 * key_data,
     const guint8 * iv_data)
 {
-  EVP_CIPHER_CTX_init (&demux->aes_ctx);
-  if (!EVP_DecryptInit_ex (&demux->aes_ctx, EVP_aes_128_cbc (), NULL, key_data,
+  demux->aes_ctx = EVP_CIPHER_CTX_new ();
+  if (!EVP_DecryptInit_ex (demux->aes_ctx, EVP_aes_128_cbc (), NULL, key_data,
           iv_data))
     return FALSE;
-  EVP_CIPHER_CTX_set_padding (&demux->aes_ctx, 0);
+  EVP_CIPHER_CTX_set_padding (demux->aes_ctx, 0);
   return TRUE;
 }
 
@@ -1118,10 +1118,10 @@
     return FALSE;
 
   len = (int) length;
-  if (!EVP_DecryptUpdate (&demux->aes_ctx, decrypted_data, &len, encrypted_data,
+  if (!EVP_DecryptUpdate (demux->aes_ctx, decrypted_data, &len, encrypted_data,
           len))
     return FALSE;
-  EVP_DecryptFinal_ex (&demux->aes_ctx, decrypted_data + len, &flen);
+  EVP_DecryptFinal_ex (demux->aes_ctx, decrypted_data + len, &flen);
   g_return_val_if_fail (len + flen == length, FALSE);
   return TRUE;
 }
@@ -1129,7 +1129,8 @@
 static void
 gst_hls_demux_decrypt_end (GstHLSDemux * demux)
 {
-  EVP_CIPHER_CTX_cleanup (&demux->aes_ctx);
+  EVP_CIPHER_CTX_free (demux->aes_ctx);
+  demux->aes_ctx = NULL;
 }
 
 #elif defined(HAVE_NETTLE)
--- gst-plugins-bad-1.8.3.orig/ext/hls/gsthlsdemux.h
+++ gst-plugins-bad-1.8.3/ext/hls/gsthlsdemux.h
@@ -76,7 +76,7 @@
 
   /* decryption tooling */
 #if defined(HAVE_OPENSSL)
-  EVP_CIPHER_CTX aes_ctx;
+  EVP_CIPHER_CTX *aes_ctx;
 #elif defined(HAVE_NETTLE)
   struct CBC_CTX (struct aes_ctx, AES_BLOCK_SIZE) aes_ctx;
 #else
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/basecamerabinsrc/gstcamerabinpreview.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/basecamerabinsrc/gstcamerabinpreview.c
@@ -26,8 +26,7 @@
  * #GstCameraBinVideo.
  *
  */
-#include <gst/app/gstappsrc.h>
-#include <gst/app/gstappsink.h>
+#include <gst/app/app.h>
 #include <gst/glib-compat-private.h>
 #include "gstcamerabinpreview.h"
 #include "gstbasecamerasrc.h"
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/Makefile.am
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/Makefile.am
@@ -2,7 +2,7 @@
 lib_LTLIBRARIES = libgstgl-@GST_API_VERSION@.la
 
 SUBDIRS = glprototypes
-DIST_SUBDIRS = glprototypes android x11 win32 cocoa wayland dispmanx egl eagl
+DIST_SUBDIRS = glprototypes android x11 win32 cocoa wayland dispmanx egl eagl directfb
 
 built_sys_header_configure = gstglconfig.h
 
@@ -102,6 +102,11 @@
 libgstgl_@GST_API_VERSION@_la_LIBADD += wayland/libgstgl-wayland.la
 endif
 
+if HAVE_WINDOW_DIRECTFB
+SUBDIRS += directfb
+libgstgl_@GST_API_VERSION@_la_LIBADD += directfb/libgstgl-directfb.la
+endif
+
 if HAVE_WINDOW_DISPMANX
 SUBDIRS += dispmanx
 libgstgl_@GST_API_VERSION@_la_LIBADD += dispmanx/libgstgl-dispmanx.la
@@ -123,9 +128,6 @@
 libgstgl_@GST_API_VERSION@_la_LIBADD += -lgstallocators-$(GST_API_VERSION)
 endif
 
-configexecincludedir = $(libdir)/gstreamer-@GST_API_VERSION@/include/gst/gl
-nodist_configexecinclude_HEADERS = $(built_sys_header_configure)
-
 libgstgl_@GST_API_VERSION@_la_CFLAGS = \
 	-I$(top_srcdir)/gst-libs \
 	-I$(top_builddir)/gst-libs \
@@ -143,6 +145,8 @@
 # DISTCLEANFILES is for files generated by configure
 DISTCLEANFILES = $(built_sys_header_configure)
 
+nodist_libgstgl_@GST_API_VERSION@include_HEADERS = $(built_sys_header_configure)
+
 if HAVE_INTROSPECTION
 BUILT_GIRSOURCES = GstGL-@GST_API_VERSION@.gir
 
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/directfb/Makefile.am
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/directfb/Makefile.am
@@ -0,0 +1,23 @@
+## Process this file with automake to produce Makefile.in
+
+noinst_LTLIBRARIES = libgstgl-directfb.la
+
+libgstgl_directfb_la_SOURCES = \
+	gstgldisplay_directfb.c \
+	gstglwindow_directfb.c
+
+noinst_HEADERS = \
+	gstgldisplay_directfb.h \
+	gstglwindow_directfb.h
+
+libgstgl_directfb_la_CFLAGS = \
+	-I$(top_srcdir)/gst-libs \
+	-I$(top_builddir)/gst-libs \
+	$(GL_CFLAGS) \
+	$(GST_PLUGINS_BASE_CFLAGS) \
+	$(GST_BASE_CFLAGS) \
+	$(GST_CFLAGS)
+
+libgstgl_directfb_la_LDFLAGS = \
+	$(GST_LIB_LDFLAGS) \
+	$(GST_ALL_LDFLAGS)
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/directfb/gstgldisplay_directfb.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/directfb/gstgldisplay_directfb.c
@@ -0,0 +1,107 @@
+/*
+ * GStreamer
+ * Copyright (C) 2015 The DirectFB Open Source Project
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstgldisplay_directfb.h"
+
+G_DEFINE_TYPE (GstGLDisplayDirectFB, gst_gl_display_directfb,
+    GST_TYPE_GL_DISPLAY);
+
+static void gst_gl_display_directfb_finalize (GObject * object);
+static guintptr gst_gl_display_directfb_get_handle (GstGLDisplay * display);
+
+static void
+gst_gl_display_directfb_class_init (GstGLDisplayDirectFBClass * klass)
+{
+  G_OBJECT_CLASS (klass)->finalize = gst_gl_display_directfb_finalize;
+
+  GST_GL_DISPLAY_CLASS (klass)->get_handle =
+      GST_DEBUG_FUNCPTR (gst_gl_display_directfb_get_handle);
+}
+
+static void
+gst_gl_display_directfb_init (GstGLDisplayDirectFB * display_directfb)
+{
+  GstGLDisplay *display = (GstGLDisplay *) display_directfb;
+
+  display->type = GST_GL_DISPLAY_TYPE_DIRECTFB;
+}
+
+static void
+gst_gl_display_directfb_finalize (GObject * object)
+{
+  GstGLDisplayDirectFB *display_directfb = GST_GL_DISPLAY_DIRECTFB (object);
+
+  if (display_directfb->layer) {
+    display_directfb->layer->Release (display_directfb->layer);
+    display_directfb->layer = NULL;
+  }
+
+  if (display_directfb->dfb) {
+    display_directfb->dfb->Release (display_directfb->dfb);
+    display_directfb->dfb = NULL;
+  }
+
+  G_OBJECT_CLASS (gst_gl_display_directfb_parent_class)->finalize (object);
+}
+
+static guintptr
+gst_gl_display_directfb_get_handle (GstGLDisplay * display)
+{
+  return (guintptr) GST_GL_DISPLAY_DIRECTFB (display)->dfb;
+}
+
+GstGLDisplayDirectFB *
+gst_gl_display_directfb_new (void)
+{
+  DFBResult ret;
+  GstGLDisplayDirectFB *display_directfb;
+
+  display_directfb = g_object_new (GST_TYPE_GL_DISPLAY_DIRECTFB, NULL);
+
+  ret = DirectFBInit (NULL, NULL);
+
+  if (ret) {
+    GST_ERROR ("Failed to initialize DirectFB");
+    return NULL;
+  }
+
+  ret = DirectFBCreate (&display_directfb->dfb);
+
+  if (ret) {
+    GST_ERROR ("Failed to create DirectFB main interface");
+    return NULL;
+  }
+
+  display_directfb->dfb->GetDisplayLayer (display_directfb->dfb, DLID_PRIMARY,
+                                          &display_directfb->layer);
+
+  if (ret) {
+    GST_ERROR ("Failed to get DirectFB display layer");
+    display_directfb->dfb->Release (display_directfb->dfb);
+    display_directfb->dfb = NULL;
+    return NULL;
+  }
+
+  return display_directfb;
+}
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/directfb/gstgldisplay_directfb.h
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/directfb/gstgldisplay_directfb.h
@@ -0,0 +1,56 @@
+/*
+ * GStreamer
+ * Copyright (C) 2015 The DirectFB Open Source Project
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef __GST_GL_DISPLAY_DIRECTFB_H__
+#define __GST_GL_DISPLAY_DIRECTFB_H__
+
+#include <directfb.h>
+
+#include <gst/gl/gstgldisplay.h>
+
+G_BEGIN_DECLS
+
+GType gst_gl_display_directfb_get_type (void);
+
+#define GST_TYPE_GL_DISPLAY_DIRECTFB  (gst_gl_display_directfb_get_type())
+#define GST_GL_DISPLAY_DIRECTFB(obj)  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_GL_DISPLAY_DIRECTFB,GstGLDisplayDirectFB))
+
+typedef struct _GstGLDisplayDirectFB GstGLDisplayDirectFB;
+typedef struct _GstGLDisplayDirectFBClass GstGLDisplayDirectFBClass;
+
+struct _GstGLDisplayDirectFB
+{
+  GstGLDisplay parent;
+
+  IDirectFB *dfb;
+
+  IDirectFBDisplayLayer *layer;
+};
+
+struct _GstGLDisplayDirectFBClass
+{
+  GstGLDisplayClass object_class;
+};
+
+GstGLDisplayDirectFB * gst_gl_display_directfb_new (void);
+
+G_END_DECLS
+
+#endif /* __GST_GL_DISPLAY_DIRECTFB_H__ */
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/directfb/gstglwindow_directfb.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/directfb/gstglwindow_directfb.c
@@ -0,0 +1,168 @@
+/*
+ * GStreamer
+ * Copyright (C) 2015 The DirectFB Open Source Project
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "gstgldisplay_directfb.h"
+#include "gstglwindow_directfb.h"
+
+G_DEFINE_TYPE (GstGLWindowDirectFB, gst_gl_window_directfb,
+    GST_GL_TYPE_WINDOW);
+
+static guintptr gst_gl_window_directfb_get_window_handle (GstGLWindow * window);
+static void gst_gl_window_directfb_draw (GstGLWindow * window);
+static void gst_gl_window_directfb_close (GstGLWindow * window);
+static void gst_gl_window_directfb_set_preferred_size (GstGLWindow * window,
+    gint width, gint height);
+static void gst_gl_window_directfb_show (GstGLWindow * window);
+
+static void
+gst_gl_window_directfb_class_init (GstGLWindowDirectFBClass * klass)
+{
+  GstGLWindowClass *window_class = (GstGLWindowClass *) klass;
+
+  window_class->get_window_handle =
+      GST_DEBUG_FUNCPTR (gst_gl_window_directfb_get_window_handle);
+  window_class->draw = GST_DEBUG_FUNCPTR (gst_gl_window_directfb_draw);
+  window_class->close = GST_DEBUG_FUNCPTR (gst_gl_window_directfb_close);
+  window_class->set_preferred_size =
+      GST_DEBUG_FUNCPTR (gst_gl_window_directfb_set_preferred_size);
+  window_class->show = GST_DEBUG_FUNCPTR (gst_gl_window_directfb_show);
+}
+
+static void
+gst_gl_window_directfb_init (GstGLWindowDirectFB * window)
+{
+}
+
+guintptr
+gst_gl_window_directfb_get_window_handle (GstGLWindow * window)
+{
+  return (guintptr) GST_GL_WINDOW_DIRECTFB (window)->surface;
+}
+
+static void
+draw_cb (gpointer data)
+{
+  GstGLWindowDirectFB *window_directfb = data;
+  GstGLWindow *window = GST_GL_WINDOW (window_directfb);
+  GstGLContext *context = gst_gl_window_get_context (window);
+  GstGLContextClass *context_class = GST_GL_CONTEXT_GET_CLASS (context);
+
+  if (window->draw)
+    window->draw (window->draw_data);
+
+  context_class->swap_buffers (context);
+
+  if (g_getenv ("DSCAPS_GL"))
+    window_directfb->surface->Flip (window_directfb->surface, NULL,
+                                    DSFLIP_WAITFORSYNC);
+
+  gst_object_unref (context);
+}
+
+static void
+gst_gl_window_directfb_draw (GstGLWindow * window)
+{
+  gst_gl_window_send_message (window, (GstGLWindowCB) draw_cb, window);
+}
+
+static void
+gst_gl_window_directfb_close (GstGLWindow * window)
+{
+  GstGLWindowDirectFB *window_directfb = GST_GL_WINDOW_DIRECTFB (window);
+
+  if (window_directfb->surface) {
+    window_directfb->surface->Release (window_directfb->surface);
+    window_directfb->surface = NULL;
+  }
+
+  if (window_directfb->window) {
+    window_directfb->window->Release (window_directfb->window);
+    window_directfb->window = NULL;
+  }
+
+  GST_GL_WINDOW_CLASS (gst_gl_window_directfb_parent_class)->close (window);
+}
+
+static void
+gst_gl_window_directfb_set_preferred_size (GstGLWindow * window,
+    gint width, gint height)
+{
+  GstGLWindowDirectFB *window_directfb = GST_GL_WINDOW_DIRECTFB (window);
+
+  gst_gl_window_resize (window, width, height);
+
+  window_directfb->window->Resize (window_directfb->window, width, height);
+}
+
+static void
+gst_gl_window_directfb_show (GstGLWindow * window)
+{
+  GstGLWindowDirectFB *window_directfb = GST_GL_WINDOW_DIRECTFB (window);
+
+  window_directfb->window->SetOpacity (window_directfb->window, 0xff);
+}
+
+GstGLWindowDirectFB *
+gst_gl_window_directfb_new (GstGLDisplay * display)
+{
+  if ((gst_gl_display_get_handle_type (display) & GST_GL_DISPLAY_TYPE_DIRECTFB)
+      == GST_GL_DISPLAY_TYPE_NONE)
+    return NULL;
+
+  return g_object_new (GST_GL_TYPE_WINDOW_DIRECTFB, NULL);
+}
+
+void
+gst_gl_window_directfb_create_window (GstGLWindowDirectFB * window_directfb)
+{
+  DFBResult ret;
+  DFBWindowDescription desc;
+  GstGLDisplayDirectFB *display_directfb =
+      GST_GL_DISPLAY_DIRECTFB (GST_GL_WINDOW (window_directfb)->display);
+
+  desc.flags = DWDESC_WIDTH | DWDESC_HEIGHT;
+  desc.width = 1;
+  desc.height = 1;
+
+  if (g_getenv ("DSCAPS_GL")) {
+    desc.flags |= DWDESC_SURFACE_CAPS;
+    desc.surface_caps |= DSCAPS_GL;
+  }
+
+  ret = display_directfb->layer->CreateWindow (display_directfb->layer, &desc,
+                                               &window_directfb->window);
+
+  if (ret) {
+    GST_ERROR ("Failed to create DirectFB window");
+  }
+
+  ret = window_directfb->window->GetSurface (window_directfb->window,
+                                             &window_directfb->surface);
+
+  if (ret) {
+    GST_ERROR ("Failed to get DirectFB surface");
+    window_directfb->window->Release (window_directfb->window);
+    window_directfb->window = NULL;
+  }
+}
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/directfb/gstglwindow_directfb.h
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/directfb/gstglwindow_directfb.h
@@ -0,0 +1,62 @@
+/*
+ * GStreamer
+ * Copyright (C) 2015 The DirectFB Open Source Project
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef __GST_GL_WINDOW_DIRECTFB_H__
+#define __GST_GL_WINDOW_DIRECTFB_H__
+
+#include <directfb.h>
+
+#include <gst/gl/gstglwindow.h>
+
+G_BEGIN_DECLS
+
+GType gst_gl_window_directfb_get_type (void);
+
+#define GST_GL_TYPE_WINDOW_DIRECTFB   (gst_gl_window_directfb_get_type())
+#define GST_GL_WINDOW_DIRECTFB(o)     (G_TYPE_CHECK_INSTANCE_CAST((o), GST_GL_TYPE_WINDOW_DIRECTFB, GstGLWindowDirectFB))
+#define GST_IS_GL_WINDOW_DIRECTFB(o)  (G_TYPE_CHECK_INSTANCE_TYPE((o), GST_GL_TYPE_WINDOW_DIRECTFB))
+
+typedef struct _GstGLWindowDirectFB GstGLWindowDirectFB;
+typedef struct _GstGLWindowDirectFBClass GstGLWindowDirectFBClass;
+
+struct _GstGLWindowDirectFB
+{
+  /*< private >*/
+  GstGLWindow parent;
+
+  IDirectFBWindow *window;
+
+  IDirectFBSurface *surface;
+};
+
+struct _GstGLWindowDirectFBClass {
+  /*< private >*/
+  GstGLWindowClass parent_class;
+
+  /*< private >*/
+  gpointer _reserved[GST_PADDING];
+};
+
+GstGLWindowDirectFB * gst_gl_window_directfb_new           (GstGLDisplay * display);
+void                  gst_gl_window_directfb_create_window (GstGLWindowDirectFB * window_directfb);
+
+G_END_DECLS
+
+#endif /* __GST_GL_WINDOW_DIRECTFB_H__ */
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/egl/gstglcontext_egl.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/egl/gstglcontext_egl.c
@@ -43,6 +43,9 @@
 #if GST_GL_HAVE_WINDOW_WIN32
 #include "../win32/gstglwindow_win32.h"
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+#include "../directfb/gstglwindow_directfb.h"
+#endif
 #if GST_GL_HAVE_WINDOW_DISPMANX
 #include "../dispmanx/gstglwindow_dispmanx_egl.h"
 #endif
@@ -542,6 +545,12 @@
       gst_gl_window_win32_create_window ((GstGLWindowWin32 *) context->window);
     }
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+    if (GST_IS_GL_WINDOW_DIRECTFB (context->window)) {
+      gst_gl_window_directfb_create_window ((GstGLWindowDirectFB *)
+          context->window);
+    }
+#endif
 #if GST_GL_HAVE_WINDOW_DISPMANX
     if (GST_IS_GL_WINDOW_DISPMANX_EGL (context->window)) {
       gst_gl_window_dispmanx_egl_create_window ((GstGLWindowDispmanxEGL *)
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/gstgldisplay.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/gstgldisplay.c
@@ -65,6 +65,9 @@
 #if GST_GL_HAVE_WINDOW_WAYLAND
 #include <gst/gl/wayland/gstgldisplay_wayland.h>
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+#include <gst/gl/directfb/gstgldisplay_directfb.h>
+#endif
 #if GST_GL_HAVE_PLATFORM_EGL
 #include <gst/gl/egl/gstgldisplay_egl.h>
 #include <gst/gl/egl/gsteglimagememory.h>
@@ -205,6 +208,10 @@
   if (!display && (!user_choice || g_strstr_len (user_choice, 7, "wayland")))
     display = GST_GL_DISPLAY (gst_gl_display_wayland_new (NULL));
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+  if (!display && (!user_choice || g_strstr_len (user_choice, 8, "directfb")))
+    display = GST_GL_DISPLAY (gst_gl_display_directfb_new ());
+#endif
 #if GST_GL_HAVE_PLATFORM_EGL
   if (!display && (!platform_choice
           || g_strstr_len (platform_choice, 3, "egl")))
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/gstgldisplay.h
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/gstgldisplay.h
@@ -49,6 +49,7 @@
  * @GST_GL_DISPLAY_TYPE_WIN32: Win32 display
  * @GST_GL_DISPLAY_TYPE_DISPMANX: Dispmanx display
  * @GST_GL_DISPLAY_TYPE_EGL: EGL display
+ * @GST_GL_DISPLAY_TYPE_DIRECTFB: DirectFB display
  * @GST_GL_DISPLAY_TYPE_ANY: any display type
  */
 typedef enum
@@ -60,6 +61,7 @@
   GST_GL_DISPLAY_TYPE_WIN32 = (1 << 3),
   GST_GL_DISPLAY_TYPE_DISPMANX = (1 << 4),
   GST_GL_DISPLAY_TYPE_EGL = (1 << 5),
+  GST_GL_DISPLAY_TYPE_DIRECTFB = (1 << 6),
 
   GST_GL_DISPLAY_TYPE_ANY = G_MAXUINT32
 } GstGLDisplayType;
--- gst-plugins-bad-1.8.3.orig/gst-libs/gst/gl/gstglwindow.c
+++ gst-plugins-bad-1.8.3/gst-libs/gst/gl/gstglwindow.c
@@ -58,6 +58,9 @@
 #if GST_GL_HAVE_WINDOW_EAGL
 #include "eagl/gstglwindow_eagl.h"
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+#include "directfb/gstglwindow_directfb.h"
+#endif
 #if GST_GL_HAVE_WINDOW_DISPMANX
 #include "dispmanx/gstglwindow_dispmanx_egl.h"
 #endif
@@ -290,6 +293,10 @@
   if (!window && (!user_choice || g_strstr_len (user_choice, 7, "wayland")))
     window = GST_GL_WINDOW (gst_gl_window_wayland_egl_new (display));
 #endif
+#if GST_GL_HAVE_WINDOW_DIRECTFB
+  if (!window && (!user_choice || g_strstr_len (user_choice, 8, "directfb")))
+    window = GST_GL_WINDOW (gst_gl_window_directfb_new (display));
+#endif
 #if GST_GL_HAVE_WINDOW_DISPMANX
   if (!window && (!user_choice || g_strstr_len (user_choice, 8, "dispmanx")))
     window = GST_GL_WINDOW (gst_gl_window_dispmanx_egl_new (display));
