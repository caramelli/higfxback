# This file is part of HiGFXback

# requires
REQUIRES="cairo-build gdk-pixbuf-build gnome-backgrounds-build make-build"

PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
rm -f kapow/kapow.o
rm -f png/star_and_ring
PKG_CONFIG_PATH=/dfb/lib/pkgconfig sh ./Configure --with-backgroundsdir=/share/backgrounds --with-demosdatadir=/dfb/share/cairo-demos --prefix=/dfb

# build
make
make -C kapow
make -C png
make -C PS

# install
install -d $DESTDIR/dfb/bin
install chart-demo $DESTDIR/dfb/bin
install dragon-demo $DESTDIR/dfb/bin
install fish-demo $DESTDIR/dfb/bin
install flowers-demo $DESTDIR/dfb/bin
install gears-demo $DESTDIR/dfb/bin
install gradient-demo $DESTDIR/dfb/bin
install maze-demo $DESTDIR/dfb/bin
install pythagoras-demo $DESTDIR/dfb/bin
install sierpinski-demo $DESTDIR/dfb/bin
install slideshow-demo $DESTDIR/dfb/bin
install spinner-demo $DESTDIR/dfb/bin
install spiral-complex $DESTDIR/dfb/bin
install spiral-demo $DESTDIR/dfb/bin
install tiger-demo $DESTDIR/dfb/bin
install waterfall-demo $DESTDIR/dfb/bin
install wave-demo $DESTDIR/dfb/bin
install kapow/kapow $DESTDIR/dfb/bin
install png/bevels $DESTDIR/dfb/bin
install png/caps_joins $DESTDIR/dfb/bin
install png/hering $DESTDIR/dfb/bin
install png/outline $DESTDIR/dfb/bin
install png/snapping $DESTDIR/dfb/bin
install png/spiral $DESTDIR/dfb/bin
install png/spline-pipelines $DESTDIR/dfb/bin
install png/splines_tolerance $DESTDIR/dfb/bin
install png/star_and_ring $DESTDIR/dfb/bin
install png/stars $DESTDIR/dfb/bin
install png/text $DESTDIR/dfb/bin
install png/text-rotate $DESTDIR/dfb/bin
install PS/basket $DESTDIR/dfb/bin
install -d $DESTDIR/dfb/share/cairo-demos
install -m 644 fishbg.png $DESTDIR/dfb/share/cairo-demos
install -m 644 fishstrip.png $DESTDIR/dfb/share/cairo-demos
install -d $DESTDIR/dfb/share/cairo-demos/images/4000x4000
install -m 644 images/4000x4000/202672-4000x4000.jpg $DESTDIR/dfb/share/cairo-demos/images/4000x4000

# build.pc
install -d $DESTDIR/dfb/share/pkgconfig
cat > $DESTDIR/dfb/share/pkgconfig/cairo-demos-build.pc << EOF
Name: cairo-demos
Version: 20120812
Description: A collection of Cairo demos and test programs
Requires: $REQUIRES

exec=\\
/dfb/bin/basket \\
/dfb/bin/bevels \\
/dfb/bin/caps_joins \\
/dfb/bin/chart-demo \\
/dfb/bin/dragon-demo \\
/dfb/bin/fish-demo \\
/dfb/bin/flowers-demo \\
/dfb/bin/gears-demo \\
/dfb/bin/gradient-demo \\
/dfb/bin/hering \\
/dfb/bin/kapow \\
/dfb/bin/maze-demo \\
/dfb/bin/outline \\
/dfb/bin/pythagoras-demo \\
/dfb/bin/sierpinski-demo \\
/dfb/bin/slideshow-demo \\
/dfb/bin/snapping \\
/dfb/bin/spinner-demo \\
/dfb/bin/spiral \\
/dfb/bin/spiral-complex \\
/dfb/bin/spiral-demo \\
/dfb/bin/spline-pipelines \\
/dfb/bin/splines_tolerance \\
/dfb/bin/star_and_ring \\
/dfb/bin/stars \\
/dfb/bin/text \\
/dfb/bin/text-rotate \\
/dfb/bin/tiger-demo \\
/dfb/bin/waterfall-demo \\
/dfb/bin/wave-demo \\
/dfb/share/cairo-demos/fishbg.png \\
/dfb/share/cairo-demos/fishstrip.png \\
/dfb/share/cairo-demos/images/4000x4000/202672-4000x4000.jpg
EOF

exit

# patch
--- cairo-demos-20120812.orig/Configure
+++ cairo-demos-20120812/Configure
@@ -0,0 +1,39 @@
+#!/bin/sh
+
+PREFIX=/usr/local
+
+DEMOSDATADIR=.
+
+BACKGROUNDSDIR=images
+
+while [ $# != 0 ]; do
+  case $1 in
+    --prefix=*) PREFIX=${1#*=};;
+    --with-demosdatadir=*) DEMOSDATADIR=${1#*=};;
+    --with-backgroundsdir=*) BACKGROUNDSDIR=${1#*=};;
+    *) echo "Unknown option: '$1'"; exit 1;;
+  esac
+  shift
+done
+
+sed -i "/^PREFIX/s|=.*|=$PREFIX|" Makefile
+sed -i "/^PREFIX/s|=.*|=$PREFIX|" kapow/Makefile
+sed -i "/^PREFIX/s|=.*|=$PREFIX|" png/Makefile
+sed -i "/^PREFIX/s|=.*|=$PREFIX|" PS/Makefile
+
+sed -i "/^DEMOSDATADIR=/s|=.*|=$DEMOSDATADIR|" Makefile
+
+sed -i "/^BACKGROUNDSDIR=/s|=.*|=$BACKGROUNDSDIR|" Makefile
+
+test $PKG_CONFIG || PKG_CONFIG=pkg-config
+if test $PKG_CONFIG_PATH; then
+  sed -i "/^PKG_CONFIG/s|=.*|=PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" kapow/Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" png/Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" PS/Makefile
+else
+  sed -i "/^PKG_CONFIG/s|=.*|=$PKG_CONFIG|" Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=$PKG_CONFIG|" kapow/Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=$PKG_CONFIG|" png/Makefile
+  sed -i "/^PKG_CONFIG/s|=.*|=$PKG_CONFIG|" PS/Makefile
+fi
--- cairo-demos-20120812.orig/Makefile
+++ cairo-demos-20120812/Makefile
@@ -1,3 +1,11 @@
+PREFIX=/usr/local
+
+PKG_CONFIG=pkg-config
+
+DEMOSDATADIR=.
+BACKGROUNDSDIR=images
+
+DEFINES:=-DDEMOSDATADIR=\"$(DEMOSDATADIR)\" -DBACKGROUNDSDIR=\"$(BACKGROUNDSDIR)\"
 SOURCES:=demo.c
 REQUIRES:=cairo
 
@@ -10,16 +18,25 @@
 DEFINES+=-DHAVE_DRM=0
 endif
 
-XLIB:=$(shell pkg-config --exists cairo-xlib && echo 1 || echo 0)
+DIRECTFB:=$(shell $(PKG_CONFIG) --exists cairo-directfb && echo 1 || echo 0)
+ifneq ($(DIRECTFB),0)
+DEFINES+=-DHAVE_DIRECTFB=1
+SOURCES+=directfb.c
+REQUIRES+=cairo-directfb
+else
+DEFINES+=-DHAVE_DIRECTFB=0
+endif
+
+XLIB:=$(shell $(PKG_CONFIG) --exists cairo-xlib && echo 1 || echo 0)
 ifneq ($(XLIB),0)
 DEFINES+=-DHAVE_XLIB=1 -DHAVE_XIMAGE=1
 SOURCES+=xlib.c ximage.c
 REQUIRES+=cairo-xlib xext
 else
-DEFINES+=-DHAVE_XLIB=0
+DEFINES+=-DHAVE_XLIB=0 -DHAVE_XIMAGE=0
 endif
 
-XCB:=$(shell pkg-config --exists cairo-xcb && echo 1 || echo 0)
+XCB:=$(shell $(PKG_CONFIG) --exists cairo-xcb && echo 1 || echo 0)
 ifneq ($(XCB),0)
 DEFINES+=-DHAVE_XCB=1
 SOURCES+=xcb.c
@@ -28,7 +45,7 @@
 DEFINES+=-DHAVE_XCB=0
 endif
 
-GLX:=$(shell pkg-config --exists cairo-gl && echo 1 || echo 0)
+GLX:=$(shell $(PKG_CONFIG) --exists cairo-gl && echo 1 || echo 0)
 ifneq ($(GLX),0)
 DEFINES+=-DHAVE_GLX=1
 SOURCES+=glx.c
@@ -37,7 +54,7 @@
 DEFINES+=-DHAVE_GLX=0
 endif
 
-COGL:=$(shell pkg-config --exists cairo-cogl && echo 1 || echo 0)
+COGL:=$(shell $(PKG_CONFIG) --exists cairo-cogl && echo 1 || echo 0)
 ifneq ($(COGL),0)
 DEFINES+=-DHAVE_COGL=1
 SOURCES+=cogl.c
@@ -46,7 +63,7 @@
 DEFINES+=-DHAVE_COGL=0
 endif
 
-SKIA:=$(shell pkg-config --exists cairo-skia && echo 1 || echo 0)
+SKIA:=$(shell $(PKG_CONFIG) --exists cairo-skia && echo 1 || echo 0)
 ifneq ($(SKIA),0)
 DEFINES+=-DHAVE_SKIA=1
 SOURCES+=skia.c
@@ -57,22 +74,24 @@
 
 all: spiral-demo tiger-demo fish-demo flowers-demo gears-demo gradient-demo chart-demo waterfall-demo dragon-demo pythagoras-demo wave-demo sierpinski-demo maze-demo
 
-ifeq ($(shell pkg-config --exists poppler-glib && echo 1), 1)
+ifeq ($(shell $(PKG_CONFIG) --exists poppler-glib && echo 1), 1)
 all: poppler-demo
 REQUIRES+=poppler-glib
 endif
 
-ifeq ($(shell pkg-config --exists gdk-pixbuf-2.0 && echo 1), 1)
-all: spinner-demo slideshow-demo
+ifeq ($(shell $(PKG_CONFIG) --exists gdk-pixbuf-2.0 && echo 1), 1)
+all: spinner-demo spiral-complex slideshow-demo
 REQUIRES+=gdk-pixbuf-2.0
 DEFINES+=-DHAVE_GDK_PIXBUF
 endif
 
-CFLAGS:=$(shell pkg-config --cflags $(REQUIRES)) -Wall -g3
-LIBS:=$(shell pkg-config --libs $(REQUIRES)) -lm
+CFLAGS:=$(shell $(PKG_CONFIG) --cflags $(REQUIRES)) -Wall -g3
+LIBS:=$(shell $(PKG_CONFIG) --libs $(REQUIRES)) -lm -Wl,-rpath,$(PREFIX)/lib
 
 spinner-demo: spinner-demo.c $(SOURCES) demo.h Makefile
 	$(CC) $(DEFINES) $(CFLAGS) -o $@ spinner-demo.c $(SOURCES) $(LIBS)
+spiral-complex: spiral-complex.c $(SOURCES) demo.h Makefile
+	$(CC) $(DEFINES) $(CFLAGS) -o $@ spiral-complex.c $(SOURCES) $(LIBS)
 spiral-demo: spiral-demo.c $(SOURCES) demo.h Makefile
 	$(CC) $(DEFINES) $(CFLAGS) -o $@ spiral-demo.c $(SOURCES) $(LIBS)
 slideshow-demo: slideshow-demo.c $(SOURCES) demo.h Makefile
--- cairo-demos-20120812.orig/PS/Makefile
+++ cairo-demos-20120812/PS/Makefile
@@ -1,3 +1,7 @@
+PREFIX=/usr/local
+
+PKG_CONFIG=pkg-config
+
 EXAMPLES=basket
 
 # I'd like to put a bunch of compiler-specific warning flags here, but
@@ -9,16 +13,13 @@
 #
 # CFLAGS="-Wall -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing" make
 
-MYCFLAGS=`pkg-config --cflags cairo libpng12`
-MYLDFLAGS=`pkg-config --libs cairo libpng12`
+MYCFLAGS=`$(PKG_CONFIG) --cflags cairo libpng`
+MYLDFLAGS=`$(PKG_CONFIG) --libs cairo libpng` -Wl,-rpath,$(PREFIX)/lib
 
 all: ${EXAMPLES}
 
-%.o: %.c
-	$(CC) -c $(CFLAGS) $(CPPFLAGS) ${MYCFLAGS} $< -o $@
-
 %: %.c
 	$(CC) $(CFLAGS) $(CPPFLAGS) ${MYCFLAGS} ${MYLDFLAGS} $^ -o $@
 
 clean:
-	rm -f ${EXAMPLES} *.o
+	rm -f ${EXAMPLES} *.o *.ps
--- cairo-demos-20120812.orig/chart-demo.c
+++ cairo-demos-20120812/chart-demo.c
@@ -295,7 +295,7 @@
 		for (n = 0; n < 5; n++)
 			chart_update(&c[n]);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/demo.c
+++ cairo-demos-20120812/demo.c
@@ -143,6 +143,7 @@
     struct device *device = 0;
     enum {
 	AUTO,
+	DIRECTFB,
 	XLIB,
 	XIMAGE,
 	SKIA,
@@ -154,7 +155,9 @@
     int n;
 
     for (n = 1; n < argc; n++) {
-	if (strcmp (argv[n], "--xlib") == 0) {
+	if (strcmp (argv[n], "--directfb") == 0) {
+	    backend = DIRECTFB;
+	} else if (strcmp (argv[n], "--xlib") == 0) {
 	    backend = XLIB;
 	} else if (strcmp (argv[n], "--xcb") == 0) {
 	    backend = XCB;
@@ -174,6 +177,8 @@
     if (backend == AUTO) {
 	if (device == 0 && HAVE_DRM)
 	    device = drm_open (argc, argv);
+	if (device == 0 && HAVE_DIRECTFB)
+	    device = directfb_open (argc, argv);
 	if (device == 0 && HAVE_XLIB)
 	    device = xlib_open (argc, argv);
 	if (device == 0 && HAVE_XCB)
@@ -188,6 +193,9 @@
 	    device = skia_open (argc, argv);
     } else switch (backend) {
     case AUTO:
+    case DIRECTFB:
+	device = directfb_open (argc, argv);
+	break;
     case XLIB:
 	device = xlib_open (argc, argv);
 	break;
@@ -218,7 +226,10 @@
 	exit(1);
     }
 
-    printf("Using backend \"%s\"\n", device->name);
+    if (!getenv("CAIRO_DEMOS_QUIET")) {
+	printf("Using backend \"%s\"\n", device->name);
+    }
+
     return device;
 }
 
@@ -298,6 +309,8 @@
 		cairo_pixels += cairo_stride;
 	}
 
+	cairo_surface_mark_dirty(surface);
+
 	return surface;
 }
 #endif
@@ -340,11 +353,11 @@
 			      name, frame_count, frame_count == 1 ? "" : "s");
     } else {
 	    if (version)
-		    snprintf (buf, sizeof (buf), "%s (%s): %.1f fps, %d frames",
-			      name, version, 1. / avg, frame_count);
+		    snprintf (buf, sizeof (buf), "%s (%s): %.1f fps",
+			      name, version, 1. / avg);
 	    else
-		    snprintf (buf, sizeof (buf), "%s: %.1f fps, %d frames",
-			      name, 1. / avg, frame_count);
+		    snprintf (buf, sizeof (buf), "%s: %.1f fps",
+			      name, 1. / avg);
     }
     cairo_set_font_size (cr, 18);
     cairo_text_extents (cr, buf, &extents);
--- cairo-demos-20120812.orig/demo.h
+++ cairo-demos-20120812/demo.h
@@ -89,6 +89,12 @@
 static inline struct device *ximage_open (int argc, char **argv) { return 0; }
 #endif
 
+#if HAVE_DIRECTFB
+struct device *directfb_open (int argc, char **argv);
+#else
+static inline struct device *directfb_open (int argc, char **argv) { return 0; }
+#endif
+
 #if HAVE_DRM
 struct device *drm_open (int argc, char **argv);
 #else
--- cairo-demos-20120812.orig/directfb.c
+++ cairo-demos-20120812/directfb.c
@@ -0,0 +1,69 @@
+#include <cairo-directfb.h>
+
+#include "demo.h"
+
+struct directfb_device {
+    struct device base;
+    struct framebuffer fb;
+
+    IDirectFBSurface *surface;
+};
+
+static void
+destroy (struct framebuffer *fb)
+{
+}
+
+static void
+show (struct framebuffer *fb)
+{
+    struct directfb_device *device = (struct directfb_device *) fb->device;
+    device->surface->Flip (device->surface, NULL, DSFLIP_NONE);
+}
+
+static struct framebuffer *
+get_fb (struct device *abstract_device)
+{
+    struct directfb_device *device = (struct directfb_device *) abstract_device;
+    return &device->fb;
+}
+
+struct device *
+directfb_open (int argc, char **argv)
+{
+    struct directfb_device *device;
+    IDirectFB *dfb;
+    IDirectFBDisplayLayer *layer;
+    DFBDisplayLayerConfig layer_config;
+    IDirectFBWindow *window;
+    DFBWindowDescription desc;
+
+    device = (struct directfb_device *) malloc (sizeof (struct directfb_device));
+    device->base.name = "directfb";
+    device->base.get_framebuffer = get_fb;
+
+    DirectFBInit (NULL, NULL);
+    DirectFBCreate (&dfb);
+    dfb->GetDisplayLayer (dfb, DLID_PRIMARY, &layer);
+    layer->GetConfiguration (layer, &layer_config);
+
+    device->base.width = layer_config.width;
+    device->base.height = layer_config.height;
+    device_get_size (argc, argv, &device->base.width, &device->base.height);
+
+    desc.flags = DWDESC_WIDTH | DWDESC_HEIGHT | DWDESC_SURFACE_CAPS;
+    desc.width = device->base.width;
+    desc.height = device->base.height;
+    desc.surface_caps = DSCAPS_DOUBLE;
+    layer->CreateWindow (layer, &desc, &window);
+    window->SetOpacity (window, 0xff);
+    window->GetSurface (window, &device->surface);
+    device->base.scanout = cairo_directfb_surface_create (dfb, device->surface);
+
+    device->fb.device = &device->base;
+    device->fb.surface = device->base.scanout;
+    device->fb.show = show;
+    device->fb.destroy = destroy;
+
+    return &device->base;
+}
--- cairo-demos-20120812.orig/dragon-demo.c
+++ cairo-demos-20120812/dragon-demo.c
@@ -27,6 +27,7 @@
  */
 
 #include "demo.h"
+#include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <signal.h>
@@ -181,13 +182,11 @@
 	int stroke = 1;
 	int benchmark;
 	const char *version;
-	enum clip clip;
 
 	int n;
 
 	device = device_open(argc, argv);
 	version = device_show_version(argc, argv);
-	clip = device_get_clip(argc, argv);
 	benchmark = device_get_benchmark(argc, argv);
 	if (benchmark == 0)
 		benchmark = 20;
@@ -223,7 +222,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/fish-demo.c
+++ cairo-demos-20120812/fish-demo.c
@@ -30,7 +30,7 @@
 	double sf;
 	cairo_t *cr;
 
-	image = cairo_image_surface_create_from_png("fishbg.png");
+	image = cairo_image_surface_create_from_png(DEMOSDATADIR"/fishbg.png");
 
 	height = cairo_image_surface_get_height(image);
 	width = cairo_image_surface_get_width(image);
@@ -65,7 +65,7 @@
 	int width, height, x, y;
 	cairo_t *cr;
 
-	image = cairo_image_surface_create_from_png("fishstrip.png");
+	image = cairo_image_surface_create_from_png(DEMOSDATADIR"/fishstrip.png");
 	width = cairo_image_surface_get_width(image);
 	height = cairo_image_surface_get_height(image);
 	surface = cairo_surface_create_similar(device->scanout,
@@ -265,7 +265,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/flowers-demo.c
+++ cairo-demos-20120812/flowers-demo.c
@@ -422,7 +422,7 @@
 
 		flowers_update(device->width, device->height);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/gradient-demo.c
+++ cairo-demos-20120812/gradient-demo.c
@@ -219,7 +219,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/kapow/.gitignore
+++ cairo-demos-20120812/kapow/.gitignore
@@ -1 +1,2 @@
 kapow
+kapow.o
--- cairo-demos-20120812.orig/kapow/Makefile
+++ cairo-demos-20120812/kapow/Makefile
@@ -1,5 +1,9 @@
-MYCFLAGS= $(shell pkg-config --cflags cairo libpng) -Wall -g -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing
-LDLIBS	= $(shell pkg-config --libs cairo libpng) -g
+PREFIX=/usr/local
+
+PKG_CONFIG=pkg-config
+
+MYCFLAGS= $(shell $(PKG_CONFIG) --cflags cairo libpng) -Wall -g -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing
+LDLIBS	= $(shell $(PKG_CONFIG) --libs cairo libpng) -lm -Wl,-rpath,$(PREFIX)/lib
 
 all: kapow
 
@@ -9,4 +13,4 @@
 kapow : kapow.o
 
 clean :
-	rm kapow.o kapow
+	rm -f kapow.o kapow kapow.png
--- cairo-demos-20120812.orig/maze-demo.c
+++ cairo-demos-20120812/maze-demo.c
@@ -259,7 +259,6 @@
 	int show_fps = 1;
 	int benchmark;
 	const char *version = device_show_version(argc, argv);
-	//enum clip clip = device_get_clip(argc, argv);
 
 	int n;
 
--- cairo-demos-20120812.orig/png/.gitignore
+++ cairo-demos-20120812/png/.gitignore
@@ -4,7 +4,9 @@
 outline
 snapping
 spiral
+spline-pipelines
 splines_tolerance
+star_and_ring
 stars
 text
 text-rotate
--- cairo-demos-20120812.orig/png/Makefile
+++ cairo-demos-20120812/png/Makefile
@@ -1,4 +1,8 @@
-EXAMPLES=bevels caps_joins hering outline spiral splines_tolerance snapping stars star_and_ring text text-rotate
+PREFIX=/usr/local
+
+PKG_CONFIG=pkg-config
+
+EXAMPLES=bevels caps_joins hering outline spiral spline-pipelines splines_tolerance snapping stars star_and_ring text text-rotate
 
 # I'd like to put a bunch of compiler-specific warning flags here, but
 # I don't know a good way to choose the right flags based on the
@@ -9,14 +13,11 @@
 #
 # CFLAGS="-Wall -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -fno-strict-aliasing" make
 
-MYCFLAGS=`pkg-config --cflags cairo libpng12`
-MYLDFLAGS=`pkg-config --libs cairo libpng12`
+MYCFLAGS=`$(PKG_CONFIG) --cflags cairo libpng`
+MYLDFLAGS=`$(PKG_CONFIG) --libs cairo libpng` -Wl,-rpath,$(PREFIX)/lib
 
 all: $(EXAMPLES)
 
-%.o: %.c
-	$(CC) -c $(CFLAGS) $(CPPFLAGS) ${MYCFLAGS} $< -o $@
-
 %: %.c
 	$(CC) $(CFLAGS) $(CPPFLAGS) ${MYCFLAGS} ${MYLDFLAGS} $^ -o $@
 
--- cairo-demos-20120812.orig/png/snapping.c
+++ cairo-demos-20120812/png/snapping.c
@@ -43,6 +43,13 @@
 #include <cairo.h>
 #include <math.h>
 
+static inline int
+fast_floor (double x)
+{
+    int i = (int) x;
+    return i - (i > x);
+}
+
 #define WIDTH 175
 #define HEIGHT 175
 #define STRIDE (WIDTH * 4)
@@ -62,8 +69,8 @@
 {
     /* Convert to device space, round, then convert back to user space. */
     cairo_user_to_device (cr, x, y);
-    *x = floor (*x + 0.5);
-    *y = floor (*y + 0.5);
+    *x = fast_floor (*x + 0.5);
+    *y = fast_floor (*y + 0.5);
     cairo_device_to_user (cr, x, y);
 }
 
@@ -98,8 +105,8 @@
     y_offset = y_width_dev_2 - (int) (y_width_dev_2);
 
     cairo_user_to_device (cr, x, y);
-    *x = floor (*x + x_offset + 0.5);
-    *y = floor (*y + y_offset + 0.5);
+    *x = fast_floor (*x + x_offset + 0.5);
+    *y = fast_floor (*y + y_offset + 0.5);
     *x -= x_offset;
     *y -= y_offset;
     cairo_device_to_user (cr, x, y);
@@ -125,7 +132,7 @@
     /* If the line width is less than 1 then it will round to 0 and
      * disappear. Instead, we clamp it to 1.0, but we must preserve
      * its sign for the case of a reflecting transformation. */
-    x_width_snapped = floor (x_width + 0.5);
+    x_width_snapped = fast_floor (x_width + 0.5);
     if (fabs(x_width_snapped) < 1.0) {
 	if (x_width > 0)
 	    x_width_snapped = 1.0;
@@ -133,7 +140,7 @@
 	    x_width_snapped = -1.0;
     }
 
-    y_width_snapped = floor (y_width + 0.5);
+    y_width_snapped = fast_floor (y_width + 0.5);
     if (fabs(y_width_snapped) < 1.0) {
 	if (y_width > 0)
 	    y_width_snapped = 1.0;
--- cairo-demos-20120812.orig/pythagoras-demo.c
+++ cairo-demos-20120812/pythagoras-demo.c
@@ -27,6 +27,7 @@
 
 #define _USE_MATH_DEFINES /* for M_SQRT2 on win32 */
 #include <math.h>
+#include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <signal.h>
@@ -102,14 +103,12 @@
 	int show_fps = 1;
 	int benchmark;
 	const char *version;
-	enum clip clip;
 	double size = 2;
 
 	int n;
 
 	device = device_open(argc, argv);
 	version = device_show_version(argc, argv);
-	clip = device_get_clip(argc, argv);
 	benchmark = device_get_benchmark(argc, argv);
 	if (benchmark == 0)
 		benchmark = 20;
@@ -144,7 +143,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/sierpinski-demo.c
+++ cairo-demos-20120812/sierpinski-demo.c
@@ -1,4 +1,5 @@
 #include "demo.h"
+#include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <signal.h>
@@ -71,14 +72,12 @@
 	int show_fps = 1;
 	int benchmark;
 	const char *version;
-	enum clip clip;
 	double theta = 0;
 
 	int n;
 
 	device = device_open(argc, argv);
 	version = device_show_version(argc, argv);
-	clip = device_get_clip(argc, argv);
 	benchmark = device_get_benchmark(argc, argv);
 	if (benchmark == 0)
 		benchmark = 20;
@@ -122,7 +121,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/slideshow-demo.c
+++ cairo-demos-20120812/slideshow-demo.c
@@ -142,7 +142,7 @@
 	}
 	closedir(dir);
 
-	if (count)
+	if (count && !getenv("CAIRO_DEMOS_QUIET"))
 		printf("Loaded %d images from %s\n", count, path);
 }
 
@@ -198,11 +198,13 @@
 		}
 	}
 	if (num_sources == 0)
-		load_sources("/usr/share/backgrounds", device,
+		load_sources(BACKGROUNDSDIR, device,
 			     device->get_framebuffer(device)->surface);
 
-	printf("Loaded %d images, %ld/%ld pixels in total\n",
-	       num_sources, (long)out_pixels, (long)in_pixels);
+	if (!getenv("CAIRO_DEMOS_QUIET"))
+		printf("Loaded %d images, %ld/%ld pixels in total\n",
+		       num_sources, (long)out_pixels, (long)in_pixels);
+
 	if (num_sources == 0)
 		return 0;
 
@@ -265,7 +267,7 @@
 		frames++;
 		delta = now.tv_sec - last_tty.tv_sec;
 		delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
-		if (delta >  5) {
+		if (delta >  5 && !getenv("CAIRO_DEMOS_QUIET")) {
 			printf("%.2f fps\n", frames/delta);
 			last_tty = now;
 			frames = 0;
--- cairo-demos-20120812.orig/spinner-demo.c
+++ cairo-demos-20120812/spinner-demo.c
@@ -119,7 +119,7 @@
 {
 	struct device *device;
 	struct timeval start, last_tty, last_fps, now;
-	const char *filename = "images/4000x4000/202672-4000x4000.jpg";
+	const char *filename = DEMOSDATADIR"/images/4000x4000/202672-4000x4000.jpg";
 	int frames, n;
 	int frame = 0;
 	double factor = 1.0125;
@@ -200,7 +200,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			frames++;
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
--- cairo-demos-20120812.orig/spiral-complex.c
+++ cairo-demos-20120812/spiral-complex.c
@@ -124,7 +124,7 @@
 	}
 	closedir(dir);
 
-	if (count)
+	if (count && !getenv("CAIRO_DEMOS_QUIET"))
 		printf("Loaded %d images from %s\n", count, path);
 }
 
@@ -144,7 +144,7 @@
 int main(int argc, char **argv)
 {
 	struct device *device;
-	const char *path = "/usr/share/backgrounds";
+	const char *path = BACKGROUNDSDIR;
 	float sincos_lut[360];
 	struct timeval start, last_tty, last_fps, now;
 	int theta, frames, n;
@@ -160,6 +160,8 @@
 		if (strcmp (argv[n], "--images") == 0) {
 			path = argv[n+1];
 			n++;
+	    } else if (strcmp (argv[n], "--prescale") == 0) {
+		prescale = 1;
 	    } else if (strcmp (argv[n], "--hide-path") == 0) {
 		show_path = 0;
 	    } else if (strcmp (argv[n], "--hide-outline") == 0) {
@@ -181,8 +183,9 @@
 	}
 
 	load_sources(path, device->get_framebuffer(device)->surface);
-	printf("Loaded %d images, %ld/%ld pixels in total from %s\n",
-	       num_sources, (long)out_pixels, (long)in_pixels, path);
+	if (!getenv("CAIRO_DEMOS_QUIET"))
+		printf("Loaded %d images, %ld/%ld pixels in total from %s\n",
+		       num_sources, (long)out_pixels, (long)in_pixels, path);
 
 	gettimeofday(&start, 0); now = last_tty = last_fps = start;
 	frames = 0;
@@ -299,7 +302,7 @@
 		frames++;
 		delta = now.tv_sec - last_tty.tv_sec;
 		delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
-		if (delta >  5) {
+		if (delta >  5 && !getenv("CAIRO_DEMOS_QUIET")) {
 			printf("%.2f fps\n", frames/delta);
 			last_tty = now;
 			frames = 0;
--- cairo-demos-20120812.orig/spiral-demo.c
+++ cairo-demos-20120812/spiral-demo.c
@@ -148,7 +148,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/tiger-demo.c
+++ cairo-demos-20120812/tiger-demo.c
@@ -15,6 +15,7 @@
  */
 
 #include <cairo.h>
+#include <stdlib.h>
 #include <sys/time.h>
 #include <stdio.h>
 #include <signal.h>
@@ -129,10 +130,10 @@
 		fb->destroy (fb);
 
 		++frame;
-		if (frame % 256 == 0)
+		if (frame % 192 == 0)
 			factor = 1./factor;
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/waterfall-demo.c
+++ cairo-demos-20120812/waterfall-demo.c
@@ -170,7 +170,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;
--- cairo-demos-20120812.orig/wave-demo.c
+++ cairo-demos-20120812/wave-demo.c
@@ -123,13 +123,11 @@
 	int show_fps = 1;
 	int benchmark;
 	const char *version;
-	enum clip clip;
 
 	int n;
 
 	device = device_open(argc, argv);
 	version = device_show_version(argc, argv);
-	clip = device_get_clip(argc, argv);
 	benchmark = device_get_benchmark(argc, argv);
 	if (benchmark == 0)
 		benchmark = 20;
@@ -162,7 +160,7 @@
 		fb->show (fb);
 		fb->destroy (fb);
 
-		if (benchmark < 0 && 0) {
+		if (benchmark < 0 && !getenv("CAIRO_DEMOS_QUIET")) {
 			delta = now.tv_sec - last_tty.tv_sec;
 			delta += (now.tv_usec - last_tty.tv_usec)*1e-6;
 			frames++;

# source
https://github.com/caramelli/cairo-demos/archive/d4615ba601887ada73682682b0c8090636142bd9/cairo-demos-20120812.tar.gz
