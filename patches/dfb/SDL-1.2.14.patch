# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build directfb2-build"

PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

pkg-config --exists alsa-lib-build && REQUIRES="$REQUIRES alsa-lib-build"

if PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

# configure (ac-2.63; lt-2.2.6)
libtoolize -c -f -i; cat acinclude/* > aclocal.m4; autoconf
cd test; cp acinclude.m4 aclocal.m4; autoconf; cd -
PKG_CONFIG_PATH=/dfb/lib/pkgconfig LDFLAGS=-Wl,-rpath,/dfb/lib ./configure --disable-assembly --disable-rpath --disable-static --disable-video-fbcon --prefix=/dfb
cd test; PKG_CONFIG_PATH=/dfb/lib/pkgconfig SDL_CFLAGS="-I../include" SDL_LIBS="-L../build/.libs -lSDL -Wl,-rpath,/dfb/lib" ./configure --with-testdatadir=/dfb/share/SDL/test; cd -

# build
make
make -C test

# install
install -d $DESTDIR/dfb/include/SDL
install -m 644 include/begin_code.h $DESTDIR/dfb/include/SDL
install -m 644 include/close_code.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_active.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_audio.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_cdrom.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_config.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_cpuinfo.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_endian.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_error.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_events.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_joystick.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_keyboard.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_keysym.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_loadso.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_main.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_mouse.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_mutex.h $DESTDIR/dfb/include/SDL
test $GL && install -m 644 include/SDL_opengl.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_platform.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_quit.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_rwops.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_stdinc.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_thread.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_timer.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_version.h $DESTDIR/dfb/include/SDL
install -m 644 include/SDL_video.h $DESTDIR/dfb/include/SDL
install -d $DESTDIR/dfb/lib
install build/.libs/libSDL-1.2.so.0.* $DESTDIR/dfb/lib/libSDL-1.2.so.0
ln -sf libSDL-1.2.so.0 $DESTDIR/dfb/lib/libSDL.so
install -d $DESTDIR/dfb/lib/pkgconfig
install -m 644 sdl.pc $DESTDIR/dfb/lib/pkgconfig
install -d $DESTDIR/dfb/share/aclocal
install -m 644 sdl.m4 $DESTDIR/dfb/share/aclocal
install -d $DESTDIR/dfb/share/SDL/test
install test/checkkeys $DESTDIR/dfb/share/SDL/test
install test/graywin $DESTDIR/dfb/share/SDL/test
install test/loopwave $DESTDIR/dfb/share/SDL/test
install -m 644 test/icon.bmp $DESTDIR/dfb/share/SDL/test
install -m 644 test/moose.dat $DESTDIR/dfb/share/SDL/test
install -m 644 test/sail.bmp $DESTDIR/dfb/share/SDL/test
install -m 644 test/sample.bmp $DESTDIR/dfb/share/SDL/test
install -m 644 test/sample.wav $DESTDIR/dfb/share/SDL/test
install test/testalpha $DESTDIR/dfb/share/SDL/test
install test/testbitmap $DESTDIR/dfb/share/SDL/test
install test/testblitspeed $DESTDIR/dfb/share/SDL/test
install test/testcdrom $DESTDIR/dfb/share/SDL/test
install test/testcursor $DESTDIR/dfb/share/SDL/test
install test/testerror $DESTDIR/dfb/share/SDL/test
install test/testfile $DESTDIR/dfb/share/SDL/test
test $GL && install test/testgl $DESTDIR/dfb/share/SDL/test
install test/testiconv $DESTDIR/dfb/share/SDL/test
install test/testjoystick $DESTDIR/dfb/share/SDL/test
install test/testkeys $DESTDIR/dfb/share/SDL/test
install test/testloadso $DESTDIR/dfb/share/SDL/test
install test/testlock $DESTDIR/dfb/share/SDL/test
install test/testoverlay $DESTDIR/dfb/share/SDL/test
install test/testoverlay2 $DESTDIR/dfb/share/SDL/test
install test/testpalette $DESTDIR/dfb/share/SDL/test
install test/testplatform $DESTDIR/dfb/share/SDL/test
install test/testsem $DESTDIR/dfb/share/SDL/test
install test/testsprite $DESTDIR/dfb/share/SDL/test
install test/testhread $DESTDIR/dfb/share/SDL/test/testthread
install test/testtimer $DESTDIR/dfb/share/SDL/test
install test/testver $DESTDIR/dfb/share/SDL/test
install test/testvidinfo $DESTDIR/dfb/share/SDL/test
install test/testwin $DESTDIR/dfb/share/SDL/test
install test/testwm $DESTDIR/dfb/share/SDL/test
install test/threadwin $DESTDIR/dfb/share/SDL/test
install test/torturethread $DESTDIR/dfb/share/SDL/test
install -m 644 test/utf8.txt $DESTDIR/dfb/share/SDL/test

# build.pc
install -d $DESTDIR/dfb/share/pkgconfig
cat > $DESTDIR/dfb/share/pkgconfig/sdl-build.pc << EOF
Name: SDL
Version: 1.2.14
Description: Simple DirectMedia Layer library
Requires: $REQUIRES

devel=\\
/dfb/include/SDL/begin_code.h \\
/dfb/include/SDL/close_code.h \\
/dfb/include/SDL/SDL.h \\
/dfb/include/SDL/SDL_active.h \\
/dfb/include/SDL/SDL_audio.h \\
/dfb/include/SDL/SDL_cdrom.h \\
/dfb/include/SDL/SDL_config.h \\
/dfb/include/SDL/SDL_cpuinfo.h \\
/dfb/include/SDL/SDL_endian.h \\
/dfb/include/SDL/SDL_error.h \\
/dfb/include/SDL/SDL_events.h \\
/dfb/include/SDL/SDL_joystick.h \\
/dfb/include/SDL/SDL_keyboard.h \\
/dfb/include/SDL/SDL_keysym.h \\
/dfb/include/SDL/SDL_loadso.h \\
/dfb/include/SDL/SDL_main.h \\
/dfb/include/SDL/SDL_mouse.h \\
/dfb/include/SDL/SDL_mutex.h \\
EOF
test $GL && cat >> $DESTDIR/dfb/share/pkgconfig/sdl-build.pc << EOF
/dfb/include/SDL/SDL_opengl.h \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/sdl-build.pc << EOF
/dfb/include/SDL/SDL_platform.h \\
/dfb/include/SDL/SDL_quit.h \\
/dfb/include/SDL/SDL_rwops.h \\
/dfb/include/SDL/SDL_stdinc.h \\
/dfb/include/SDL/SDL_thread.h \\
/dfb/include/SDL/SDL_timer.h \\
/dfb/include/SDL/SDL_version.h \\
/dfb/include/SDL/SDL_video.h \\
/dfb/lib/libSDL.so \\
/dfb/lib/pkgconfig/sdl.pc \\
/dfb/share/aclocal/sdl.m4

exec=\\
/dfb/lib/libSDL-1.2.so.0 \\
/dfb/share/SDL/test/checkkeys \\
/dfb/share/SDL/test/graywin \\
/dfb/share/SDL/test/icon.bmp \\
/dfb/share/SDL/test/loopwave \\
/dfb/share/SDL/test/moose.dat \\
/dfb/share/SDL/test/sail.bmp \\
/dfb/share/SDL/test/sample.bmp \\
/dfb/share/SDL/test/sample.wav \\
/dfb/share/SDL/test/testalpha \\
/dfb/share/SDL/test/testbitmap \\
/dfb/share/SDL/test/testblitspeed \\
/dfb/share/SDL/test/testcdrom \\
/dfb/share/SDL/test/testcursor \\
/dfb/share/SDL/test/testerror \\
/dfb/share/SDL/test/testfile \\
EOF
test $GL && cat >> $DESTDIR/dfb/share/pkgconfig/sdl-build.pc << EOF
/dfb/share/SDL/test/testgl \\
EOF
cat >> $DESTDIR/dfb/share/pkgconfig/sdl-build.pc << EOF
/dfb/share/SDL/test/testiconv \\
/dfb/share/SDL/test/testjoystick \\
/dfb/share/SDL/test/testkeys \\
/dfb/share/SDL/test/testloadso \\
/dfb/share/SDL/test/testlock \\
/dfb/share/SDL/test/testoverlay \\
/dfb/share/SDL/test/testoverlay2 \\
/dfb/share/SDL/test/testpalette \\
/dfb/share/SDL/test/testplatform \\
/dfb/share/SDL/test/testsem \\
/dfb/share/SDL/test/testsprite \\
/dfb/share/SDL/test/testthread \\
/dfb/share/SDL/test/testtimer \\
/dfb/share/SDL/test/testver \\
/dfb/share/SDL/test/testvidinfo \\
/dfb/share/SDL/test/testwin \\
/dfb/share/SDL/test/testwm \\
/dfb/share/SDL/test/threadwin \\
/dfb/share/SDL/test/torturethread \\
/dfb/share/SDL/test/utf8.txt
EOF

exit

# patch
--- SDL-1.2.14.orig/configure.in
+++ SDL-1.2.14/configure.in
@@ -3,6 +3,7 @@
 AC_CONFIG_HEADER(include/SDL_config.h)
 AC_GNU_SOURCE
 AC_CONFIG_AUX_DIRS($srcdir/build-scripts)
+AC_CONFIG_MACRO_DIR(acinclude)
 
 dnl Set various version strings - taken gratefully from the GTk sources
 #
@@ -371,8 +372,8 @@
         LIBS="$alsa_save_LIBS"
         if test x$have_alsa = xyes; then
             AC_ARG_ENABLE(alsa-shared,
-AC_HELP_STRING([--enable-alsa-shared], [dynamically load ALSA audio support [[default=yes]]]),
-                          , enable_alsa_shared=yes)
+AC_HELP_STRING([--enable-alsa-shared], [dynamically load ALSA audio support [[default=no]]]),
+                          , enable_alsa_shared=no)
             alsa_lib=[`find_lib "libasound.so.*" "$ALSA_LIBS" | sed 's/.*\/\(.*\)/\1/; q'`]
 
             AC_DEFINE(SDL_AUDIO_DRIVER_ALSA)
@@ -1633,7 +1634,6 @@
         AC_TRY_COMPILE([
          #include <GL/gl.h>
          #include <GL/glx.h>
-         #include <GL/glu.h>
         ],[
         ],[
         video_opengl=yes
--- SDL-1.2.14.orig/include/SDL_opengl.h
+++ SDL-1.2.14/include/SDL_opengl.h
@@ -44,7 +44,6 @@
 #include <glu.h>	/* Header File For The GLU Library */
 #else
 #include <GL/gl.h>	/* Header File For The OpenGL Library */
-#include <GL/glu.h>	/* Header File For The GLU Library */
 #endif
 #ifndef NO_SDL_GLEXT
 #undef __glext_h_
--- SDL-1.2.14.orig/sdl.m4
+++ SDL-1.2.14/sdl.m4
@@ -39,11 +39,12 @@
   AC_PATH_PROG(SDL_CONFIG, sdl-config, no, [$PATH])
   PATH="$as_save_PATH"
   min_sdl_version=ifelse([$1], ,0.11.0,$1)
-  AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   no_sdl=""
   if test "$SDL_CONFIG" = "no" ; then
-    no_sdl=yes
+    PKG_CHECK_MODULES(SDL, [sdl >= $min_sdl_version], [], [no_sdl=yes])
+    AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   else
+    AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
     SDL_CFLAGS=`$SDL_CONFIG $sdl_config_args --cflags`
     SDL_LIBS=`$SDL_CONFIG $sdl_config_args --libs`
 
--- SDL-1.2.14.orig/src/video/directfb/SDL_DirectFB_video.c
+++ SDL-1.2.14/src/video/directfb/SDL_DirectFB_video.c
@@ -34,6 +34,9 @@
 
 #include <directfb.h>
 #include <directfb_version.h>
+#if DIRECTFB_MAJOR_VERSION >= 1
+#include <directfbgl.h>
+#endif
 
 #include "SDL_video.h"
 #include "SDL_mouse.h"
@@ -71,6 +74,11 @@
 static int DirectFB_SetHWAlpha(_THIS, SDL_Surface *surface, Uint8 alpha);
 static int DirectFB_FlipHWSurface(_THIS, SDL_Surface *surface);
 static int DirectFB_ShowWMCursor(_THIS, WMcursor *cursor);
+#if DIRECTFB_MAJOR_VERSION >= 1
+static int DirectFB_GL_GetAttribute(_THIS, SDL_GLattr attrib, int *value);
+static int DirectFB_GL_MakeCurrent(_THIS);
+static void DirectFB_GL_SwapBuffers(_THIS);
+#endif
 
 /* Various screen update functions available */
 static void DirectFB_DirectUpdate(_THIS, int numrects, SDL_Rect *rects);
@@ -138,6 +146,11 @@
   device->FlipHWSurface = DirectFB_FlipHWSurface;
   device->FreeHWSurface = DirectFB_FreeHWSurface;
   device->ShowWMCursor = DirectFB_ShowWMCursor;
+#if DIRECTFB_MAJOR_VERSION >= 1
+  device->GL_GetAttribute = DirectFB_GL_GetAttribute;
+  device->GL_MakeCurrent = DirectFB_GL_MakeCurrent;
+  device->GL_SwapBuffers = DirectFB_GL_SwapBuffers;
+#endif
   device->SetCaption = NULL;
   device->SetIcon = NULL;
   device->IconifyWindow = NULL;
@@ -213,6 +226,9 @@
 struct private_hwdata {
   IDirectFBSurface *surface;
   IDirectFBPalette *palette;
+#if DIRECTFB_MAJOR_VERSION >= 1
+  IDirectFBGL      *gl;
+#endif
 };
 
 void SetDirectFBerror (const char *function, DFBResult code)
@@ -386,7 +402,16 @@
   HIDDEN->enable_mga_crtc2 = 0;
   HIDDEN->mga_crtc2_stretch_overscan = 1;
 
-  ret = DirectFBInit (NULL, NULL);
+  if (SDL_getenv("SDL_DIRECTFB_FORCE_WINDOWED") != NULL)
+    {
+      int argc = 2;
+      char *args[] = { "-", "--dfb:force-windowed" };
+      char **argv = args;
+      ret = DirectFBInit (&argc, &argv);
+    }
+  else
+    ret = DirectFBInit (NULL, NULL);
+
   if (ret)
     {
       SetDirectFBerror ("DirectFBInit", ret);
@@ -594,10 +619,23 @@
   DFBSurfacePixelFormat  pixelformat;
   IDirectFBSurface      *surface;
 
+/*
   fprintf (stderr, "SDL DirectFB_SetVideoMode: %dx%d@%d, flags: 0x%08x\n",
            width, height, bpp, flags);
+*/
 
-  flags |= SDL_FULLSCREEN;
+  if (!SDL_getenv("SDL_DIRECTFB_FORCE_WINDOWED"))
+    {
+      int                      i;
+      struct DirectFBEnumRect *rect;
+ 
+      for (i = 0, rect = enumlist; rect; ++i, rect = rect->next )
+        if (enumlist && enumlist->r.w == width && enumlist->r.h == height)
+          {
+            flags |= SDL_FULLSCREEN;
+            break;
+          }
+    }
 
   /* Release previous primary surface */
   if (current->hwdata && current->hwdata->surface)
@@ -611,6 +649,14 @@
           current->hwdata->palette->Release (current->hwdata->palette);
           current->hwdata->palette = NULL;
         }
+
+#if DIRECTFB_MAJOR_VERSION >= 1
+      if (current->hwdata->gl)
+        {
+          current->hwdata->gl->Release (current->hwdata->gl);
+          current->hwdata->gl = NULL;
+        }
+#endif
     }
   else if (!current->hwdata)
     {
@@ -796,6 +842,22 @@
    }
   }
 
+#if DIRECTFB_MAJOR_VERSION >= 1
+  if (flags & SDL_OPENGL)
+    {
+      DirectFBSetOption("gles", "0");
+
+      ret = surface->GetGL (surface, &current->hwdata->gl);
+      if (ret)
+        {
+          SetDirectFBerror ("surface->GetGL", ret);
+          return NULL;
+        }
+      else
+        current->flags |= SDL_OPENGL;
+    }
+#endif
+
   return current;
 }
 
@@ -1091,6 +1153,12 @@
     {
       IDirectFBSurface        *surface = this->screen->hwdata->surface;
       IDirectFBPalette        *palette = this->screen->hwdata->palette;
+#if DIRECTFB_MAJOR_VERSION >= 1
+      IDirectFBGL             *gl      = this->screen->hwdata->gl;
+
+      if (gl)
+        gl->Release (gl);
+#endif
 
       if (palette)
         palette->Release (palette);
@@ -1100,6 +1168,9 @@
 
       this->screen->hwdata->surface = NULL;
       this->screen->hwdata->palette = NULL;
+#if DIRECTFB_MAJOR_VERSION >= 1
+      this->screen->hwdata->gl      = NULL;
+#endif
     }
 
   if (HIDDEN->c2frame)
@@ -1166,6 +1237,57 @@
   return 1;
 }
 
-void DirectFB_FinalQuit(void) 
+#if DIRECTFB_MAJOR_VERSION >= 1
+
+static int DirectFB_GL_GetAttribute(_THIS, SDL_GLattr attrib, int *value)
 {
+  DFBGLAttributes attributes;
+
+  if (this->screen->hwdata->gl->GetAttributes (this->screen->hwdata->gl, &attributes))
+    return -1;
+
+  switch (attrib)
+    {
+    case SDL_GL_RED_SIZE:
+      *value = attributes.red_size;
+      break;
+    case SDL_GL_GREEN_SIZE:
+      *value = attributes.green_size;
+      break;
+    case SDL_GL_BLUE_SIZE:
+      *value = attributes.blue_size;
+      break;
+    case SDL_GL_ALPHA_SIZE:
+      *value = attributes.alpha_size;
+      break;
+    case SDL_GL_DOUBLEBUFFER:
+      *value = attributes.double_buffer;
+      break;
+    case SDL_GL_BUFFER_SIZE:
+      *value = attributes.buffer_size;
+      break;
+    case SDL_GL_DEPTH_SIZE:
+      *value = attributes.depth_size;
+      break;
+    case SDL_GL_STENCIL_SIZE:
+      *value = attributes.stencil_size;
+      break;
+    default:
+      return -1;
+  }
+
+  return 0;
 }
+
+static int DirectFB_GL_MakeCurrent(_THIS)
+{
+  if (this->screen->hwdata->gl->Lock (this->screen->hwdata->gl))
+    return -1;
+}
+
+static void DirectFB_GL_SwapBuffers(_THIS)
+{
+  this->screen->hwdata->surface->Flip (this->screen->hwdata->surface, NULL, DSFLIP_WAITFORSYNC);
+}
+
+#endif
--- SDL-1.2.14.orig/test/Makefile.in
+++ SDL-1.2.14/test/Makefile.in
@@ -4,7 +4,7 @@
 
 CC      = @CC@
 EXE	= @EXE@
-CFLAGS  = @CFLAGS@
+CFLAGS  = @CFLAGS@ -DTESTDATADIR=\"@TESTDATADIR@\"
 LIBS	= @LIBS@
 
 TARGETS = checkkeys$(EXE) graywin$(EXE) loopwave$(EXE) testalpha$(EXE) testbitmap$(EXE) testblitspeed$(EXE) testcdrom$(EXE) testcursor$(EXE) testdyngl$(EXE) testerror$(EXE) testfile$(EXE) testgamma$(EXE) testgl$(EXE) testhread$(EXE) testiconv$(EXE) testjoystick$(EXE) testkeys$(EXE) testlock$(EXE) testoverlay2$(EXE) testoverlay$(EXE) testpalette$(EXE) testplatform$(EXE) testsem$(EXE) testsprite$(EXE) testtimer$(EXE) testver$(EXE) testvidinfo$(EXE) testwin$(EXE) testwm$(EXE) threadwin$(EXE) torturethread$(EXE) testloadso$(EXE)
--- SDL-1.2.14.orig/test/acinclude.m4
+++ SDL-1.2.14/test/acinclude.m4
@@ -40,7 +40,9 @@
   AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   no_sdl=""
   if test "$SDL_CONFIG" = "no" ; then
-    no_sdl=yes
+    if test -z "$SDL_CFLAGS" || test -z "$SDL_LIBS"; then
+       no_sdl=yes
+    fi
   else
     SDL_CFLAGS=`$SDL_CONFIG $sdlconf_args --cflags`
     SDL_LIBS=`$SDL_CONFIG $sdlconf_args --libs`
--- SDL-1.2.14.orig/test/configure.in
+++ SDL-1.2.14/test/configure.in
@@ -53,6 +53,13 @@
     *)
         EXE=""
         MATHLIB="-lm"
+        AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
+        if test x$PKG_CONFIG != xno; then
+            if $PKG_CONFIG --exists gl; then
+                CFLAGS="$CFLAGS `$PKG_CONFIG --cflags gl`"
+                XPATH=`$PKG_CONFIG --libs-only-L gl`
+            fi
+        fi
         SYS_GL_LIBS="-lGL"
         ;;
 esac
@@ -101,5 +108,11 @@
 fi
 AC_SUBST(GLLIB)
 
+AC_ARG_WITH(testdatadir,
+            [AS_HELP_STRING([--with-testdatadir], [test data directory])],
+            [TESTDATADIR=$with_testdatadir],
+            [TESTDATADIR=.])
+AC_SUBST(TESTDATADIR)
+
 dnl Finally create all the generated files
 AC_OUTPUT([Makefile])
--- SDL-1.2.14.orig/test/loopwave.c
+++ SDL-1.2.14/test/loopwave.c
@@ -70,7 +70,7 @@
 		return(1);
 	}
 	if ( argv[1] == NULL ) {
-		argv[1] = "sample.wav";
+		argv[1] = TESTDATADIR"/sample.wav";
 	}
 	/* Load the wave file into memory */
 	if ( SDL_LoadWAV(argv[1],
--- SDL-1.2.14.orig/test/testalpha.c
+++ SDL-1.2.14/test/testalpha.c
@@ -407,7 +407,7 @@
 	}
 
 	/* Load the sprite */
-	if ( LoadSprite(screen, "icon.bmp") < 0 ) {
+	if ( LoadSprite(screen, TESTDATADIR"/icon.bmp") < 0 ) {
 		SDL_FreeSurface(light);
 		quit(1);
 	}
--- SDL-1.2.14.orig/test/testblitspeed.c
+++ SDL-1.2.14/test/testblitspeed.c
@@ -269,7 +269,7 @@
         return(0);
     }
 
-    bmp = SDL_LoadBMP("sample.bmp");
+    bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
     if (bmp == NULL)
     {
         fprintf(stderr, "SDL_LoadBMP failed: %s\n", SDL_GetError());
--- SDL-1.2.14.orig/test/testcursor.c
+++ SDL-1.2.14/test/testcursor.c
@@ -152,7 +152,7 @@
 		return(1);
 	}
 
-	screen = SDL_SetVideoMode(320,200,8,SDL_ANYFORMAT);
+	screen = SDL_SetVideoMode(320,200,0,SDL_ANYFORMAT);
 	if (screen==NULL) {
 		fprintf(stderr, "Couldn't initialize video mode: %s\n",SDL_GetError());
 		return(1);
--- SDL-1.2.14.orig/test/testdyngl.c
+++ SDL-1.2.14/test/testdyngl.c
@@ -186,7 +186,7 @@
 
 		while(SDL_PollEvent(&event))
 		{
-			if(event.type & SDL_KEYDOWN)
+			if(event.type & SDL_KEYDOWN && event.key.keysym.sym == SDLK_ESCAPE)
 				done=1;
 		}
 
--- SDL-1.2.14.orig/test/testgamma.c
+++ SDL-1.2.14/test/testgamma.c
@@ -125,7 +125,7 @@
 #endif
 
 	/* Do all the drawing work */
-	image = SDL_LoadBMP("sample.bmp");
+	image = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( image ) {
 		SDL_Rect dst;
 
--- SDL-1.2.14.orig/test/testgl.c
+++ SDL-1.2.14/test/testgl.c
@@ -17,7 +17,7 @@
 #define SHADED_CUBE
 
 /* Define this to be the name of the logo image to use with -logo */
-#define LOGO_FILE	"icon.bmp"
+#define LOGO_FILE	TESTDATADIR"/icon.bmp"
 
 /* The SDL_OPENGLBLIT interface is deprecated.
    The code is still available for benchmark purposes though.
--- SDL-1.2.14.orig/test/testiconv.c
+++ SDL-1.2.14/test/testiconv.c
@@ -37,7 +37,7 @@
 	int errors = 0;
 
 	if ( !argv[1] ) {
-		argv[1] = "utf8.txt";
+		argv[1] = TESTDATADIR"/utf8.txt";
 	}
 	file = fopen(argv[1], "rb");
 	if ( !file ) {
--- SDL-1.2.14.orig/test/testoverlay.c
+++ SDL-1.2.14/test/testoverlay.c
@@ -480,7 +480,7 @@
 	SDL_WM_SetCaption("SDL test overlay", "testoverlay");
 
 	/* Load picture */
-	bmpfile=(argv[1]?argv[1]:"sample.bmp");
+	bmpfile=(argv[1]?argv[1]:TESTDATADIR"/sample.bmp");
 	pic = SDL_LoadBMP(bmpfile);
 	if ( pic == NULL ) {
 		fprintf(stderr, "Couldn't load %s: %s\n", bmpfile,
--- SDL-1.2.14.orig/test/testoverlay2.c
+++ SDL-1.2.14/test/testoverlay2.c
@@ -399,7 +399,7 @@
     }
 
     /* load the trojan moose images */
-    handle=SDL_RWFromFile("moose.dat", "rb");
+    handle=SDL_RWFromFile(TESTDATADIR"/moose.dat", "rb");
     if (handle==NULL)
     {
         fprintf(stderr, "Can't find the file moose.dat !\n");
--- SDL-1.2.14.orig/test/testpalette.c
+++ SDL-1.2.14/test/testpalette.c
@@ -175,7 +175,7 @@
 
     if (vidflags & SDL_FULLSCREEN) SDL_ShowCursor (SDL_FALSE);
 
-    if((boat[0] = SDL_LoadBMP("sail.bmp")) == NULL)
+    if((boat[0] = SDL_LoadBMP(TESTDATADIR"/sail.bmp")) == NULL)
 	sdlerr("loading sail.bmp");
     /* We've chosen magenta (#ff00ff) as colour key for the boat */
     SDL_SetColorKey(boat[0], SDL_SRCCOLORKEY | SDL_RLEACCEL,
@@ -330,6 +330,7 @@
 	/* update changed areas of the screen */
 	SDL_UpdateRects(screen, NBOATS, updates);
 	frames++;
+	SDL_Delay(1);
     } while(fade_level > 0);
 
     printf("%d frames, %.2f fps\n",
--- SDL-1.2.14.orig/test/testsprite.c
+++ SDL-1.2.14/test/testsprite.c
@@ -170,7 +170,7 @@
 	videoflags = SDL_SWSURFACE|SDL_ANYFORMAT;
 	width = 640;
 	height = 480;
-	video_bpp = 8;
+	video_bpp = 0;
 	debug_flip = 0;
 	while ( argc > 1 ) {
 		--argc;
@@ -221,7 +221,7 @@
 	}
 
 	/* Load the sprite */
-	if ( LoadSprite("icon.bmp") < 0 ) {
+	if ( LoadSprite(TESTDATADIR"/icon.bmp") < 0 ) {
 		quit(1);
 	}
 
@@ -308,6 +308,7 @@
 			}
 		}
 		MoveSprites(screen, background);
+		SDL_Delay(1);
 	}
 	SDL_FreeSurface(sprite);
 	free(mem);
--- SDL-1.2.14.orig/test/testvidinfo.c
+++ SDL-1.2.14/test/testvidinfo.c
@@ -135,7 +135,7 @@
 	}
 
         /* run the generic blit test */
-	bmp = SDL_LoadBMP("sample.bmp");
+	bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( ! bmp ) {
 		printf("Couldn't load sample.bmp: %s\n", SDL_GetError());
 		return 0;
@@ -164,7 +164,7 @@
 	}
 
         /* run the colorkeyed blit test */
-	bmpcc = SDL_LoadBMP("sample.bmp");
+	bmpcc = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( ! bmpcc ) {
 		printf("Couldn't load sample.bmp: %s\n", SDL_GetError());
 		return 0;
@@ -260,7 +260,7 @@
         if (bmp->format->BitsPerPixel>8)
         {
 		SDL_FreeSurface(bmp);
-                bmp = SDL_LoadBMP("sample.bmp");
+                bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 		SDL_SetAlpha(bmp, SDL_SRCALPHA, 85); /* 85 - 33% alpha */
 		tmp = bmp;
 		bmp = SDL_DisplayFormat(bmp);
@@ -297,7 +297,7 @@
         if (bmp->format->BitsPerPixel>8)
         {
 		SDL_FreeSurface(bmpcc);
-                bmpcc = SDL_LoadBMP("sample.bmp");
+                bmpcc = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 		SDL_SetAlpha(bmpcc, SDL_SRCALPHA, 85); /* 85 - 33% alpha */
                 SDL_SetColorKey(bmpcc, SDL_SRCCOLORKEY | SDL_RLEACCEL, *(Uint8 *)bmpcc->pixels);
 		tmp = bmpcc;
--- SDL-1.2.14.orig/test/testwin.c
+++ SDL-1.2.14/test/testwin.c
@@ -29,7 +29,7 @@
 
 	/* Load the image into a surface */
 	if ( bmpfile == NULL ) {
-		bmpfile = "sample.bmp";		/* Sample image */
+		bmpfile = TESTDATADIR"/sample.bmp";		/* Sample image */
 	}
 fprintf(stderr, "Loading picture: %s\n", bmpfile);
 	picture = SDL_LoadBMP(bmpfile);
--- SDL-1.2.14.orig/test/testwm.c
+++ SDL-1.2.14/test/testwm.c
@@ -387,7 +387,7 @@
 	}
 
 	/* Set the icon -- this must be done before the first mode set */
-	icon = LoadIconSurface("icon.bmp", &icon_mask);
+	icon = LoadIconSurface(TESTDATADIR"/icon.bmp", &icon_mask);
 	if ( icon != NULL ) {
 		SDL_WM_SetIcon(icon, icon_mask);
 	}
--- SDL-1.2.14.orig/test/threadwin.c
+++ SDL-1.2.14/test/threadwin.c
@@ -272,7 +272,7 @@
 	}
 
 	/* Set the icon -- this must be done before the first mode set */
-	icon = LoadIconSurface("icon.bmp", &icon_mask);
+	icon = LoadIconSurface(TESTDATADIR"/icon.bmp", &icon_mask);
 	if ( icon != NULL ) {
 		SDL_WM_SetIcon(icon, icon_mask);
 	}

# source
https://libsdl.org/release/SDL-1.2.14.tar.gz
