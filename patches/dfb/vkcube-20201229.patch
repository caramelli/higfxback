# This file is part of HiGFXback

# requires
REQUIRES="directfb2-build glslang-build libpng-build meson-build vulkan-loader-build"

PKG_CONFIG_PATH=/dfb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
rm -f vkcube.frag.spv.h.in vkcube.vert.spv.h.in
PKG_CONFIG_PATH=/dfb/lib/pkgconfig meson setup --prefix=/dfb build

# build
meson compile -C build

# install
install -d $DESTDIR/dfb/bin
install build/vkcube $DESTDIR/dfb/bin

# build.pc
install -d $DESTDIR/dfb/share/pkgconfig
cat > $DESTDIR/dfb/share/pkgconfig/vkcube-build.pc << EOF
Name: vkcube
Version: 20201229
Description: Spinning Vulkan cube using Window System Integration
Requires: $REQUIRES

exec=\\
/dfb/bin/vkcube
EOF

exit
--- vkcube-20201229.orig/common.h
+++ vkcube-20201229/common.h
@@ -3,25 +3,35 @@
 #include <sys/time.h>
 #include <stdbool.h>
 #include <string.h>
-#include <strings.h>
 
+#if defined(HAVE_VULKAN_INTEL_H)
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <drm_fourcc.h>
+#include <gbm.h>
+#endif
+
 #include <png.h>
 
+#if defined(ENABLE_DIRECTFB)
+#include <directfb.h>
+#define VK_USE_PLATFORM_DIRECTFB_EXT
+#endif
+
+#if defined(ENABLE_XCB)
 #include <xcb/xcb.h>
+#define VK_USE_PLATFORM_XCB_KHR
+#endif
 
+#if defined(ENABLE_WAYLAND)
 #include <wayland-client.h>
 #include <xdg-shell-protocol.h>
-
-#define VK_USE_PLATFORM_XCB_KHR
 #define VK_USE_PLATFORM_WAYLAND_KHR
+#endif
+
 #define VK_PROTOTYPES
 #include <vulkan/vulkan.h>
 
-#include <gbm.h>
-
 #include "esUtil.h"
 
 #define printflike(a, b) __attribute__((format(printf, (a), (b))))
@@ -29,7 +39,10 @@
 #define MAX_NUM_IMAGES 4
 
 struct vkcube_buffer {
+#if defined(HAVE_VULKAN_INTEL_H)
    struct gbm_bo *gbm_bo;
+   uint32_t fb;
+#endif
    VkDeviceMemory mem;
    VkImage image;
    VkImageView view;
@@ -37,7 +50,6 @@
    VkFence fence;
    VkCommandBuffer cmd_buffer;
 
-   uint32_t fb;
    uint32_t stride;
 };
 
@@ -51,16 +63,31 @@
 struct vkcube {
    struct model model;
 
+#if defined(HAVE_VULKAN_INTEL_H)
    int fd;
+   drmModeCrtc *crtc;
+   drmModeConnector *connector;
    struct gbm_device *gbm_device;
+#endif
 
+#if defined(ENABLE_DIRECTFB)
+   struct {
+      IDirectFB *dfb;
+      IDirectFBSurface *surface;
+      IDirectFBEventBuffer *event_buffer;
+   } directfb;
+#endif
+
+#if defined(ENABLE_XCB)
    struct {
       xcb_connection_t *conn;
       xcb_window_t window;
       xcb_atom_t atom_wm_protocols;
       xcb_atom_t atom_wm_delete_window;
    } xcb;
+#endif
 
+#if defined(ENABLE_WAYLAND)
    struct {
       struct wl_display *display;
       struct wl_compositor *compositor;
@@ -72,6 +99,7 @@
       struct xdg_toplevel *xdg_toplevel;
       bool wait_for_configure;
    } wl;
+#endif
 
    struct {
       VkDisplayModeKHR display_mode;
@@ -79,8 +107,6 @@
 
    VkSwapchainKHR swap_chain;
 
-   drmModeCrtc *crtc;
-   drmModeConnector *connector;
    uint32_t width, height;
 
    VkInstance instance;
--- vkcube-20201229.orig/main.c
+++ vkcube-20201229/main.c
@@ -37,38 +37,51 @@
 
 #define _DEFAULT_SOURCE /* for major() */
 
+#include <assert.h>
 #include <stdlib.h>
 #include <stdio.h>
-#include <fcntl.h>
 #include <unistd.h>
+#if defined(ENABLE_WAYLAND)
+#include <linux/input.h>
+#endif
+#if defined(ENABLE_WAYLAND) || defined(HAVE_VULKAN_INTEL_H)
 #include <errno.h>
-#include <sys/ioctl.h>
-#include <sys/types.h>
-#include <sys/sysmacros.h>
-#include <sys/stat.h>
-#include <signal.h>
+#include <poll.h>
+#endif
+#if defined(HAVE_VULKAN_INTEL_H)
+#include <fcntl.h>
 #include <linux/kd.h>
-#include <linux/vt.h>
 #include <linux/major.h>
+#include <linux/vt.h>
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
 #include <termios.h>
-#include <poll.h>
-#include <math.h>
-#include <assert.h>
-#include <sys/mman.h>
-#include <linux/input.h>
+#include <vulkan/vulkan_intel.h>
+#endif
 
 #include "common.h"
 
 enum display_mode {
    DISPLAY_MODE_AUTO = 0,
    DISPLAY_MODE_HEADLESS,
+#if defined(HAVE_VULKAN_INTEL_H)
    DISPLAY_MODE_KMS,
+#endif
+#if defined(ENABLE_WAYLAND)
    DISPLAY_MODE_WAYLAND,
+#endif
+#if defined(ENABLE_XCB)
    DISPLAY_MODE_XCB,
+#endif
+#if defined(ENABLE_DIRECTFB)
+   DISPLAY_MODE_DIRECTFB,
+#endif
    DISPLAY_MODE_KHR,
 };
 
 static enum display_mode display_mode = DISPLAY_MODE_AUTO;
+static uint32_t width = 1024, height = 768;
 static const char *arg_out_file = "./cube.png";
 
 void noreturn
@@ -411,12 +424,10 @@
    return 0;
 }
 
-#ifdef HAVE_VULKAN_INTEL_H
+#if defined(HAVE_VULKAN_INTEL_H)
 
 /* KMS display code - render to kernel modesetting fb */
 
-#include <vulkan/vulkan_intel.h>
-
 static struct termios save_tio;
 
 static void
@@ -629,22 +640,11 @@
    }
 }
 
-#else
-
-static int
-init_kms(struct vkcube *vc)
-{
-   return -1;
-}
-
-static void
-mainloop_vt(struct vkcube *vc)
-{
-}
-
 #endif
 
-/* Swapchain-based code - shared between XCB and Wayland */
+#if defined(ENABLE_DIRECTFB) || defined(ENABLE_XCB) || defined(ENABLE_WAYLAND)
+
+/* Swapchain-based code - shared between DirectFB, XCB and Wayland */
 
 static VkFormat
 choose_surface_format(struct vkcube *vc)
@@ -682,6 +682,8 @@
    return format;
 }
 
+#endif
+
 static void
 create_swapchain(struct vkcube *vc)
 {
@@ -756,6 +758,95 @@
    }
 }
 
+#if defined(ENABLE_DIRECTFB)
+
+/* DirectFB display code - render to DirectFB surface */
+
+// Return -1 on failure.
+static int
+init_directfb(struct vkcube *vc)
+{
+   DirectFBInit(NULL, NULL);
+   if (DirectFBCreate(&vc->directfb.dfb))
+      return -1;
+
+   DFBSurfaceDescription desc;
+   desc.flags = DSDESC_CAPS | DSDESC_WIDTH | DSDESC_HEIGHT;
+   desc.caps = DSCAPS_PRIMARY;
+   desc.width = vc->width;
+   desc.height = vc->height;
+   vc->directfb.dfb->CreateSurface(vc->directfb.dfb, &desc, &vc->directfb.surface);
+
+   vc->directfb.dfb->CreateInputEventBuffer(vc->directfb.dfb, DICAPS_KEYS, DFB_FALSE, &vc->directfb.event_buffer);
+
+   init_vk(vc, VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME);
+
+   PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT get_directfb_presentation_support =
+      (PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)
+      vkGetInstanceProcAddr(vc->instance, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
+   PFN_vkCreateDirectFBSurfaceEXT create_directfb_surface =
+      (PFN_vkCreateDirectFBSurfaceEXT)
+      vkGetInstanceProcAddr(vc->instance, "vkCreateDirectFBSurfaceEXT");
+
+   if (!get_directfb_presentation_support(vc->physical_device, 0,
+                                          vc->directfb.dfb)) {
+      fail("Vulkan not supported on given DirectFB surface");
+   }
+
+   create_directfb_surface(vc->instance,
+      &(VkDirectFBSurfaceCreateInfoEXT) {
+         .sType = VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
+         .dfb = vc->directfb.dfb,
+         .surface = vc->directfb.surface,
+      }, NULL, &vc->surface);
+
+   vc->image_format = choose_surface_format(vc);
+
+   init_vk_objects(vc);
+
+   create_swapchain(vc);
+
+   return 0;
+}
+
+static void
+mainloop_directfb(struct vkcube *vc)
+{
+   DFBEvent event;
+
+   while (1) {
+      vc->directfb.event_buffer->GetEvent(vc->directfb.event_buffer, &event);
+      if (event.input.key_id == DIKI_ESCAPE)
+         exit(0);
+
+      uint32_t index;
+      VkResult result = vkAcquireNextImageKHR(vc->device, vc->swap_chain, 60,
+                                              vc->semaphore, VK_NULL_HANDLE, &index);
+      if (result != VK_SUCCESS)
+         return;
+
+      assert(index <= MAX_NUM_IMAGES);
+      vc->model.render(vc, &vc->buffers[index], true);
+
+      vkQueuePresentKHR(vc->queue,
+         &(VkPresentInfoKHR) {
+            .sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
+            .swapchainCount = 1,
+            .pSwapchains = (VkSwapchainKHR[]) { vc->swap_chain, },
+            .pImageIndices = (uint32_t[]) { index, },
+            .pResults = &result,
+         });
+      if (result != VK_SUCCESS)
+         return;
+
+      vkQueueWaitIdle(vc->queue);
+   }
+}
+ 
+#endif
+
+#if defined(ENABLE_XCB)
+
 /* XCB display code - render to X window */
 
 static xcb_atom_t
@@ -976,6 +1067,10 @@
    }
 }
 
+#endif
+
+#if defined(ENABLE_WAYLAND)
+
 /* Wayland display code - render to Wayland window */
 
 static void
@@ -1236,6 +1331,8 @@
    }
 }
 
+#endif
+
 static int display_idx = -1;
 static int display_mode_idx = -1;
 static int display_plane_idx = -1;
@@ -1481,15 +1578,26 @@
    } else if (streq(s, "headless")) {
       *mode = DISPLAY_MODE_HEADLESS;
       return true;
+#if defined(HAVE_VULKAN_INTEL_H)
    } else if (streq(s, "kms")) {
       *mode = DISPLAY_MODE_KMS;
       return true;
+#endif
+#if defined(ENABLE_WAYLAND)
    } else if (streq(s, "wayland")) {
       *mode = DISPLAY_MODE_WAYLAND;
       return true;
+#endif
+#if defined(ENABLE_XCB)
    } else if (streq(s, "xcb")) {
       *mode = DISPLAY_MODE_XCB;
       return true;
+#endif
+#if defined(ENABLE_DIRECTFB)
+   } else if (streq(s, "directfb")) {
+      *mode = DISPLAY_MODE_DIRECTFB;
+      return true;
+#endif
    } else if (streq(s, "khr")) {
       *mode = DISPLAY_MODE_KHR;
       return true;
@@ -1509,8 +1617,12 @@
       "\n"
       "  -m <mode>               Choose display backend, where <mode> is one of\n"
       "                          \"auto\" (the default), \"headless\", \"khr\",\n"
-      "                          \"kms\", \"wayland\", or \"xcb\". This option is\n"
-      "                          incompatible with '-n'.\n"
+      "                          \"kms\", \"wayland\", \"xcb\", or \"directfb\".\n"
+      "                          This option is incompatible with '-n'.\n"
+      "\n"
+      "  -w                      Specify width.\n"
+      "\n"
+      "  -h                      Specify height.\n"
       "\n"
       "  -k <display:mode:plane> Select KHR configuration with 3 number separated\n"
       "                          by the column character. To display the item\n"
@@ -1548,7 +1660,7 @@
     * The initial ':' in the optstring makes getopt return ':' when an option
     * is missing a required argument.
     */
-   static const char *optstring = "+:nm:o:k:";
+   static const char *optstring = "+:nm:w:h:o:k:";
 
    int opt;
    bool found_arg_headless = false;
@@ -1565,6 +1677,12 @@
          found_arg_headless = true;
          display_mode = DISPLAY_MODE_HEADLESS;
          break;
+      case 'w':
+         width = atoi(optarg);
+         break;
+      case 'h':
+         height = atoi(optarg);
+         break;
       case 'k': {
          char config[40], *saveptr, *t;
          snprintf(config, sizeof(config), "%s", optarg);
@@ -1605,25 +1723,54 @@
 {
    switch (display_mode) {
    case DISPLAY_MODE_AUTO:
+#if defined(ENABLE_WAYLAND)
       display_mode = DISPLAY_MODE_WAYLAND;
       if (init_wayland(vc) == -1) {
          fprintf(stderr, "failed to initialize wayland, falling back "
+#endif
+#if defined(ENABLE_XCB)
+#if defined(ENABLE_WAYLAND)
                          "to xcb\n");
+#endif
          display_mode = DISPLAY_MODE_XCB;
          if (init_xcb(vc) == -1) {
             fprintf(stderr, "failed to initialize xcb, falling back "
-                            "to kms\n");
-            display_mode = DISPLAY_MODE_KMS;
-            if (init_kms(vc) == -1) {
-               fprintf(stderr, "failed to initialize kms, falling "
-                               "back to headless\n");
-               display_mode = DISPLAY_MODE_HEADLESS;
-               if (init_headless(vc) == -1) {
-                  fail("failed to initialize headless mode");
+#endif
+#if defined(ENABLE_DIRECTFB)
+#if defined(ENABLE_WAYLAND) || defined(ENABLE_XCB)
+                            "to directfb\n");
+#endif
+            display_mode = DISPLAY_MODE_DIRECTFB;
+            if (init_directfb(vc) == -1) {
+               fprintf(stderr, "failed to initialize directfb, falling back "
+#endif
+#if defined(HAVE_VULKAN_INTEL_H)
+#if defined(ENABLE_WAYLAND) || defined(ENABLE_XCB) || defined(ENABLE_DIRECTFB)
+                               "to kms\n");
+#endif
+               display_mode = DISPLAY_MODE_KMS;
+               if (init_kms(vc) == -1) {
+                  fprintf(stderr, "failed to initialize kms, falling back "
+#endif
+#if defined(ENABLE_WAYLAND) || defined(ENABLE_XCB) || defined(ENABLE_DIRECTFB) || defined(HAVE_VULKAN_INTEL_H)
+                                  "to headless\n");
+#endif
+                  display_mode = DISPLAY_MODE_HEADLESS;
+                  if (init_headless(vc) == -1) {
+                     fail("failed to initialize headless mode");
+                  }
+#if defined(HAVE_VULKAN_INTEL_H)
                }
+#endif
+#if defined(ENABLE_DIRECTFB)
             }
+#endif
+#if defined(ENABLE_XCB)
          }
+#endif
+#if defined(ENABLE_WAYLAND)
       }
+#endif
       break;
    case DISPLAY_MODE_HEADLESS:
       if (init_headless(vc) == -1)
@@ -1633,18 +1780,30 @@
       if (init_khr(vc) == -1)
          fail("fail to initialize khr");
       break;
+#if defined(HAVE_VULKAN_INTEL_H)
    case DISPLAY_MODE_KMS:
       if (init_kms(vc) == -1)
          fail("failed to initialize kms");
       break;
+#endif
+#if defined(ENABLE_WAYLAND)
    case DISPLAY_MODE_WAYLAND:
       if (init_wayland(vc) == -1)
          fail("failed to initialize wayland");
       break;
+#endif
+#if defined(ENABLE_XCB)
    case DISPLAY_MODE_XCB:
       if (init_xcb(vc) == -1)
          fail("failed to initialize xcb");
       break;
+#endif
+#if defined(ENABLE_DIRECTFB)
+   case DISPLAY_MODE_DIRECTFB:
+      if (init_directfb(vc) == -1)
+         fail("failed to initialize directfb");
+      break;
+#endif
    }
 }
 
@@ -1655,20 +1814,32 @@
    case DISPLAY_MODE_AUTO:
       assert(!"display mode is unset");
       break;
+#if defined(ENABLE_WAYLAND)
    case DISPLAY_MODE_WAYLAND:
       mainloop_wayland(vc);
       break;
+#endif
+#if defined(ENABLE_XCB)
    case DISPLAY_MODE_XCB:
       mainloop_xcb(vc);
       break;
+#endif
+#if defined(ENABLE_DIRECTFB)
+   case DISPLAY_MODE_DIRECTFB:
+      mainloop_directfb(vc);
+      break;
+#endif
+#if defined(HAVE_VULKAN_INTEL_H)
    case DISPLAY_MODE_KMS:
       mainloop_vt(vc);
       break;
+#endif
    case DISPLAY_MODE_KHR:
       mainloop_khr(vc);
       break;
    case DISPLAY_MODE_HEADLESS:
       vc->model.render(vc, &vc->buffers[0], false);
+      vkQueueWaitIdle(vc->queue);
       write_buffer(vc, &vc->buffers[0]);
       break;
    }
@@ -1681,11 +1852,20 @@
    parse_args(argc, argv);
 
    vc.model = cube_model;
+#if defined(HAVE_VULKAN_INTEL_H)
    vc.gbm_device = NULL;
+#endif
+#if defined(ENABLE_DIRECTFB)
+   vc.directfb.surface = NULL;
+#endif
+#if defined(ENABLE_XCB)
    vc.xcb.window = XCB_NONE;
+#endif
+#if defined(ENABLE_WAYLAND)
    vc.wl.surface = NULL;
-   vc.width = 1024;
-   vc.height = 768;
+#endif
+   vc.width = width;
+   vc.height = height;
    gettimeofday(&vc.start_tv, NULL);
 
    init_display(&vc);
--- vkcube-20201229.orig/meson.build
+++ vkcube-20201229/meson.build
@@ -3,26 +3,40 @@
 
 cc = meson.get_compiler('c')
 
-dep_libdrm = dependency('libdrm')
-dep_gbm = dependency('gbm')
+dep_libdrm = dependency('libdrm', required : false)
+dep_gbm = dependency('gbm', required : false)
 dep_libpng = dependency('libpng')
-dep_wayland = dependency('wayland-client')
-dep_xcb = dependency('xcb')
+dep_wayland = dependency('wayland-client', required : false)
+dep_xcb = dependency('xcb', required : false)
+dep_directfb = dependency('directfb', required : false)
 dep_vulkan = dependency('vulkan')
 dep_m = cc.find_library('m', required : false)
 
-cc = meson.get_compiler('c')
 defs = []
-if cc.has_header('vulkan/vulkan_intel.h')
+if dep_libdrm.found() and dep_gbm.found() and cc.has_header('vulkan/vulkan_intel.h')
   defs += '-DHAVE_VULKAN_INTEL_H'
 endif
 
-# See https://github.com/google/shaderc
-prog_glslc = find_program('glslc', required : false)
+if dep_wayland.found()
+  defs += '-DENABLE_WAYLAND'
+  xdg_shell_protocol = 'xdg-shell-protocol.c'
+else
+  xdg_shell_protocol = []
+endif
+
+if dep_xcb.found()
+  defs += '-DENABLE_XCB'
+endif
+
+if dep_directfb.found()
+  defs += '-DENABLE_DIRECTFB'
+endif
+
+prog_glslang = find_program('glslangValidator', required : false)
 prog_cp = find_program('cp')
 
 vkcube_files = files(
-  'xdg-shell-protocol.c',
+  xdg_shell_protocol,
   'main.c',
   'common.h',
   'cube.c',
@@ -30,11 +44,11 @@
   'esUtil.h'
 )
 
-if prog_glslc.found()
+if prog_glslang.found()
   gen = generator(
-    prog_glslc,
+    prog_glslang,
     output : '@PLAINNAME@.spv.h',
-    arguments : [ '@INPUT@', '-mfmt=num', '-o', '@OUTPUT@' ]
+    arguments : [ '@INPUT@', '-V', '-x', '-o', '@OUTPUT@' ]
   )
 else
   gen = generator(
@@ -51,5 +65,5 @@
   c_args : [ defs, '-Wall',
             '-Werror=implicit-function-declaration',
 	    '-Werror=missing-prototypes'],
-  dependencies : [dep_libdrm, dep_gbm, dep_libpng, dep_wayland, dep_xcb, dep_vulkan, dep_m],
+  dependencies : [dep_libdrm, dep_gbm, dep_libpng, dep_wayland, dep_xcb, dep_directfb, dep_vulkan, dep_m],
 )
