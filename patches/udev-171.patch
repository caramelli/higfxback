# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

if pkg-config --exists glib-build; then
  GLIB=1
  REQUIRES="$REQUIRES glib-build"
else
  GUDEV=--disable-gudev
fi

if pkg-config --exists hwdata-build; then
  HWDATA=1
  REQUIRES="$REQUIRES hwdata-build"
else
  HWDB=--disable-hwdb
fi

# configure (ac-2.68; am-1.11; lt-2.4)
libtoolize -c -f; aclocal -I m4; autoconf; autoheader -f; automake -a -c
./configure $GUDEV $HWDB --disable-introspection --disable-keymap --disable-udev_acl --libexecdir=/lib/udev --sbindir=/bin --prefix=

# build
make

# install
install -d $DESTDIR/bin
install udev/mdevd $DESTDIR/bin
install udev/udevd $DESTDIR/bin
install udev/udevadm $DESTDIR/bin
ln -sf udevadm $DESTDIR/bin/mdev
install -d $DESTDIR/etc/udev
install -m 644 udev.conf $DESTDIR/etc/udev
install -d $DESTDIR/etc/udev/rules.d
cat > $DESTDIR/etc/udev/rules.d/udev.rules << EOF
SUBSYSTEM=="input", IMPORT{program}="input_id %p"
EOF
install -d $DESTDIR/include
install -m 644 libudev/libudev.h $DESTDIR/include
test $GLIB && install -d $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudev.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevclient.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevdevice.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevenumerator.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevenums.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevenumtypes.h $DESTDIR/include/gudev-1.0/gudev
test $GLIB && install -m 644 extras/gudev/gudevtypes.h $DESTDIR/include/gudev-1.0/gudev
install -d $DESTDIR/lib
test $GLIB && install extras/gudev/.libs/libgudev-1.0.so.0.* $DESTDIR/lib/libgudev-1.0.so.0
test $GLIB && ln -sf libgudev-1.0.so.0 $DESTDIR/lib/libgudev-1.0.so
install libudev/.libs/libudev.so.0.* $DESTDIR/lib/libudev.so.0
ln -sf libudev.so.0 $DESTDIR/lib/libudev.so
install -d $DESTDIR/lib/udev
install extras/ata_id/ata_id $DESTDIR/lib/udev
install extras/cdrom_id/cdrom_id $DESTDIR/lib/udev
install extras/collect/collect $DESTDIR/lib/udev
install extras/firmware/firmware $DESTDIR/lib/udev
install extras/input_id/input_id $DESTDIR/lib/udev
install extras/path_id/path_id $DESTDIR/lib/udev
install extras/scsi_id/scsi_id $DESTDIR/lib/udev
test $HWDATA && install extras/usb-db/pci-db $DESTDIR/lib/udev
test $HWDATA && install extras/usb-db/usb-db $DESTDIR/lib/udev
install extras/usb_id/usb_id $DESTDIR/lib/udev
install extras/v4l_id/v4l_id $DESTDIR/lib/udev
install -d $DESTDIR/lib/pkgconfig
test $GLIB && install -m 644 extras/gudev/gudev-1.0.pc $DESTDIR/lib/pkgconfig
install -m 644 libudev/libudev.pc $DESTDIR/lib/pkgconfig
install -m 644 udev/udev.pc $DESTDIR/lib/pkgconfig

# build.pc
install -d $DESTDIR/share/pkgconfig
cat > $DESTDIR/share/pkgconfig/udev-build.pc << EOF
Name: udev
Version: 171
Description: Userspace Device management
Requires: $REQUIRES

devel=\\
/include/libudev.h \\
EOF
test $GLIB && echo /include/gudev-1.0/gudev/gudev.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevclient.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevdevice.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevenumerator.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevenums.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevenumtypes.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /include/gudev-1.0/gudev/gudevtypes.h \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
test $GLIB && echo /lib/libgudev-1.0.so \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
cat >> $DESTDIR/share/pkgconfig/udev-build.pc << EOF
/lib/libudev.so \\
EOF
test $GLIB && echo /lib/pkgconfig/gudev-1.0.pc \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
cat >> $DESTDIR/share/pkgconfig/udev-build.pc << EOF
/lib/pkgconfig/libudev.pc \\
/lib/pkgconfig/udev.pc

exec=\\
/bin/mdevd \\
/bin/udevd \\
/bin/udevadm \\
/etc/udev/udev.conf \\
/etc/udev/rules.d/udev.rules \\
EOF
test $GLIB && echo /lib/libgudev-1.0.so.0 \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
cat >> $DESTDIR/share/pkgconfig/udev-build.pc << EOF
/lib/libudev.so.0 \\
/lib/udev/ata_id \\
/lib/udev/cdrom_id \\
/lib/udev/collect \\
/lib/udev/firmware \\
/lib/udev/input_id \\
/lib/udev/path_id \\
EOF
test $HWDATA && echo /lib/udev/pci-db \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
cat >> $DESTDIR/share/pkgconfig/udev-build.pc << EOF
/lib/udev/scsi_id \\
EOF
test $HWDATA && echo /lib/udev/usb-db \\ >> $DESTDIR/share/pkgconfig/udev-build.pc
cat >> $DESTDIR/share/pkgconfig/udev-build.pc << EOF
/lib/udev/usb_id \\
/lib/udev/v4l_id
EOF
test $GLIB && ln -sf udev-build.pc $DESTDIR/share/pkgconfig/gudev-build.pc
ln -sf udev-build.pc $DESTDIR/share/pkgconfig/libudev-build.pc
ln -sf udev-build.pc $DESTDIR/share/pkgconfig/udevd-build.pc

exit
--- udev-171.orig/Makefile.am
+++ udev-171/Makefile.am
@@ -125,8 +125,7 @@
 udevconfdir = $(sysconfdir)/udev
 dist_udevconf_DATA = udev.conf
 
-sharepkgconfigdir = $(datadir)/pkgconfig
-sharepkgconfig_DATA = udev/udev.pc
+pkgconfig_DATA += udev/udev.pc
 
 if WITH_SYSTEMD
 systemdsystemunit_DATA = \
--- udev-171.orig/configure.ac
+++ udev-171/configure.ac
@@ -87,20 +87,14 @@
 	AS_HELP_STRING([--disable-hwdb], [disable hardware database support]),
 	[], [enable_hwdb=yes])
 if test "x$enable_hwdb" = xyes; then
-	if test "x$cross_compiling" = "xno" ; then
-		AC_CHECK_FILES([/usr/share/pci.ids], [pciids=/usr/share/pci.ids])
-		AC_CHECK_FILES([/usr/share/hwdata/pci.ids], [pciids=/usr/share/hwdata/pci.ids])
-		AC_CHECK_FILES([/usr/share/misc/pci.ids], [pciids=/usr/share/misc/pci.ids])
-	fi
-
 	AC_ARG_WITH(usb-ids-path,
 		[AS_HELP_STRING([--with-usb-ids-path=DIR], [Path to usb.ids file])],
 		[USB_DATABASE=${withval}],
 		[if test -n "$usbids" ; then
 			USB_DATABASE="$usbids"
 		else
-			PKG_CHECK_MODULES(USBUTILS, usbutils >= 0.82)
-			AC_SUBST([USB_DATABASE], [$($PKG_CONFIG --variable=usbids usbutils)])
+			PKG_CHECK_MODULES(HWDATA, hwdata)
+			AC_SUBST([USB_DATABASE], [$($PKG_CONFIG --variable=pkgdatadir hwdata)/usb.ids])
 		fi])
 	AC_MSG_CHECKING([for USB database location])
 	AC_MSG_RESULT([$USB_DATABASE])
@@ -112,7 +106,8 @@
 		[if test -n "$pciids" ; then
 			PCI_DATABASE="$pciids"
 		else
-			AC_MSG_ERROR([pci.ids not found, try --with-pci-ids-path=])
+			PKG_CHECK_MODULES(HWDATA, hwdata)
+			AC_SUBST([PCI_DATABASE], [$($PKG_CONFIG --variable=pkgdatadir hwdata)/pci.ids])
 		fi])
 	AC_MSG_CHECKING([for PCI database location])
 	AC_MSG_RESULT([$PCI_DATABASE])
--- udev-171.orig/extras/mtd_probe/mtd_probe.h
+++ udev-171/extras/mtd_probe/mtd_probe.h
@@ -18,6 +18,7 @@
  */
 
 #include <mtd/mtd-user.h>
+#include <stdint.h>
 
 /* Full oob structure as written on the flash */
 struct sm_oob {
--- udev-171.orig/libudev/libudev-device.c
+++ udev-171/libudev/libudev-device.c
@@ -1644,7 +1644,7 @@
 	return udev_list_get_entry(&udev_device->tags_list);
 }
 
-int udev_device_has_tag(struct udev_device *udev_device, const char *tag)
+UDEV_EXPORT int udev_device_has_tag(struct udev_device *udev_device, const char *tag)
 {
 	struct udev_list_entry *list_entry;
 
--- udev-171.orig/libudev/libudev-enumerate.c
+++ udev-171/libudev/libudev-enumerate.c
@@ -52,6 +52,7 @@
 	struct udev_list_node sysname_match_list;
 	struct udev_list_node properties_match_list;
 	struct udev_list_node tags_match_list;
+	struct udev_device *parent_match;
 	struct udev_list_node devices_list;
 	struct syspath *devices;
 	unsigned int devices_cur;
@@ -125,6 +126,7 @@
 	udev_list_cleanup_entries(udev_enumerate->udev, &udev_enumerate->sysname_match_list);
 	udev_list_cleanup_entries(udev_enumerate->udev, &udev_enumerate->properties_match_list);
 	udev_list_cleanup_entries(udev_enumerate->udev, &udev_enumerate->tags_match_list);
+	udev_device_unref(udev_enumerate->parent_match);
 	udev_list_cleanup_entries(udev_enumerate->udev, &udev_enumerate->devices_list);
 	for (i = 0; i < udev_enumerate->devices_cur; i++)
 		free(udev_enumerate->devices[i].syspath);
@@ -460,6 +462,31 @@
 }
 
 /**
+ * udev_enumerate_add_match_parent:
+ * @udev_enumerate: context
+ * @parent: parent device where to start searching
+ *
+ * Return the devices on the subtree of one given device. The parent
+ * itself is included in the list.
+ *
+ * A reference for the device is held until the udev_enumerate context
+ * is cleaned up.
+ *
+ * Returns: 0 on success, otherwise a negative error value.
+ */
+UDEV_EXPORT int udev_enumerate_add_match_parent(struct udev_enumerate *udev_enumerate, struct udev_device *parent)
+{
+	if (udev_enumerate == NULL)
+		return -EINVAL;
+	if (parent == NULL)
+		return 0;
+	if (udev_enumerate->parent_match != NULL)
+		udev_device_unref(udev_enumerate->parent_match);
+	udev_enumerate->parent_match = udev_device_ref(parent);
+	return 0;
+}
+
+/**
  * udev_enumerate_add_match_is_initialized:
  * @udev_enumerate: context
  *
@@ -581,6 +608,17 @@
 	return true;
 }
 
+static bool match_parent(struct udev_enumerate *udev_enumerate, struct udev_device *dev)
+{
+	const char *parent;
+
+	if (udev_enumerate->parent_match == NULL)
+		return true;
+
+	parent = udev_device_get_devpath(udev_enumerate->parent_match);
+	return strncmp(parent, udev_device_get_devpath(dev), strlen(parent)) == 0;
+}
+
 static bool match_sysname(struct udev_enumerate *udev_enumerate, const char *sysname)
 {
 	struct udev_list_entry *list_entry;
@@ -645,6 +683,8 @@
 			    (major(udev_device_get_devnum(dev)) > 0 || udev_device_get_ifindex(dev) > 0))
 				goto nomatch;
 		}
+		if (!match_parent(udev_enumerate, dev))
+			goto nomatch;
 		if (!match_tag(udev_enumerate, dev))
 			goto nomatch;
 		if (!match_property(udev_enumerate, dev))
@@ -727,6 +767,65 @@
 	return 0;
 }
 
+static int parent_add_child(struct udev_enumerate *enumerate, const char *path)
+{
+	struct udev_device *dev;
+
+	dev = udev_device_new_from_syspath(enumerate->udev, path);
+	if (dev == NULL)
+		return -ENODEV;
+
+	if (!match_subsystem(enumerate, udev_device_get_subsystem(dev)))
+		return 0;
+	if (!match_sysname(enumerate, udev_device_get_sysname(dev)))
+		return 0;
+	if (!match_property(enumerate, dev))
+		return 0;
+	if (!match_sysattr(enumerate, dev))
+		return 0;
+
+	syspath_add(enumerate, udev_device_get_syspath(dev));
+	udev_device_unref(dev);
+	return 1;
+}
+
+static int parent_crawl_children(struct udev_enumerate *enumerate, const char *path, int maxdepth)
+{
+	DIR *d;
+	struct dirent *dent;
+
+	d = opendir(path);
+	if (d == NULL)
+		return -errno;
+
+	for (dent = readdir(d); dent != NULL; dent = readdir(d)) {
+		char *child;
+
+		if (dent->d_name[0] == '.')
+			continue;
+		if (dent->d_type != DT_DIR)
+			continue;
+		if (asprintf(&child, "%s/%s", path, dent->d_name) < 0)
+			continue;
+		parent_add_child(enumerate, child);
+		if (maxdepth > 0)
+			parent_crawl_children(enumerate, child, maxdepth-1);
+		free(child);
+	}
+
+	closedir(d);
+	return 0;
+}
+
+static int scan_devices_children(struct udev_enumerate *enumerate)
+{
+	const char *path;
+
+	path = udev_device_get_syspath(enumerate->parent_match);
+	parent_add_child(enumerate, path);
+	return parent_crawl_children(enumerate, path, 256);
+}
+
 /**
  * udev_enumerate_scan_devices:
  * @udev_enumerate: udev enumeration context
@@ -770,6 +869,8 @@
 					goto nomatch;
 				if (!match_sysname(udev_enumerate, udev_device_get_sysname(dev)))
 					goto nomatch;
+				if (!match_parent(udev_enumerate, dev))
+					goto nomatch;
 				if (!match_property(udev_enumerate, dev))
 					goto nomatch;
 				if (!match_sysattr(udev_enumerate, dev))
@@ -781,6 +882,8 @@
 			}
 			closedir(dir);
 		}
+	} else if (udev_enumerate->parent_match != NULL) {
+		scan_devices_children(udev_enumerate);
 	} else {
 		util_strscpyl(base, sizeof(base), udev_get_sys_path(udev), "/subsystem", NULL);
 		if (stat(base, &statbuf) == 0) {
@@ -788,7 +891,7 @@
 			dbg(udev, "searching '/subsystem/*/devices/*' dir\n");
 			scan_dir(udev_enumerate, "subsystem", "devices", NULL);
 		} else {
-		dbg(udev, "searching '/bus/*/devices/*' dir\n");
+			dbg(udev, "searching '/bus/*/devices/*' dir\n");
 			scan_dir(udev_enumerate, "bus", "devices", NULL);
 			dbg(udev, "searching '/class/*' dir\n");
 			scan_dir(udev_enumerate, "class", NULL, NULL);
--- udev-171.orig/libudev/libudev-private.h
+++ udev-171/libudev/libudev-private.h
@@ -90,7 +90,6 @@
 void udev_device_set_is_initialized(struct udev_device *udev_device);
 int udev_device_add_tag(struct udev_device *udev_device, const char *tag);
 void udev_device_cleanup_tags_list(struct udev_device *udev_device);
-int udev_device_has_tag(struct udev_device *udev_device, const char *tag);
 int udev_device_get_timeout(struct udev_device *udev_device);
 unsigned long long udev_device_get_usec_initialized(struct udev_device *udev_device);
 void udev_device_set_usec_initialized(struct udev_device *udev_device, unsigned long long usec_initialized);
@@ -218,7 +217,6 @@
 size_t util_strscpyl(char *dest, size_t size, const char *src, ...) __attribute__((sentinel));
 int udev_util_replace_whitespace(const char *str, char *to, size_t len);
 int udev_util_replace_chars(char *str, const char *white);
-int udev_util_encode_string(const char *str, char *str_enc, size_t len);
 unsigned int util_string_hash32(const char *key);
 uint64_t util_string_bloom64(const char *str);
 
--- udev-171.orig/libudev/libudev-util.c
+++ udev-171/libudev/libudev-util.c
@@ -446,7 +446,7 @@
  *
  * Returns: 0 if the entire string was copied, non-zero otherwise.
  **/
-int udev_util_encode_string(const char *str, char *str_enc, size_t len)
+UDEV_EXPORT int udev_util_encode_string(const char *str, char *str_enc, size_t len)
 {
 	size_t i, j;
 
--- udev-171.orig/libudev/libudev.h
+++ udev-171/libudev/libudev.h
@@ -101,6 +101,7 @@
 unsigned long long int udev_device_get_seqnum(struct udev_device *udev_device);
 unsigned long long int udev_device_get_usec_since_initialized(struct udev_device *udev_device);
 const char *udev_device_get_sysattr_value(struct udev_device *udev_device, const char *sysattr);
+int udev_device_has_tag(struct udev_device *udev_device, const char *tag);
 
 /*
  * udev_monitor
@@ -145,6 +146,7 @@
 int udev_enumerate_add_match_property(struct udev_enumerate *udev_enumerate, const char *property, const char *value);
 int udev_enumerate_add_match_sysname(struct udev_enumerate *udev_enumerate, const char *sysname);
 int udev_enumerate_add_match_tag(struct udev_enumerate *udev_enumerate, const char *tag);
+int udev_enumerate_add_match_parent(struct udev_enumerate *udev_enumerate, struct udev_device *parent);
 int udev_enumerate_add_match_is_initialized(struct udev_enumerate *udev_enumerate);
 int udev_enumerate_add_syspath(struct udev_enumerate *udev_enumerate, const char *syspath);
 /* run enumeration with active filters */
@@ -173,6 +175,13 @@
 struct udev_list_entry *udev_queue_get_queued_list_entry(struct udev_queue *udev_queue);
 struct udev_list_entry *udev_queue_get_failed_list_entry(struct udev_queue *udev_queue);
 
+/*
+ * udev_util
+ *
+ * udev specific utilities
+ */
+int udev_util_encode_string(const char *str, char *str_enc, size_t len);
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif
--- udev-171.orig/udev/mdevd
+++ udev-171/udev/mdevd
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+exec udevd -d
--- udev-171.orig/udev/udevadm-trigger.c
+++ udev-171/udev/udevadm-trigger.c
@@ -103,6 +103,7 @@
 		{ "property-match", required_argument, NULL, 'p' },
 		{ "tag-match", required_argument, NULL, 'g' },
 		{ "sysname-match", required_argument, NULL, 'y' },
+		{ "parent-match", required_argument, NULL, 'b' },
 		{ "help", no_argument, NULL, 'h' },
 		{}
 	};
@@ -128,7 +129,7 @@
 		const char *val;
 		char buf[UTIL_PATH_SIZE];
 
-		option = getopt_long(argc, argv, "vng:o:t:hc:p:s:S:a:A:y:", options, NULL);
+		option = getopt_long(argc, argv, "vng:o:t:hc:p:s:S:a:A:y:b:", options, NULL);
 		if (option == -1)
 			break;
 
@@ -179,6 +180,27 @@
 		case 'y':
 			udev_enumerate_add_match_sysname(udev_enumerate, optarg);
 			break;
+		case 'b': {
+			char path[UTIL_PATH_SIZE];
+			struct udev_device *dev;
+
+			/* add sys dir if needed */
+			if (strncmp(optarg, udev_get_sys_path(udev), strlen(udev_get_sys_path(udev))) != 0)
+				util_strscpyl(path, sizeof(path), udev_get_sys_path(udev), optarg, NULL);
+			else
+				util_strscpy(path, sizeof(path), optarg);
+			util_remove_trailing_chars(path, '/');
+			dev = udev_device_new_from_syspath(udev, path);
+			if (dev == NULL) {
+				err(udev, "unable to open the device '%s'\n", optarg);
+				rc = 2;
+				goto exit;
+			}
+			udev_enumerate_add_match_parent(udev_enumerate, dev);
+			/* drop reference immediately, enumerate pins the device as long as needed */
+			udev_device_unref(dev);
+			break;
+		}
 		case 'h':
 			printf("Usage: udevadm trigger OPTIONS\n"
 			       "  --verbose                       print the list of devices while running\n"
@@ -196,9 +218,11 @@
 			       "  --property-match=<key>=<value>  trigger devices with a matching property\n"
 			       "  --tag-match=<key>=<value>       trigger devices with a matching property\n"
 			       "  --sysname-match=<name>          trigger devices with a matching name\n"
+			       "  --parent-match=<name>           trigger devices with that parent device\n"
 			       "  --help\n\n");
 			goto exit;
 		default:
+			rc = 1;
 			goto exit;
 		}
 	}
--- udev-171.orig/udev/udevadm.c
+++ udev-171/udev/udevadm.c
@@ -63,7 +63,7 @@
 {
 	const struct command *cmd;
 
-	printf("Usage: udevadm [--help] [--version] [--debug] COMMAND [COMMAND OPTIONS]\n");
+	printf("Usage: udevadm [--help] [--version] [--debug] [--scan] COMMAND [COMMAND OPTIONS]\n");
 	for (cmd = cmds; cmd->name != NULL; cmd++)
 		if (cmd->help != NULL)
 			printf("  %-12s %s\n", cmd->name, cmd->help);
@@ -131,6 +131,7 @@
 	static const struct option options[] = {
 		{ "debug", no_argument, NULL, 'd' },
 		{ "help", no_argument, NULL, 'h' },
+		{ "scan", no_argument, NULL, 's' },
 		{ "version", no_argument, NULL, 'V' },
 		{}
 	};
@@ -149,7 +150,7 @@
 	for (;;) {
 		int option;
 
-		option = getopt_long(argc, argv, "+dhV", options, NULL);
+		option = getopt_long(argc, argv, "+dhsV", options, NULL);
 		if (option == -1)
 			break;
 
@@ -162,6 +163,9 @@
 		case 'h':
 			rc = help(udev, argc, argv);
 			goto out;
+		case 's':
+			rc = run_command(udev, &cmds[1], argc, argv);
+			goto out;
 		case 'V':
 			rc = version(udev, argc, argv);
 			goto out;
