# This file is part of HiGFXback

# requires
REQUIRES="make-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

# build
make -C tests

# install
install -d $DESTDIR/bin
install tests/image_write_test $DESTDIR/bin
install -d $DESTDIR/include/stb
install -m 644 stb.h $DESTDIR/include/stb
install -m 644 stb_image.h $DESTDIR/include/stb
install -m 644 stb_image_resize.h $DESTDIR/include/stb
install -m 644 stb_image_write.h $DESTDIR/include/stb
install -m 644 stb_perlin.h $DESTDIR/include/stb
install -m 644 stb_rect_pack.h $DESTDIR/include/stb
install -m 644 stb_textedit.h $DESTDIR/include/stb
install -m 644 stb_truetype.h $DESTDIR/include/stb

# build.pc
install -d $DESTDIR/share/pkgconfig
cat > $DESTDIR/share/pkgconfig/stb-build.pc << EOF
Name: stb
Version: 20200214
Description: single-file media processing and rendering libraries

devel=\\
/include/stb/stb.h \\
/include/stb/stb_image.h \\
/include/stb/stb_image_resize.h \\
/include/stb/stb_image_write.h \\
/include/stb/stb_perlin.h \\
/include/stb/stb_rect_pack.h \\
/include/stb/stb_textedit.h \\
/include/stb/stb_truetype.h

exec=\\
/bin/image_write_test
EOF

exit
--- stb-20200214.orig/stb_image.h
+++ stb-20200214/stb_image.h
@@ -6777,6 +6777,65 @@
 {
    return stbi__gif_info_raw(s,x,y,comp);
 }
+
+STBIDEF stbi_uc *stbi_xload(char const *filename, int *x, int *y, int *comp, int req_comp, int *frames)
+{
+   stbi_uc *result = 0;
+   stbi__context s;
+   FILE *f = stbi__fopen(filename, "rb");
+   if (!f) return stbi__errpuc("can't fopen", "Unable to open file");
+   stbi__start_file(&s, f);
+
+   if (stbi__gif_test(&s)) {
+      int layers = 0;
+      stbi_uc *u = 0;
+      stbi_uc *out = 0;
+      stbi_uc *pos = 0;
+      stbi_uc *two_back = 0;
+      stbi__gif g = { 0 };
+      int stride;
+
+      do {
+         u = stbi__gif_load_next(&s, &g, comp, req_comp, two_back);
+         if (u == (stbi_uc *)&s) u = 0;  // end of animated gif marker
+
+         if (u) {
+            *x = g.w;
+            *y = g.h;
+            stride = g.w * g.h * 4;
+
+            ++layers;
+
+            out = (stbi_uc*) STBI_REALLOC(out, layers * (stride+2));
+
+            pos = out + ((layers-1) * (stride+2));
+            memcpy( pos, u, stride );
+            pos += stride;
+            *pos++ = g.delay & 0xFF;
+            *pos++ = (g.delay & 0xFF00) >> 8;
+
+            if (layers >= 2) {
+               two_back = pos - 2 * (stride+2);
+            }
+         }
+      } while (u != 0);
+
+      // free temp buffer;
+      STBI_FREE(g.out);
+      STBI_FREE(g.history);
+      STBI_FREE(g.background);
+
+      *frames = layers;
+      result = out;
+   } else {
+      stbi__result_info ri;
+      result = (stbi_uc*)stbi__load_main(&s, x, y, comp, req_comp, &ri, 8);
+      *frames = !!result;
+   }
+
+   fclose(f);
+   return result;
+}
 #endif
 
 // *************************************************************************************************
--- stb-20200214.orig/stb_textedit.h
+++ stb-20200214/stb_textedit.h
@@ -142,6 +142,8 @@
 //    STB_TEXTEDIT_K_RIGHT       keyboard input to move cursor right
 //    STB_TEXTEDIT_K_UP          keyboard input to move cursor up
 //    STB_TEXTEDIT_K_DOWN        keyboard input to move cursor down
+//    STB_TEXTEDIT_K_PGUP        keyboard input to move cursor up a page
+//    STB_TEXTEDIT_K_PGDOWN      keyboard input to move cursor down a page
 //    STB_TEXTEDIT_K_LINESTART   keyboard input to move cursor to start of line  // e.g. HOME
 //    STB_TEXTEDIT_K_LINEEND     keyboard input to move cursor to end of line    // e.g. END
 //    STB_TEXTEDIT_K_TEXTSTART   keyboard input to move cursor to start of text  // e.g. ctrl-HOME
@@ -164,10 +166,6 @@
 //    STB_TEXTEDIT_K_TEXTSTART2          secondary keyboard input to move cursor to start of text
 //    STB_TEXTEDIT_K_TEXTEND2            secondary keyboard input to move cursor to end of text
 //
-// Todo:
-//    STB_TEXTEDIT_K_PGUP        keyboard input to move cursor up a page
-//    STB_TEXTEDIT_K_PGDOWN      keyboard input to move cursor down a page
-//
 // Keyboard input must be encoded as a single integer value; e.g. a character code
 // and some bitflags that represent shift states. to simplify the interface, SHIFT must
 // be a bitflag, so we can test the shifted state of cursor movements to allow selection,
@@ -331,6 +329,10 @@
    // each textfield keeps its own insert mode state. to keep an app-wide
    // insert mode, copy this value in/out of the app state
 
+   int row_count_per_page;
+   // page size in number of row.
+   // this value MUST be set to >0 for pageup or pagedown in multilines documents.
+
    /////////////////////
    //
    // private data
@@ -849,12 +851,16 @@
          break;
 
       case STB_TEXTEDIT_K_DOWN:
-      case STB_TEXTEDIT_K_DOWN | STB_TEXTEDIT_K_SHIFT: {
+      case STB_TEXTEDIT_K_DOWN | STB_TEXTEDIT_K_SHIFT:
+      case STB_TEXTEDIT_K_PGDOWN:
+      case STB_TEXTEDIT_K_PGDOWN | STB_TEXTEDIT_K_SHIFT: {
          StbFindState find;
          StbTexteditRow row;
-         int i, sel = (key & STB_TEXTEDIT_K_SHIFT) != 0;
+         int i, j, sel = (key & STB_TEXTEDIT_K_SHIFT) != 0;
+         int is_page = (key & ~STB_TEXTEDIT_K_SHIFT) == STB_TEXTEDIT_K_PGDOWN;
+         int row_count = is_page ? state->row_count_per_page : 1;
 
-         if (state->single_line) {
+         if (!is_page && state->single_line) {
             // on windows, up&down in single-line behave like left&right
             key = STB_TEXTEDIT_K_RIGHT | (key & STB_TEXTEDIT_K_SHIFT);
             goto retry;
@@ -863,17 +869,20 @@
          if (sel)
             stb_textedit_prep_selection_at_cursor(state);
          else if (STB_TEXT_HAS_SELECTION(state))
-            stb_textedit_move_to_last(str,state);
+            stb_textedit_move_to_last(str, state);
 
          // compute current position of cursor point
          stb_textedit_clamp(str, state);
          stb_textedit_find_charpos(&find, str, state->cursor, state->single_line);
 
-         // now find character position down a row
-         if (find.length) {
-            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
-            float x;
+         for (j = 0; j < row_count; ++j) {
+            float x, goal_x = state->has_preferred_x ? state->preferred_x : find.x;
             int start = find.first_char + find.length;
+
+            if (find.length == 0)
+               break;
+
+            // now find character position down a row
             state->cursor = start;
             STB_TEXTEDIT_LAYOUTROW(&row, str, state->cursor);
             x = row.x0;
@@ -895,17 +904,25 @@
 
             if (sel)
                state->select_end = state->cursor;
+
+            // go to next line
+            find.first_char = find.first_char + find.length;
+            find.length = row.num_chars;
          }
          break;
       }
 
       case STB_TEXTEDIT_K_UP:
-      case STB_TEXTEDIT_K_UP | STB_TEXTEDIT_K_SHIFT: {
+      case STB_TEXTEDIT_K_UP | STB_TEXTEDIT_K_SHIFT:
+      case STB_TEXTEDIT_K_PGUP:
+      case STB_TEXTEDIT_K_PGUP | STB_TEXTEDIT_K_SHIFT: {
          StbFindState find;
          StbTexteditRow row;
-         int i, sel = (key & STB_TEXTEDIT_K_SHIFT) != 0;
+         int i, j, prev_scan, sel = (key & STB_TEXTEDIT_K_SHIFT) != 0;
+         int is_page = (key & ~STB_TEXTEDIT_K_SHIFT) == STB_TEXTEDIT_K_PGUP;
+         int row_count = is_page ? state->row_count_per_page : 1;
 
-         if (state->single_line) {
+         if (!is_page && state->single_line) {
             // on windows, up&down become left&right
             key = STB_TEXTEDIT_K_LEFT | (key & STB_TEXTEDIT_K_SHIFT);
             goto retry;
@@ -920,11 +937,14 @@
          stb_textedit_clamp(str, state);
          stb_textedit_find_charpos(&find, str, state->cursor, state->single_line);
 
-         // can only go up if there's a previous row
-         if (find.prev_first != find.first_char) {
+         for (j = 0; j < row_count; ++j) {
+            float  x, goal_x = state->has_preferred_x ? state->preferred_x : find.x;
+
+            // can only go up if there's a previous row
+            if (find.prev_first == find.first_char)
+               break;
+
             // now find character position up a row
-            float goal_x = state->has_preferred_x ? state->preferred_x : find.x;
-            float x;
             state->cursor = find.prev_first;
             STB_TEXTEDIT_LAYOUTROW(&row, str, state->cursor);
             x = row.x0;
@@ -946,6 +966,14 @@
 
             if (sel)
                state->select_end = state->cursor;
+
+            // go to previous line
+            // (we need to scan previous line the hard way. maybe we could expose this as a new API function?)
+            prev_scan = find.prev_first > 0 ? find.prev_first - 1 : 0;
+            while (prev_scan > 0 && STB_TEXTEDIT_GETCHAR(str, prev_scan - 1) != STB_TEXTEDIT_NEWLINE)
+               --prev_scan;
+            find.first_char = find.prev_first;
+            find.prev_first = prev_scan;
          }
          break;
       }
@@ -1069,10 +1097,6 @@
          state->has_preferred_x = 0;
          break;
       }
-
-// @TODO:
-//    STB_TEXTEDIT_K_PGUP      - move cursor up a page
-//    STB_TEXTEDIT_K_PGDOWN    - move cursor down a page
    }
 }
 
@@ -1337,6 +1361,7 @@
    state->initialized = 1;
    state->single_line = (unsigned char) is_single_line;
    state->insert_mode = 0;
+   state->row_count_per_page = 0;
 }
 
 // API initialize
