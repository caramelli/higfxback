# This file is part of HiGFXback

# requires
REQUIRES="egl-opengl-stubs-build libpng-build meson-build tiff-build wayland-build"

PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
PKG_CONFIG_PATH=/wl/lib/pkgconfig meson setup -Degl-fbdev=false -Dgl=false -Dglesv1_cm=false --prefix=/wl build

# build
meson compile -C build

# install
install -d $DESTDIR/wl/bin
install build/yagears2 $DESTDIR/wl/bin

# build.pc
install -d $DESTDIR/wl/share/pkgconfig
cat > $DESTDIR/wl/share/pkgconfig/yagears2-build.pc << EOF
Name: yagears
Version: 2.6
Description: Yet Another Gears OpenGL / Vulkan demo
Requires: $REQUIRES

exec=\\
/wl/bin/yagears2
EOF

exit
--- yagears-2.6.orig/CMakeLists.txt
+++ yagears-2.6/CMakeLists.txt
@@ -62,12 +62,12 @@
   pkg_check_modules(GL gl)
   if(GL_FOUND)
     if(ENABLE_GLESV1_CM)
-      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
     endif()
     if(ENABLE_GLESV2)
       find_program(XXD xxd)
       if(XXD)
-        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
       else()
         set(ENABLE_GLESV2 OFF)
       endif()
@@ -84,7 +84,7 @@
   if(ENABLE_GLESV1_CM)
     pkg_check_modules(GLESV1_CM glesv1_cm)
     if(GLESV1_CM_FOUND)
-      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so")
+      list(APPEND GLESV1_CM_CFLAGS -DGLESV1_CM_H=<GLES/gl.h> -DGLESV1_CM_LIB="libGLESv1_CM.so.1")
       set(GLESV1_CM_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV1_CM OFF)
@@ -95,7 +95,7 @@
     pkg_check_modules(GLESV2 glesv2)
     find_program(XXD xxd)
     if(GLESV2_FOUND AND XXD)
-      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so")
+      list(APPEND GLESV2_CFLAGS -DGLESV2_H=<GLES2/gl2.h> -DGLESV2_LIB="libGLESv2.so.2")
       set(GLESV2_LDFLAGS -ldl)
     else()
       set(ENABLE_GLESV2 OFF)
@@ -104,7 +104,7 @@
 endif()
 
 if(NOT ENABLE_GL AND NOT ENABLE_GLESV1_CM AND NOT ENABLE_GLESV2)
-  message(FATAL_ERROR "No OpenGL Engines found")
+  message(WARNING "No OpenGL Engines found")
 endif()
 
 # OpenGL Backends
@@ -263,7 +263,7 @@
 set(WAFFLE ${ENABLE_WAFFLE})
 
 if(NOT ENABLE_GL_X11 AND NOT ENABLE_GL_DIRECTFB AND NOT ENABLE_GL_FBDEV AND NOT ENABLE_EGL_X11 AND NOT ENABLE_EGL_DIRECTFB AND NOT ENABLE_EGL_FBDEV AND NOT ENABLE_EGL_WAYLAND AND NOT ENABLE_EGL_XCB AND NOT ENABLE_EGL_DRM AND NOT ENABLE_EGL_RPI AND NOT ENABLE_WAFFLE)
-  message(FATAL_ERROR "No OpenGL Backends found")
+  message(WARNING "No OpenGL Backends found")
 endif()
 
 # Vulkan WSIs
--- yagears-2.6.orig/configure.ac
+++ yagears-2.6/configure.ac
@@ -131,12 +131,12 @@
   PKG_CHECK_MODULES(GL, gl, , enable_gl=no)
   if test x$enable_gl = xyes; then
     if test x$enable_glesv1_cm = xyes; then
-      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
     fi
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
       else
         enable_glesv2=no
       fi
@@ -151,7 +151,7 @@
   if test x$enable_glesv1_cm = xyes; then
     PKG_CHECK_MODULES(GLESV1_CM, glesv1_cm, , enable_glesv1_cm=no)
     if test x$enable_glesv1_cm = xyes; then
-      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so\\\""
+      GLESV1_CM_CFLAGS="$GLESV1_CM_CFLAGS -DGLESV1_CM_H=\<GLES/gl.h\> -DGLESV1_CM_LIB=\\\"libGLESv1_CM.so.1\\\""
       GLESV1_CM_LIBS=-ldl
     fi
   fi
@@ -161,7 +161,7 @@
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so\\\""
+        GLESV2_CFLAGS="$GLESV2_CFLAGS -DGLESV2_H=\<GLES2/gl2.h\> -DGLESV2_LIB=\\\"libGLESv2.so.2\\\""
         GLESV2_LIBS=-ldl
       else
         enable_glesv2=no
@@ -171,7 +171,7 @@
 fi
 
 if test x$enable_gl = xno -a x$enable_glesv1_cm = xno -a x$enable_glesv2 = xno; then
-  AC_MSG_ERROR(No OpenGL Engines found)
+  AC_MSG_WARN(No OpenGL Engines found)
 fi
 
 # OpenGL Backends
@@ -320,7 +320,7 @@
 fi
 
 if test x$enable_gl_x11 = xno -a x$enable_gl_directfb = xno -a x$enable_gl_fbdev = xno -a x$enable_egl_x11 = xno -a x$enable_egl_directfb = xno -a x$enable_egl_fbdev = xno -a x$enable_egl_wayland = xno -a x$enable_egl_xcb = xno -a x$enable_egl_drm = xno -a x$enable_egl_rpi = xno -a x$enable_waffle = xno; then
-  AC_MSG_ERROR(No OpenGL Backends found)
+  AC_MSG_WARN(No OpenGL Backends found)
 fi
 
 # Vulkan WSIs
--- yagears-2.6.orig/main.c
+++ yagears-2.6/main.c
@@ -1402,7 +1402,7 @@
   #if defined(EGL_X11)
   if (!strcmp(backend, "egl-x11")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_X11_EXT)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_X11_EXT, x11_dpy, NULL);
     }
     else
@@ -1416,7 +1416,7 @@
   #if defined(EGL_DIRECTFB)
   if (!strcmp(backend, "egl-directfb")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_DIRECTFB_EXT)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_DIRECTFB_EXT, dfb_dpy, NULL);
     }
     else
@@ -1430,7 +1430,7 @@
   #if defined(EGL_FBDEV)
   if (!strcmp(backend, "egl-fbdev")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_FBDEV_EXT)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_FBDEV_EXT, &fb_dpy, NULL);
     }
     else
@@ -1444,7 +1444,7 @@
   #if defined(EGL_WAYLAND)
   if (!strcmp(backend, "egl-wayland")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_WAYLAND_EXT)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_WAYLAND_EXT, wl_dpy, NULL);
     }
     else
@@ -1458,7 +1458,7 @@
   #if defined(EGL_XCB)
   if (!strcmp(backend, "egl-xcb")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_XCB_EXT)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_XCB_EXT, xcb_dpy, NULL);
     }
     else
@@ -1472,7 +1472,7 @@
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_GBM_KHR)
-    if (eglGetPlatformDisplayEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglGetPlatformDisplayEXT) {
       egl_dpy = eglGetPlatformDisplayEXT(EGL_PLATFORM_GBM_KHR, drm_dpy, NULL);
     }
     else
@@ -1885,7 +1885,7 @@
   #if defined(EGL_X11)
   if (!strcmp(backend, "egl-x11")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_X11_EXT)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, &x11_win, NULL);
     }
     else
@@ -1898,7 +1898,7 @@
   #if defined(EGL_DIRECTFB)
   if (!strcmp(backend, "egl-directfb")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_DIRECTFB_EXT)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, dfb_win, NULL);
     }
     else
@@ -1911,7 +1911,7 @@
   #if defined(EGL_FBDEV)
   if (!strcmp(backend, "egl-fbdev")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_FBDEV_EXT)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, fb_win, NULL);
     }
     else
@@ -1924,7 +1924,7 @@
   #if defined(EGL_WAYLAND)
   if (!strcmp(backend, "egl-wayland")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_WAYLAND_EXT)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, wl_win, NULL);
     }
     else
@@ -1937,7 +1937,7 @@
   #if defined(EGL_XCB)
   if (!strcmp(backend, "egl-xcb")) {
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_XCB_EXT)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, &xcb_win, NULL);
     }
     else
@@ -1949,9 +1949,8 @@
   #endif
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
-    egl_win = eglCreateWindowSurface(egl_dpy, egl_config, (EGLNativeWindowType)drm_win, NULL);
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_GBM_KHR)
-    if (eglCreatePlatformWindowSurfaceEXT) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, drm_win, NULL);
     }
     else
--- yagears-2.6.orig/meson.build
+++ yagears-2.6/meson.build
@@ -56,12 +56,12 @@
   gl_dep = dependency('gl', required: false)
   if gl_dep.found()
     if enable_glesv1_cm
-      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
     endif
     if enable_glesv2
       xxd = find_program('xxd', required: false)
       if xxd.found()
-        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
       else
         enable_glesv2 = false
       endif
@@ -80,8 +80,8 @@
   if enable_glesv1_cm
     glesv1_cm_dep = dependency('glesv1_cm', required: false)
     if glesv1_cm_dep.found()
-      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm').stdout().strip().split(' '))
-      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
+      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm', check: true).stdout().strip().split(' '))
+      glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so.1"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
     else
       enable_glesv1_cm = false
     endif
@@ -91,8 +91,8 @@
     glesv2_dep = dependency('glesv2', required: false)
     xxd = find_program('xxd', required: false)
     if glesv2_dep.found() and xxd.found()
-      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2').stdout().strip().split(' '))
-      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so"'], link_args: '-ldl', dependencies: glesv2_dep)
+      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2', check: true).stdout().strip().split(' '))
+      glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so.2"'], link_args: '-ldl', dependencies: glesv2_dep)
     else
       enable_glesv2 = false
     endif
@@ -100,7 +100,7 @@
 endif
 
 if not enable_gl and not enable_glesv1_cm and not enable_glesv2
-  error('No OpenGL Engines found')
+  warning('No OpenGL Engines found')
 endif
 
 # OpenGL Backends
@@ -109,7 +109,7 @@
 directfb_dep = []
 if enable_gl
   if enable_gl_x11
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if cc.has_function('glXCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       x11_dep = dependency('x11', required: false)
       if not x11_dep.found()
@@ -122,8 +122,8 @@
 
   if enable_gl_directfb
     message('Checking for DirectFBGL module')
-    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal').stdout().strip()
-    if run_command('test', '-d', moduledir + '/interfaces/IDirectFBGL').returncode() == 0
+    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal', check: false).stdout().strip()
+    if import('fs').is_dir(moduledir + '/interfaces/IDirectFBGL')
       message('DirectFBGL found')
       directfb_dep = dependency('directfb', required: false)
       if not directfb_dep.found()
@@ -136,7 +136,7 @@
   endif
 
   if enable_gl_fbdev
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if not cc.has_function('glFBDevCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       enable_gl_fbdev = false
     endif
@@ -204,7 +204,7 @@
           config_h.set('HAVE_WL_SHELL_SURFACE_SET_POSITION', false, description: 'Have function wl_shell_surface_set_position')
         endif
 
-        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client').stdout().strip())]
+        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client', check: true).stdout().strip())]
       endif
     endif
 
@@ -223,8 +223,8 @@
         endif
       endforeach
       if enable_egl_drm
-        dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri').stdout().strip()
-        modversion = run_command('pkg-config', '--modversion', 'dri')
+        dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri', check: true).stdout().strip()
+        modversion = run_command('pkg-config', '--modversion', 'dri', check: true)
         drimajorversion = modversion.stdout().split('.')[0]
         driminorversion = modversion.stdout().split('.')[1]
         drm_dep = declare_dependency(compile_args: ['-DDRI_DRIVERDIR="@0@"'.format(dridriverdir), '-DDRI_MAJOR_VERSION=@0@'.format(drimajorversion), '-DDRI_MINOR_VERSION=@0@'.format(driminorversion)], link_args: '-ldl', dependencies: drm_dep)
@@ -269,7 +269,7 @@
 config_h.set('WAFFLE', enable_waffle, description: 'Support for Waffle cross-platform wrapper')
 
 if not enable_gl_x11 and not enable_gl_directfb and not enable_gl_fbdev and not enable_egl_x11 and not enable_egl_directfb and not enable_egl_fbdev and not enable_egl_wayland and not enable_egl_xcb and not enable_egl_drm and not enable_egl_rpi and not enable_waffle
-  error('No OpenGL Backends found')
+  warning('No OpenGL Backends found')
 endif
 
 # Vulkan WSIs
@@ -280,7 +280,7 @@
   vulkan_dep = dependency('vulkan', required: false)
   glslang_validator = find_program('glslangValidator', required: false)
   if vulkan_dep.found() and glslang_validator.found()
-    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan', check: true).stdout().strip()
 
     if enable_vk_x11
       if cc.has_function('vkCreateXlibSurfaceKHR', dependencies: cc.find_library('vulkan', dirs: libdir))
@@ -405,7 +405,7 @@
 if enable_fltk
   fltk_config = find_program('fltk-config', required: false)
   if fltk_config.found()
-    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags').stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags').stdout().strip().split(' '))
+    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags', check: true).stdout().strip().split(' '))
   else
     enable_fltk = false
   endif
@@ -522,7 +522,7 @@
 if enable_wx
   wx_config = find_program('wx-config', required: false)
   if wx_config.found()
-    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags').stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl').stdout().strip().split(' '))
+    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl', check: true).stdout().strip().split(' '))
   else
     enable_wx = false
   endif
@@ -701,7 +701,7 @@
 
 if VK_GUI
 executable('yagears2-vk-gui',
-           'vk-gui.cc', 'vulkan_gears.c', 'image_loader.c', png_source, tiff_source,
+           'vk-gui.cc', 'vulkan_gears.c', vert_spv_file, frag_spv_file, 'image_loader.c', png_source, tiff_source,
            dependencies: [vulkan_dep, png_dep, tiff_dep, glfw_dep, sdl_dep],
            install: true)
 endif
