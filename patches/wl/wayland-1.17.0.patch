# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build expat-build libffi-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

# configure (ac-2.69; am-1.15; lt-2.4.6)
libtoolize -c -f; aclocal; autoheader; autoconf; automake -a -c
./configure --disable-documentation --disable-dtd-validation --disable-static --prefix=/wl

# build
make

# install
install -d $DESTDIR/wl/bin
install wayland-scanner $DESTDIR/wl/bin
install -d $DESTDIR/wl/include
install -m 644 cursor/wayland-cursor.h $DESTDIR/wl/include
install -m 644 egl/wayland-egl.h $DESTDIR/wl/include
install -m 644 egl/wayland-egl-core.h $DESTDIR/wl/include
install -m 644 protocol/wayland-client-protocol.h $DESTDIR/wl/include
install -m 644 protocol/wayland-server-protocol.h $DESTDIR/wl/include
install -m 644 src/wayland-client.h $DESTDIR/wl/include
install -m 644 src/wayland-client-core.h $DESTDIR/wl/include
install -m 644 src/wayland-server.h $DESTDIR/wl/include
install -m 644 src/wayland-server-core.h $DESTDIR/wl/include
install -m 644 src/wayland-util.h $DESTDIR/wl/include
install -m 644 src/wayland-version.h $DESTDIR/wl/include
install -d $DESTDIR/wl/lib
install .libs/libwayland-client.so.0.* $DESTDIR/wl/lib/libwayland-client.so.0
ln -sf libwayland-client.so.0 $DESTDIR/wl/lib/libwayland-client.so
install .libs/libwayland-cursor.so.0.* $DESTDIR/wl/lib/libwayland-cursor.so.0
ln -sf libwayland-cursor.so.0 $DESTDIR/wl/lib/libwayland-cursor.so
install .libs/libwayland-egl.so.1.* $DESTDIR/wl/lib/libwayland-egl.so.1
ln -sf libwayland-egl.so.1 $DESTDIR/wl/lib/libwayland-egl.so
install .libs/libwayland-server.so.0.* $DESTDIR/wl/lib/libwayland-server.so.0
ln -sf libwayland-server.so.0 $DESTDIR/wl/lib/libwayland-server.so
install -d $DESTDIR/wl/lib/pkgconfig
install -m 644 cursor/wayland-cursor.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 egl/wayland-egl.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 src/wayland-client.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 src/wayland-scanner.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 src/wayland-server.pc $DESTDIR/wl/lib/pkgconfig
install -d $DESTDIR/wl/share/aclocal
install -m 644 wayland-scanner.m4 $DESTDIR/wl/share/aclocal
install -d $DESTDIR/wl/share/wayland
install -m 644 protocol/wayland.xml $DESTDIR/wl/share/wayland

# build.pc
install -d $DESTDIR/wl/share/pkgconfig
cat > $DESTDIR/wl/share/pkgconfig/wayland-build.pc << EOF
Name: wayland
Version: 1.17.0
Description: Core Wayland library
Requires: $REQUIRES

devel=\\
/bin/wayland-scanner \\
/wl/include/wayland-client.h \\
/wl/include/wayland-client-core.h \\
/wl/include/wayland-client-protocol.h \\
/wl/include/wayland-cursor.h \\
/wl/include/wayland-egl.h \\
/wl/include/wayland-egl-core.h \\
/wl/include/wayland-server.h \\
/wl/include/wayland-server-core.h \\
/wl/include/wayland-server-protocol.h \\
/wl/include/wayland-util.h \\
/wl/include/wayland-version.h \\
/wl/lib/libwayland-client.so \\
/wl/lib/libwayland-cursor.so \\
/wl/lib/libwayland-egl.so \\
/wl/lib/libwayland-server.so \\
/wl/lib/pkgconfig/wayland-client.pc \\
/wl/lib/pkgconfig/wayland-cursor.pc \\
/wl/lib/pkgconfig/wayland-egl.pc \\
/wl/lib/pkgconfig/wayland-scanner.pc \\
/wl/lib/pkgconfig/wayland-server.pc \\
/wl/share/aclocal/wayland-scanner.m4 \\
/wl/share/wayland/wayland.xml

exec=\\
/wl/lib/libwayland-client.so.0 \\
/wl/lib/libwayland-cursor.so.0 \\
/wl/lib/libwayland-egl.so.1 \\
/wl/lib/libwayland-server.so.0
EOF

exit

# patch
--- wayland-1.17.0.orig/configure.ac
+++ wayland-1.17.0/configure.ac
@@ -22,6 +22,8 @@
 
 AM_INIT_AUTOMAKE([1.11 foreign no-dist-gzip dist-xz subdir-objects])
 
+AM_MAINTAINER_MODE
+
 AM_SILENT_RULES([yes])
 
 # Check for programs
--- wayland-1.17.0.orig/protocol/wayland.xml
+++ wayland-1.17.0/protocol/wayland.xml
@@ -1232,6 +1232,14 @@
       <arg name="class_" type="string" summary="surface class"/>
     </request>
 
+    <request name="set_position">
+      <description summary="set surface position">
+	Set a position for the surface.
+      </description>
+      <arg name="x" type="int"/>
+      <arg name="y" type="int"/>
+    </request>
+ 
     <event name="ping">
       <description summary="ping client">
 	Ping a client to check if it is receiving events and sending
--- wayland-1.17.0.orig/src/wayland-client-core.h
+++ wayland-1.17.0/src/wayland-client-core.h
@@ -191,6 +191,13 @@
 uint32_t
 wl_proxy_get_id(struct wl_proxy *proxy);
 
+void
+wl_proxy_set_tag(struct wl_proxy *proxy,
+		 const char * const *tag);
+
+const char * const *
+wl_proxy_get_tag(struct wl_proxy *proxy);
+
 const char *
 wl_proxy_get_class(struct wl_proxy *proxy);
 
--- wayland-1.17.0.orig/src/wayland-client.c
+++ wayland-1.17.0/src/wayland-client.c
@@ -69,6 +69,7 @@
 	void *user_data;
 	wl_dispatcher_func_t dispatcher;
 	uint32_t version;
+	const char * const *tag;
 };
 
 struct wl_event_queue {
@@ -2060,6 +2061,68 @@
 	return proxy->object.id;
 }
 
+/** Set the tag of a proxy object
+ *
+ * A toolkit or application can set a unique tag on a proxy in order to
+ * identify whether an object is managed by itself or some external part.
+ *
+ * To create a tag, the recommended way is to define a statically allocated
+ * constant char array containing some descriptive string. The tag will be the
+ * pointer to the non-const pointer to the beginning of the array.
+ *
+ * For example, to define and set a tag on a surface managed by a certain
+ * subsystem:
+ *
+ * 	static const char *my_tag = "my tag";
+ *
+ * 	wl_proxy_set_tag((struct wl_proxy *) surface, &my_tag);
+ *
+ * Then, in a callback with wl_surface as an argument, in order to check
+ * whether it's a surface managed by the same subsystem.
+ *
+ * 	const char * const *tag;
+ *
+ * 	tag = wl_proxy_get_tag((struct wl_proxy *) surface);
+ * 	if (tag != &my_tag)
+ *		return;
+ *
+ *	...
+ *
+ * For debugging purposes, a tag should be suitable to be included in a debug
+ * log entry, e.g.
+ *
+ * 	const char * const *tag;
+ *
+ * 	tag = wl_proxy_get_tag((struct wl_proxy *) surface);
+ * 	printf("Got a surface with the tag %p (%s)\n",
+ * 	       tag, (tag && *tag) ? *tag : "");
+ *
+ * \param proxy The proxy object
+ * \param tag The tag
+ *
+ * \memberof wl_proxy
+ */
+WL_EXPORT void
+wl_proxy_set_tag(struct wl_proxy *proxy,
+		 const char * const *tag)
+{
+	proxy->tag = tag;
+}
+
+/** Get the tag of a proxy object
+ *
+ * See wl_proxy_set_tag for details.
+ *
+ * \param proxy The proxy object
+ *
+ * \memberof wl_proxy
+ */
+WL_EXPORT const char * const *
+wl_proxy_get_tag(struct wl_proxy *proxy)
+{
+	return proxy->tag;
+}
+
 /** Get the interface name (class) of a proxy object
  *
  * \param proxy The proxy object

# source
https://wayland.freedesktop.org/releases/wayland-1.17.0.tar.xz
