# This file is part of HiGFXback

# requires
REQUIRES="libpng-build meson-build tiff-build wayland-build"

PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  EGL_OPENGL="-Degl-drm=false -Degl-fbdev=false -Dgl=false -Dglesv1_cm=false"
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists glslang-build vulkan-loader-build; then
  VK=1
  VULKAN="-Dvk-d2d=false"
  REQUIRES="$REQUIRES glslang-build vulkan-loader-build"
fi

test $GL || test $VK || { echo OpenGL or Vulkan packages required; exit 1; }

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists fltk-build; then
  FLTK=1
  REQUIRES="$REQUIRES fltk-build"
fi

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists glfw-build; then
  test $VK && PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --print-requires glfw-build | grep -q vulkan-loader-build || { echo GLFW with Vulkan support required; exit 1; }
  GLFW=1
  REQUIRES="$REQUIRES glfw-build"
fi

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists glut-build; then
  GLUT=1
  REQUIRES="$REQUIRES glut-build"
fi

if PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists sdl2-build; then
  test $GL && PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --print-requires sdl2-build | grep -q egl-opengl-stubs-build || { echo SDL2 with OpenGL support required; exit 1; }
  test $VK && PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --print-requires sdl2-build | grep -q vulkan-loader-build || { echo SDL2 with Vulkan support required; exit 1; }
  SDL2=1
  REQUIRES="$REQUIRES sdl2-build"
fi

# configure
PKG_CONFIG_PATH=/wl/lib/pkgconfig meson setup $EGL_OPENGL $VULKAN --prefix=/wl build

# build
meson compile -C build

# install
install -d $DESTDIR/wl/bin
test $GL && install build/yagears2 $DESTDIR/wl/bin
test $GL && test $FLTK || test $GLFW || test $GLUT || test $SDL2 && install build/yagears2-gui $DESTDIR/wl/bin
test $GLUT && install build/yagears2-mosaic $DESTDIR/wl/bin
test $VK && install build/yagears2-vk $DESTDIR/wl/bin
test $VK && test $GLFW || test $SDL2 && install build/yagears2-vk-gui $DESTDIR/wl/bin

# build.pc
install -d $DESTDIR/wl/share/pkgconfig
cat > $DESTDIR/wl/share/pkgconfig/yagears2-build.pc << EOF
Name: yagears
Version: 2.7
Description: Yet Another Gears OpenGL / Vulkan demo
Requires: $REQUIRES

exec=\\
EOF
test $GL && echo /wl/bin/yagears2 \\ >> $DESTDIR/wl/share/pkgconfig/yagears2-build.pc
test $GL && test $FLTK || test $GLFW || test $GLUT || test $SDL2 && echo /wl/bin/yagears2-gui \\ >> $DESTDIR/wl/share/pkgconfig/yagears2-build.pc
test $GLUT && echo /wl/bin/yagears2-mosaic \\ >> $DESTDIR/wl/share/pkgconfig/yagears2-build.pc
test $VK && echo /wl/bin/yagears2-vk \\ >> $DESTDIR/wl/share/pkgconfig/yagears2-build.pc
test $VK && test $GLFW || test $SDL2 && echo /wl/bin/yagears2-vk-gui \\ >> $DESTDIR/wl/share/pkgconfig/yagears2-build.pc
sed -i '$ s/ \\//' $DESTDIR/wl/share/pkgconfig/yagears2-build.pc

exit
--- yagears-2.7.orig/CMakeLists.txt
+++ yagears-2.7/CMakeLists.txt
@@ -83,12 +83,12 @@
   pkg_check_modules(GL gl)
   if(GL_FOUND)
     if(ENABLE_GLESV1_CM)
-      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+      list(APPEND GL_CFLAGS -DGLESV1_CM_H=<GL/gl.h> -DGLESV1_CM_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
     endif()
     if(ENABLE_GLESV2)
       find_program(XXD xxd)
       if(XXD)
-        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so" -DGL_GLEXT_PROTOTYPES)
+        list(APPEND GL_CFLAGS -DGLESV2_H=<GL/gl.h> -DGLESV2_LIB="libGL.so.1" -DGL_GLEXT_PROTOTYPES)
       else()
         set(ENABLE_GLESV2 OFF)
       endif()
@@ -125,7 +125,7 @@
 endif()
 
 if(NOT ENABLE_GL AND NOT ENABLE_GLESV1_CM AND NOT ENABLE_GLESV2)
-  message(FATAL_ERROR "No OpenGL Engines found")
+  message(WARNING "No OpenGL Engines found")
 endif()
 
 # OpenGL Backends
@@ -288,7 +288,7 @@
 set(WAFFLE ${ENABLE_WAFFLE})
 
 if(NOT ENABLE_GL_X11 AND NOT ENABLE_GL_DIRECTFB AND NOT ENABLE_GL_FBDEV AND NOT ENABLE_EGL_X11 AND NOT ENABLE_EGL_DIRECTFB AND NOT ENABLE_EGL_FBDEV AND NOT ENABLE_EGL_WAYLAND AND NOT ENABLE_EGL_XCB AND NOT ENABLE_EGL_DRM AND NOT ENABLE_EGL_RPI AND NOT ENABLE_WAFFLE)
-  message(FATAL_ERROR "No OpenGL Backends found")
+  message(WARNING "No OpenGL Backends found")
 endif()
 
 # Vulkan WSIs
@@ -421,17 +421,20 @@
 
 if(ENABLE_FLTK)
   message(STATUS "Checking for fltk-config")
-  find_program(FLTK_CONFIG fltk-config)
-  if(FLTK_CONFIG)
-    message(STATUS "  Found")
-    execute_process(COMMAND ${FLTK_CONFIG} --cflags OUTPUT_VARIABLE FLTK_CFLAGS)
-    string(STRIP ${FLTK_CFLAGS} FLTK_CFLAGS)
-    separate_arguments(FLTK_CFLAGS)
-    execute_process(COMMAND ${FLTK_CONFIG} --use-gl --ldflags OUTPUT_VARIABLE FLTK_LDFLAGS)
-    string(STRIP ${FLTK_LDFLAGS} FLTK_LDFLAGS)
-  else()
-    message(STATUS "  Not found")
-    set(ENABLE_FLTK OFF)
+  pkg_check_modules(GLFW glfw3)
+  if(NOT GLFW_FOUND)
+    find_program(FLTK_CONFIG fltk-config)
+    if(FLTK_CONFIG)
+      message(STATUS "  Found")
+      execute_process(COMMAND ${FLTK_CONFIG} --cflags OUTPUT_VARIABLE FLTK_CFLAGS)
+      string(STRIP ${FLTK_CFLAGS} FLTK_CFLAGS)
+      separate_arguments(FLTK_CFLAGS)
+      execute_process(COMMAND ${FLTK_CONFIG} --use-gl --ldflags OUTPUT_VARIABLE FLTK_LDFLAGS)
+      string(STRIP ${FLTK_LDFLAGS} FLTK_LDFLAGS)
+    else()
+      message(STATUS "  Not found")
+      set(ENABLE_FLTK OFF)
+    endif()
   endif()
 endif()
 set(FLTK ${ENABLE_FLTK})
@@ -516,6 +519,7 @@
     pkg_check_modules(SDL sdl2)
     if(NOT SDL_FOUND)
       set(ENABLE_SDL OFF)
+      set(WITH_SDL 1)
     endif()
   else()
     set(ENABLE_SDL OFF)
@@ -631,9 +635,17 @@
 
 # Build rules
 
-set(GL ${ENABLE_GL})
-set(GLESV1_CM ${ENABLE_GLESV1_CM})
-set(GLESV2 ${ENABLE_GLESV2})
+set(PNG ${ENABLE_PNG})
+set(TIFF ${ENABLE_TIFF})
+
+if(ENABLE_GL OR ENABLE_GLESV1_CM OR ENABLE_GLESV2)
+  set(GL ${ENABLE_GL})
+  set(GLESV1_CM ${ENABLE_GLESV1_CM})
+  set(GLESV2 ${ENABLE_GLESV2})
+  set(OPENGL ON)
+else()
+  set(OPENGL OFF)
+endif()
 
 if(ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D)
   set(VK ON)
@@ -643,21 +655,27 @@
 
 set(MOSAIC ${ENABLE_GLUT})
 
-if(ENABLE_EFL OR ENABLE_FLTK OR ENABLE_GLFW OR ENABLE_GLUT OR ENABLE_GTK OR ENABLE_QT OR ENABLE_SDL OR ENABLE_SFML OR ENABLE_WX)
+if((ENABLE_GL OR ENABLE_GLESV1_CM OR ENABLE_GLESV2) AND (ENABLE_EFL OR ENABLE_FLTK OR ENABLE_GLFW OR ENABLE_GLUT OR ENABLE_GTK OR ENABLE_QT OR ENABLE_SDL OR ENABLE_SFML OR ENABLE_WX))
   set(GUI ON)
 else()
   set(GUI OFF)
 endif()
 
-if((ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D) AND (ENABLE_GLFW OR ENABLE_SDL))
+if((ENABLE_VK_X11 OR ENABLE_VK_DIRECTFB OR ENABLE_VK_FBDEV OR ENABLE_VK_WAYLAND OR ENABLE_VK_XCB OR ENABLE_VK_D2D) AND (ENABLE_GLFW OR ENABLE_SDL AND WITH_SDL STREQUAL 2))
   set(VK_GUI ON)
 else()
   set(VK_GUI OFF)
 endif()
 
-set(PNG ${ENABLE_PNG})
-set(TIFF ${ENABLE_TIFF})
+if(PNG)
+set(PNG_SOURCE png_image.c)
+endif()
+
+if(TIFF)
+set(TIFF_SOURCE tiff_image.c)
+endif()
 
+if(OPENGL)
 if(GL)
 set(GL_SOURCE gl_gears.c)
 endif()
@@ -675,14 +693,6 @@
 set(GLESV2_SOURCE glesv2_gears.c)
 endif()
 
-if(PNG)
-set(PNG_SOURCE png_image.c)
-endif()
-
-if(TIFF)
-set(TIFF_SOURCE tiff_image.c)
-endif()
-
 add_library(yagears gears_engine.c ${GL_SOURCE} ${GLESV1_CM_SOURCE} ${GLESV2_SOURCE} ${VERT_XXD_FILE} ${FRAG_XXD_FILE} image_loader.c ${PNG_SOURCE} ${TIFF_SOURCE})
 target_compile_options(yagears PRIVATE ${GL_CFLAGS} ${GLESV1_CM_CFLAGS} ${GLESV2_CFLAGS} ${PNG_CFLAGS} ${TIFF_CFLAGS})
 target_link_libraries(yagears ${GL_LDFLAGS} ${GLESV1_CM_LDFLAGS} ${GLESV2_LDFLAGS} ${PNG_LDFLAGS} ${TIFF_LDFLAGS})
@@ -691,6 +701,7 @@
 target_compile_options(yagears2 PRIVATE ${WAFFLE_CFLAGS} ${EGL_CFLAGS} ${X11_CFLAGS} ${DIRECTFB_CFLAGS} ${WAYLAND_EGL_CFLAGS} ${XCB_CFLAGS} ${DRM_CFLAGS} ${RPI_CFLAGS})
 target_link_libraries(yagears2 -Wl,--whole-archive yagears -Wl,--no-whole-archive ${WAFFLE_LDFLAGS} ${EGL_LDFLAGS} ${X11_LDFLAGS} ${DIRECTFB_LDFLAGS} ${WAYLAND_EGL_LDFLAGS} ${XCB_LDFLAGS} ${DRM_LDFLAGS} ${RPI_LDFLAGS})
 install(TARGETS yagears2 DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
 
 if(VK)
 add_custom_command(OUTPUT vert.spv COMMAND ${GLSLANG_VALIDATOR} ${CMAKE_SOURCE_DIR}/vulkan_gears.vert -V -x DEPENDS ${CMAKE_SOURCE_DIR}/vulkan_gears.vert)
--- yagears-2.7.orig/Makefile.am
+++ yagears-2.7/Makefile.am
@@ -1,5 +1,15 @@
+bin_PROGRAMS =
 BUILT_SOURCES =
 
+if PNG
+PNG_SOURCE = png_image.c
+endif
+
+if TIFF
+TIFF_SOURCE = tiff_image.c
+endif
+
+if OPENGL
 if GL
 GL_SOURCE = gl_gears.c
 endif
@@ -19,24 +29,17 @@
 GLESV2_SOURCE = glesv2_gears.c
 endif
 
-if PNG
-PNG_SOURCE = png_image.c
-endif
-
-if TIFF
-TIFF_SOURCE = tiff_image.c
-endif
-
 noinst_LTLIBRARIES    = libyagears.la
 libyagears_la_SOURCES = gears_engine.c $(GL_SOURCE) $(GLESV1_CM_SOURCE) $(GLESV2_SOURCE) image_loader.c $(PNG_SOURCE) $(TIFF_SOURCE)
 libyagears_la_CFLAGS  = @GL_CFLAGS@ @GLESV1_CM_CFLAGS@ @GLESV2_CFLAGS@ @PNG_CFLAGS@ @TIFF_CFLAGS@
 libyagears_la_LIBADD  = @GL_LIBS@ @GLESV1_CM_LIBS@ @GLESV2_LIBS@ @PNG_LIBS@ @TIFF_LIBS@
 
-bin_PROGRAMS     = yagears2
+bin_PROGRAMS    += yagears2
 yagears2_SOURCES = main.c
 yagears2_CFLAGS  = @WAFFLE_CFLAGS@ @EGL_CFLAGS@ @X11_CFLAGS@ @DIRECTFB_CFLAGS@ @WAYLAND_EGL_CFLAGS@ @XCB_CFLAGS@ @DRM_CFLAGS@ @RPI_CFLAGS@
 yagears2_LDFLAGS = -Wl,--whole-archive,.libs/libyagears.a,--no-whole-archive
 yagears2_LDADD   = libyagears.la @WAFFLE_LIBS@ @EGL_LIBS@ @X11_LIBS@ @DIRECTFB_LIBS@ @WAYLAND_EGL_LIBS@ @XCB_LIBS@ @DRM_LIBS@ @RPI_LIBS@
+endif
 
 if VK
 vert.spv: vulkan_gears.vert
--- yagears-2.7.orig/configure.ac
+++ yagears-2.7/configure.ac
@@ -22,6 +22,7 @@
 AC_INIT(yagears, 2.7)
 
 AC_CONFIG_HEADERS(config.h)
+AC_CONFIG_MACRO_DIR([m4])
 
 AM_INIT_AUTOMAKE
 LT_INIT
@@ -152,12 +153,12 @@
   PKG_CHECK_MODULES(GL, gl, , enable_gl=no)
   if test x$enable_gl = xyes; then
     if test x$enable_glesv1_cm = xyes; then
-      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+      GL_CFLAGS="$GL_CFLAGS -DGLESV1_CM_H=\<GL/gl.h\> -DGLESV1_CM_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
     fi
     if test x$enable_glesv2 = xyes; then
       AC_PATH_TOOL(XXD, xxd)
       if test -n "$XXD"; then
-        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so\\\" -DGL_GLEXT_PROTOTYPES"
+        GL_CFLAGS="$GL_CFLAGS -DGLESV2_H=\<GL/gl.h\> -DGLESV2_LIB=\\\"libGL.so.1\\\" -DGL_GLEXT_PROTOTYPES"
       else
         enable_glesv2=no
       fi
@@ -192,7 +193,7 @@
 fi
 
 if test x$enable_gl = xno -a x$enable_glesv1_cm = xno -a x$enable_glesv2 = xno; then
-  AC_MSG_ERROR(No OpenGL Engines found)
+  AC_MSG_WARN(No OpenGL Engines found)
 fi
 
 # OpenGL Backends
@@ -345,7 +346,7 @@
 fi
 
 if test x$enable_gl_x11 = xno -a x$enable_gl_directfb = xno -a x$enable_gl_fbdev = xno -a x$enable_egl_x11 = xno -a x$enable_egl_directfb = xno -a x$enable_egl_fbdev = xno -a x$enable_egl_wayland = xno -a x$enable_egl_xcb = xno -a x$enable_egl_drm = xno -a x$enable_egl_rpi = xno -a x$enable_waffle = xno; then
-  AC_MSG_ERROR(No OpenGL Backends found)
+  AC_MSG_WARN(No OpenGL Backends found)
 fi
 
 # Vulkan WSIs
@@ -456,14 +457,16 @@
 fi
 
 if test x$enable_fltk = xyes; then
-  AC_PATH_PROG(FLTK_CONFIG, fltk-config, no)
-  if test x$FLTK_CONFIG != xno; then
-    FLTK_CFLAGS=`$FLTK_CONFIG --cflags`
-    FLTK_LIBS=`$FLTK_CONFIG --use-gl --ldflags`
-    AC_SUBST(FLTK_CFLAGS)
-    AC_SUBST(FLTK_LIBS)
-  else
-    enable_fltk=no
+  PKG_CHECK_MODULES(FLTK, fltk-gl, , enable_fltk=no)
+  if test x$enable_fltk = xno; then
+    AC_PATH_PROG(FLTK_CONFIG, fltk-config, no)
+    if test x$FLTK_CONFIG != xno; then
+      FLTK_CFLAGS=`$FLTK_CONFIG --cflags`
+      FLTK_LIBS=`$FLTK_CONFIG --use-gl --ldflags`
+      AC_SUBST(FLTK_CFLAGS)
+      AC_SUBST(FLTK_LIBS)
+      enable_fltk=yes
+    fi
   fi
 fi
 if test x$enable_fltk = xyes; then
@@ -532,6 +535,9 @@
   AC_MSG_RESULT([$with_sdl])
   if test x$with_sdl = x2; then
     PKG_CHECK_MODULES(SDL, sdl2, , enable_sdl=no)
+    if test x$enable_sdl = xno; then
+      with_sdl=1
+    fi
   else
     enable_sdl=no
   fi
@@ -632,19 +638,20 @@
 
 # Build rules
 
+AM_CONDITIONAL(PNG, test x$enable_png = xyes)
+AM_CONDITIONAL(TIFF, test x$enable_tiff = xyes)
+
 AM_CONDITIONAL(GL, test x$enable_gl = xyes)
 AM_CONDITIONAL(GLESV1_CM, test x$enable_glesv1_cm = xyes)
 AM_CONDITIONAL(GLESV2, test x$enable_glesv2 = xyes)
+AM_CONDITIONAL(OPENGL, test x$enable_gl = xyes -o x$enable_glesv1_cm = xyes -o x$enable_glesv2 = xyes)
 
 AM_CONDITIONAL(VK, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes)
 
 AM_CONDITIONAL(MOSAIC, test x$enable_glut = xyes)
 
-AM_CONDITIONAL(GUI, test x$enable_efl = xyes -o x$enable_fltk = xyes -o x$enable_glfw = xyes -o x$enable_glut = xyes -o x$enable_gtk = xyes -o x$enable_qt = xyes -o x$enable_sdl = xyes -o x$enable_sfml = xyes -o x$enable_wx = xyes)
-
-AM_CONDITIONAL(VK_GUI, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes && test x$enable_glfw = xyes -o x$enable_sdl = xyes)
+AM_CONDITIONAL(GUI, test x$enable_gl = xyes -o x$enable_glesv1_cm = xyes -o x$enable_glesv2 = xyes && test x$enable_efl = xyes -o x$enable_fltk = xyes -o x$enable_glfw = xyes -o x$enable_glut = xyes -o x$enable_gtk = xyes -o x$enable_qt = xyes -o x$enable_sdl = xyes -o x$enable_sfml = xyes -o x$enable_wx = xyes)
 
-AM_CONDITIONAL(PNG, test x$enable_png = xyes)
-AM_CONDITIONAL(TIFF, test x$enable_tiff = xyes)
+AM_CONDITIONAL(VK_GUI, test x$enable_vk_x11 = xyes -o x$enable_vk_directfb = xyes -o x$enable_vk_fbdev = xyes -o x$enable_vk_wayland = xyes -o x$enable_vk_xcb = xyes -o x$enable_vk_d2d = xyes && test x$enable_glfw = xyes -o x$enable_sdl = xyes -a x$with_sdl = x2)
 
 AC_OUTPUT(Makefile)
--- yagears-2.7.orig/gl_gears.c
+++ yagears-2.7/gl_gears.c
@@ -25,6 +25,7 @@
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include "engine.h"
 
 #include "image_loader.h"
@@ -38,6 +39,7 @@
 #define GEAR2 2
 
 struct gear {
+  char *gl_version;
   GLuint list;
 };
 
@@ -264,8 +266,9 @@
     delete_gear(gears, GEAR0);
   }
 
-  printf("%s\n", glGetString(GL_VERSION));
+  printf("%s\n", gears->gl_version);
 
+  free(gears->gl_version);
   free(gears);
 }
 
@@ -282,6 +285,8 @@
     return NULL;
   }
 
+  gears->gl_version = strdup((char *)glGetString(GL_VERSION));
+
   glEnable(GL_DEPTH_TEST);
   glEnable(GL_NORMALIZE);
   glEnable(GL_LIGHTING);
--- yagears-2.7.orig/glesv1_cm_gears.c
+++ yagears-2.7/glesv1_cm_gears.c
@@ -26,6 +26,7 @@
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include "engine.h"
 
 #include "image_loader.h"
@@ -54,6 +55,7 @@
 };
 
 struct gears {
+  char *gl_version;
   void *lib_handle;
   void           (*glBindBuffer)(GLenum, GLuint);
   void           (*glBufferData)(GLenum, GLsizeiptr, const GLvoid *, GLenum);
@@ -374,12 +376,13 @@
     delete_gear(gears, GEAR0);
   }
 
-  printf("%s\n", gears->glGetString(GL_VERSION));
+  printf("%s\n", gears->gl_version);
 
   if (gears->lib_handle) {
     dlclose(gears->lib_handle);
   }
 
+  free(gears->gl_version);
   free(gears);
 }
 
@@ -438,6 +441,8 @@
   DLSYM(glVertexPointer);
   DLSYM(glViewport);
 
+  gears->gl_version = strdup((char *)gears->glGetString(GL_VERSION));
+
   gears->glEnable(GL_DEPTH_TEST);
   gears->glEnable(GL_NORMALIZE);
   gears->glEnable(GL_LIGHTING);
--- yagears-2.7.orig/glesv2_gears.c
+++ yagears-2.7/glesv2_gears.c
@@ -138,6 +138,8 @@
 };
 
 struct gears {
+  char *gl_version;
+  char *gl_shading_language_version;
   void *lib_handle;
   void           (*glAttachShader)(GLuint, GLuint);
   void           (*glBindAttribLocation)(GLuint, GLuint, const GLchar *);
@@ -479,13 +481,15 @@
     gears->glDeleteProgram(gears->program);
   }
 
-  printf("%s\n", gears->glGetString(GL_VERSION));
-  printf("%s\n", gears->glGetString(GL_SHADING_LANGUAGE_VERSION));
+  printf("%s\n", gears->gl_version);
+  printf("%s\n", gears->gl_shading_language_version);
 
   if (gears->lib_handle) {
     dlclose(gears->lib_handle);
   }
 
+  free(gears->gl_version);
+  free(gears->gl_shading_language_version);
   free(gears);
 }
 
@@ -560,6 +564,9 @@
   DLSYM(glVertexAttribPointer);
   DLSYM(glViewport);
 
+  gears->gl_version = strdup((char *)gears->glGetString(GL_VERSION));
+  gears->gl_shading_language_version = strdup((char *)gears->glGetString(GL_SHADING_LANGUAGE_VERSION));
+
   gears->glEnable(GL_DEPTH_TEST);
 
   gears->program = gears->glCreateProgram();
--- yagears-2.7.orig/gui.cc
+++ yagears-2.7/gui.cc
@@ -38,7 +38,11 @@
 #endif
 #if defined(GLUT)
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
 extern "C" {
+void glutInitContextProfile(int);
 void glutLeaveMainLoop();
 void glutExit();
 }
@@ -74,8 +78,7 @@
 #if defined(FLTK)
 #include <FL/Fl.H>
 #include <FL/Fl_Gl_Window.H>
-void fl_open_display();
-void fl_close_display();
+#include <FL/platform.H>
 #endif
 
 #include "gears_engine.h"
@@ -200,12 +203,9 @@
 #if defined(FLTK)
 class FlGlWindow : public Fl_Gl_Window {
 public:
-int idle_id, quit;
-
 FlGlWindow() : Fl_Gl_Window(0, 0, 0, 0)
 {
-  idle_id = 1;
-  quit = 0;
+  Fl::add_idle(idle, this);
 }
 
 private:
@@ -216,28 +216,26 @@
   if (animate) frames++;
 }
 
-public:
-void idle()
+static
+void idle(void *data)
 {
   if (animate) {
     if (!frames) return;
-    redraw();
+    ((Fl_Window *)data)->redraw();
   }
   else {
     if (frames) frames = 0;
   }
 }
 
-private:
 int handle(int event)
 {
-  if (event != FL_KEYDOWN)
-    return 0;
+  if (event == FL_MOVE || event == FL_SHORTCUT)
+    return 1;
 
   switch (Fl::event_key()) {
     case FL_Escape:
-      idle_id = 0;
-      quit = 1;
+      Fl::program_should_quit(1);
       return 1;
     case ' ':
       animate = !animate;
@@ -272,7 +270,7 @@
       }
       break;
     default:
-      return 0;
+      return Fl_Gl_Window::handle(event);
   }
 
   if (!animate) {
@@ -904,7 +902,8 @@
   Ecore_Animator *ecore_animator_id;
   #endif
   #if defined(FLTK)
-  FlGlWindow *fltk_win;
+  Fl_Window fltk_win(0, 0);
+  FlGlWindow flgl_win;
   #endif
   #if defined(GLFW)
   GLFWwindow *glfw_win;
@@ -1155,12 +1154,11 @@
 
   #if defined(FLTK)
   if (!strcmp(toolkit, "fltk")) {
-    fltk_win = new FlGlWindow;
-    fltk_win->label("yagears");
-    fltk_win->resize(win_posx, win_posy, win_width, win_height);
-    fltk_win->show();
-    while (!fltk_win->valid())
-      Fl::check();
+    fltk_win.label("yagears");
+    fltk_win.resize(win_posx, win_posy, win_width, win_height);
+    flgl_win.resize(win_posx, win_posy, win_width, win_height);
+    fltk_win.show();
+    Fl::check();
   }
   #endif
 
@@ -1178,6 +1176,7 @@
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
     glutInitWindowSize(win_width, win_height);
     glutInitWindowPosition(win_posx, win_posy);
+    glutInitContextProfile(gears_engine_version(gears_engine) ? GLUT_ES_PROFILE : 0);
     glut_win = glutCreateWindow("yagears");
     glutDisplayFunc(glutDisplay);
     glutIdleFunc(glutIdle);
@@ -1229,6 +1228,7 @@
   #if defined(SDL)
   if (!strcmp(toolkit, "sdl")) {
     #if SDL_VERSION_ATLEAST(2, 0, 0)
+    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, gears_engine_version(gears_engine) ? SDL_GL_CONTEXT_PROFILE_ES : 0);
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_OPENGL);
     SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, gears_engine_version(gears_engine));
     SDL_GL_CreateContext(sdl_win);
@@ -1275,15 +1275,8 @@
 
   #if defined(FLTK)
   if (!strcmp(toolkit, "fltk")) {
-    fltk_win->redraw();
-    Fl::check();
-    while (1) {
-      if (fltk_win->idle_id)
-        fltk_win->idle();
-      Fl::check();
-      if (fltk_win->quit)
-        break;
-    }
+    while (!Fl::program_should_quit() && fltk_win.shown())
+      Fl::wait(1e20);
   }
   #endif
 
@@ -1331,7 +1324,7 @@
         SDL_Idle();
         #endif
       SDL_Event event;
-      while (SDL_PollEvent(&event))
+      if (SDL_PollEvent(&event))
         #if SDL_VERSION_ATLEAST(2, 0, 0)
         SDL_KeyDownEvent(sdl_win, &event, &sdl_idle_id);
         #else
@@ -1389,13 +1382,6 @@
   }
   #endif
 
-  #if defined(FLTK)
-  if (!strcmp(toolkit, "fltk")) {
-    delete fltk_win;
-    fl_close_display();
-  }
-  #endif
-
   #if defined(GLFW)
   if (!strcmp(toolkit, "glfw")) {
     glfwDestroyWindow(glfw_win);
--- yagears-2.7.orig/main.c
+++ yagears-2.7/main.c
@@ -1443,7 +1443,7 @@
 
   if (!strcmp(backend, "egl-x11") || !strcmp(backend, "egl-directfb") || !strcmp(backend, "egl-fbdev") || !strcmp(backend, "egl-wayland") || !strcmp(backend, "egl-xcb") || !strcmp(backend, "egl-drm")) {
     egl_extensions = eglQueryString(EGL_NO_DISPLAY, EGL_EXTENSIONS);
-    if (egl_extensions && strstr(egl_extensions, egl_extension_name) && !getenv("NO_EGL_EXT_platform_base")) {
+    if (!getenv("NO_EGL_EXT_PLATFORM") && egl_extensions && strstr(egl_extensions, egl_extension_name)) {
       eglGetPlatformDisplayEXT = (PFNEGLGETPLATFORMDISPLAYEXTPROC)eglGetProcAddress("eglGetPlatformDisplayEXT");
       eglCreatePlatformWindowSurfaceEXT = (PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC)eglGetProcAddress("eglCreatePlatformWindowSurfaceEXT");
     }
@@ -1619,8 +1619,6 @@
     egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_BLUE_SIZE;
     egl_config_attr[opt++] = 1;
-    egl_config_attr[opt++] = EGL_ALPHA_SIZE;
-    egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_DEPTH_SIZE;
     egl_config_attr[opt++] = 1;
     egl_config_attr[opt++] = EGL_RENDERABLE_TYPE;
@@ -2004,7 +2002,6 @@
   #endif
   #if defined(EGL_DRM)
   if (!strcmp(backend, "egl-drm")) {
-    egl_win = eglCreateWindowSurface(egl_dpy, egl_config, (EGLNativeWindowType)drm_win, NULL);
     #if defined(EGL_EXT_platform_base) && defined(EGL_PLATFORM_GBM_KHR)
     if (eglCreatePlatformWindowSurfaceEXT) {
       egl_win = eglCreatePlatformWindowSurfaceEXT(egl_dpy, egl_config, drm_win, NULL);
--- yagears-2.7.orig/meson.build
+++ yagears-2.7/meson.build
@@ -77,12 +77,12 @@
   gl_dep = dependency('gl', required: false)
   if gl_dep.found()
     if enable_glesv1_cm
-      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+      gl_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GL/gl.h>', '-DGLESV1_CM_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
     endif
     if enable_glesv2
       xxd = find_program('xxd', required: false)
       if xxd.found()
-        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
+        gl_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GL/gl.h>', '-DGLESV2_LIB="libGL.so.1"', '-DGL_GLEXT_PROTOTYPES'], dependencies: gl_dep)
       else
         enable_glesv2 = false
       endif
@@ -101,7 +101,7 @@
   if enable_glesv1_cm
     glesv1_cm_dep = dependency('glesv1_cm', required: false)
     if glesv1_cm_dep.found()
-      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm').stdout().strip().split(' '))
+      glesv1_cm_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv1_cm', check: true).stdout().strip().split(' '))
       glesv1_cm_dep = declare_dependency(compile_args: ['-DGLESV1_CM_H=<GLES/gl.h>', '-DGLESV1_CM_LIB="libGLESv1_CM.so.1"'], link_args: '-ldl', dependencies: glesv1_cm_dep)
     else
       enable_glesv1_cm = false
@@ -112,7 +112,7 @@
     glesv2_dep = dependency('glesv2', required: false)
     xxd = find_program('xxd', required: false)
     if glesv2_dep.found() and xxd.found()
-      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2').stdout().strip().split(' '))
+      glesv2_dep = declare_dependency(compile_args: run_command('pkg-config', '--cflags', 'glesv2', check: true).stdout().strip().split(' '))
       glesv2_dep = declare_dependency(compile_args: ['-DGLESV2_H=<GLES2/gl2.h>', '-DGLESV2_LIB="libGLESv2.so.2"'], link_args: '-ldl', dependencies: glesv2_dep)
     else
       enable_glesv2 = false
@@ -121,7 +121,7 @@
 endif
 
 if not enable_gl and not enable_glesv1_cm and not enable_glesv2
-  error('No OpenGL Engines found')
+  warning('No OpenGL Engines found')
 endif
 
 # OpenGL Backends
@@ -130,7 +130,7 @@
 directfb_dep = []
 if enable_gl
   if enable_gl_x11
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if cc.has_function('glXCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       x11_dep = dependency('x11', required: false)
       if not x11_dep.found()
@@ -143,8 +143,8 @@
 
   if enable_gl_directfb
     message('Checking for DirectFBGL module')
-    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal').stdout().strip()
-    if run_command('test', '-d', moduledir + '/interfaces/IDirectFBGL').returncode() == 0
+    moduledir = run_command('pkg-config', '--variable=moduledir', 'directfb-internal', check: false).stdout().strip()
+    if import('fs').is_dir(moduledir + '/interfaces/IDirectFBGL')
       message('DirectFBGL found')
       directfb_dep = dependency('directfb', required: false)
       if not directfb_dep.found()
@@ -157,7 +157,7 @@
   endif
 
   if enable_gl_fbdev
-    libdir = run_command('pkg-config', '--variable=libdir', 'gl').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'gl', check: true).stdout().strip()
     if not cc.has_function('glFBDevCreateContext', dependencies: cc.find_library('GL', dirs: libdir))
       enable_gl_fbdev = false
     endif
@@ -225,7 +225,7 @@
           config_h.set('HAVE_WL_SHELL_SURFACE_SET_POSITION', false, description: 'Have function wl_shell_surface_set_position')
         endif
 
-        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client').stdout().strip())]
+        wayland_egl_dep = [wayland_dep, cc.find_library('wayland-egl', dirs: run_command('pkg-config', '--variable=libdir', 'wayland-client', check: true).stdout().strip())]
       endif
     endif
 
@@ -246,8 +246,8 @@
       if enable_egl_drm
         dri_dep = dependency('dri', required: false)
         if dri_dep.found()
-          dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri').stdout().strip()
-          modversion = run_command('pkg-config', '--modversion', 'dri')
+          dridriverdir = run_command('pkg-config', '--variable=dridriverdir', 'dri', check: true).stdout().strip()
+          modversion = run_command('pkg-config', '--modversion', 'dri', check: true)
           drimajorversion = modversion.stdout().split('.')[0]
           driminorversion = modversion.stdout().split('.')[1]
           drm_dep = declare_dependency(compile_args: ['-DDRI_DRIVERDIR="@0@"'.format(dridriverdir), '-DDRI_MAJOR_VERSION=@0@'.format(drimajorversion), '-DDRI_MINOR_VERSION=@0@'.format(driminorversion)], link_args: '-ldl', dependencies: drm_dep)
@@ -294,7 +294,7 @@
 config_h.set('WAFFLE', enable_waffle, description: 'Support for Waffle cross-platform wrapper')
 
 if not enable_gl_x11 and not enable_gl_directfb and not enable_gl_fbdev and not enable_egl_x11 and not enable_egl_directfb and not enable_egl_fbdev and not enable_egl_wayland and not enable_egl_xcb and not enable_egl_drm and not enable_egl_rpi and not enable_waffle
-  error('No OpenGL Backends found')
+  warning('No OpenGL Backends found')
 endif
 
 # Vulkan WSIs
@@ -305,7 +305,7 @@
   vulkan_dep = dependency('vulkan', required: false)
   glslang_validator = find_program('glslangValidator', required: false)
   if vulkan_dep.found() and glslang_validator.found()
-    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan').stdout().strip()
+    libdir = run_command('pkg-config', '--variable=libdir', 'vulkan', check: true).stdout().strip()
 
     if enable_vk_x11
       if cc.has_function('vkCreateXlibSurfaceKHR', dependencies: cc.find_library('vulkan', dirs: libdir))
@@ -428,11 +428,14 @@
 
 fltk_dep = []
 if enable_fltk
-  fltk_config = find_program('fltk-config', required: false)
-  if fltk_config.found()
-    fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags').stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags').stdout().strip().split(' '))
-  else
-    enable_fltk = false
+  fltk_dep = dependency('fltk-gl', required: false)
+  if not fltk_dep.found()
+    fltk_config = find_program('fltk-config', required: false)
+    if fltk_config.found()
+      fltk_dep = declare_dependency(compile_args: run_command(fltk_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(fltk_config, '--use-gl', '--ldflags', check: true).stdout().strip().split(' '))
+    else
+      enable_glfw = false
+    endif
   endif
 endif
 config_h.set('FLTK', enable_fltk, description: 'Support for FLTK graphical user interface')
@@ -519,6 +522,7 @@
     sdl_dep = dependency('sdl2', required: false)
     if not sdl_dep.found()
       enable_sdl = false
+      with_sdl = '1'
     endif
   else
     enable_sdl = false
@@ -547,7 +551,7 @@
 if enable_wx
   wx_config = find_program('wx-config', required: false)
   if wx_config.found()
-    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags').stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl').stdout().strip().split(' '))
+    wx_dep = declare_dependency(compile_args: run_command(wx_config, '--cflags', check: true).stdout().strip().split(' '), link_args: run_command(wx_config, '--libs', 'core,gl', check: true).stdout().strip().split(' '))
   else
     enable_wx = false
   endif
@@ -631,9 +635,17 @@
 
 # Build rules
 
-GL = enable_gl
-GLESV1_CM = enable_glesv1_cm
-GLESV2 = enable_glesv2
+PNG = enable_png
+TIFF = enable_tiff
+
+if enable_gl or enable_glesv1_cm or enable_glesv2
+  GL = enable_gl
+  GLESV1_CM = enable_glesv1_cm
+  GLESV2 = enable_glesv2
+  OPENGL = true
+else
+  OPENGL = false
+endif
 
 if enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d
   VK = true
@@ -643,21 +655,29 @@
 
 MOSAIC = enable_glut
 
-if enable_efl or enable_fltk or enable_glfw or enable_glut or enable_gtk or enable_qt or enable_sdl or enable_sfml or enable_wx
+if (enable_gl or enable_glesv1_cm or enable_glesv2) and (enable_efl or enable_fltk or enable_glfw or enable_glut or enable_gtk or enable_qt or enable_sdl or enable_sfml or enable_wx)
   GUI = true
 else
   GUI = false
 endif
 
-if (enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d) and (enable_glfw or enable_sdl)
+if (enable_vk_x11 or enable_vk_directfb or enable_vk_fbdev or enable_vk_wayland or enable_vk_xcb or enable_vk_d2d) and (enable_glfw or enable_sdl and with_sdl == '2')
   VK_GUI = true
 else
   VK_GUI = false
 endif
 
-PNG = enable_png
-TIFF = enable_tiff
+png_source = []
+if PNG
+png_source = 'png_image.c'
+endif
+
+tiff_source = []
+if TIFF
+tiff_source = 'tiff_image.c'
+endif
 
+if OPENGL
 gl_source = []
 if GL
 gl_source = 'gl_gears.c'
@@ -678,16 +698,6 @@
 glesv2_source = 'glesv2_gears.c'
 endif
 
-png_source = []
-if PNG
-png_source = 'png_image.c'
-endif
-
-tiff_source = []
-if TIFF
-tiff_source = 'tiff_image.c'
-endif
-
 libyagears = static_library('yagears',
                             'gears_engine.c', gl_source, glesv1_cm_source, glesv2_source, vert_xxd_file, frag_xxd_file, 'image_loader.c', png_source, tiff_source,
                             dependencies: [gl_dep, glesv1_cm_dep, glesv2_dep, png_dep, tiff_dep])
@@ -697,6 +707,7 @@
            dependencies: [waffle_dep, egl_dep, x11_dep, directfb_dep, wayland_egl_dep, xcb_dep, drm_dep, rpi_dep],
            link_whole: libyagears,
            install: true)
+endif
 
 if VK
 vert_spv_file = custom_target('vert_spv', command: [glslang_validator, '@INPUT@', '-V', '-x'], input: 'vulkan_gears.vert', output: 'vert.spv')
@@ -726,7 +737,7 @@
 
 if VK_GUI
 executable('yagears2-vk-gui',
-           'vk-gui.cc', 'vulkan_gears.c', 'image_loader.c', png_source, tiff_source,
+           'vk-gui.cc', 'vulkan_gears.c', vert_spv_file, frag_spv_file, 'image_loader.c', png_source, tiff_source,
            dependencies: [vulkan_dep, png_dep, tiff_dep, glfw_dep, sdl_dep],
            install: true)
 endif
--- yagears-2.7.orig/mosaic.c
+++ yagears-2.7/mosaic.c
@@ -24,6 +24,10 @@
 #include "config.h"
 
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
+void glutInitContextProfile(int);
 void glutSetWindowData(void *data);
 void *glutGetWindowData();
 void glutLeaveMainLoop();
@@ -196,6 +200,7 @@
     for (j = 0; j < COLS; j++) {
       gears_engine[i * COLS + j] = gears_engine_new(gears_engine_name(opt));
       glutInitWindowPosition(win_posx, win_posy);
+      glutInitContextProfile(gears_engine_version(gears_engine[i * COLS + j]) ? GLUT_ES_PROFILE : 0);
       glut_win[i * COLS + j] = glutCreateWindow(NULL);
       glutSetWindowData((void *)(long)(i * COLS + j));
       glutDisplayFunc(glutDisplay);
--- yagears-2.7.orig/vk-gui.cc
+++ yagears-2.7/vk-gui.cc
@@ -37,8 +37,10 @@
 #endif
 #if defined(SDL)
 #include <SDL.h>
+#if SDL_MAJOR_VERSION >= 2
 #include <SDL_vulkan.h>
 #endif
+#endif
 
 #include "vulkan_gears.h"
 
@@ -165,7 +167,7 @@
 }
 #endif
 
-#if defined(SDL)
+#if SDL_MAJOR_VERSION >= 2
 static void SDL_Display(SDL_Window *window)
 {
   if (animate) { if (frames) rotate(); else t_rate = t_rot = current_time(); }
@@ -256,7 +258,7 @@
   #if defined(GLFW)
   GLFWwindow *glfw_win;
   #endif
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   SDL_Window *sdl_win;
   int sdl_idle_id;
   #endif
@@ -278,7 +280,7 @@
   #if defined(GLFW)
   strcat(toolkits, "glfw ");
   #endif
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   strcat(toolkits, "sdl ");
   #endif
 
@@ -325,7 +327,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Init(SDL_INIT_VIDEO);
 
@@ -363,7 +365,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     sdl_win = SDL_CreateWindow("yagears", win_posx, win_posy, win_width, win_height, SDL_WINDOW_VULKAN);
     sdl_idle_id = 1;
@@ -378,7 +380,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Vulkan_GetInstanceExtensions(sdl_win, &vk_extension_count, NULL);
     vk_extension_names = (const char **)calloc(vk_extension_count, sizeof(const char *));
@@ -419,7 +421,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Vulkan_CreateSurface(sdl_win, vk_instance, &vk_surface);
   }
@@ -482,7 +484,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     SDL_Display(sdl_win);
     while (1) {
@@ -541,7 +543,7 @@
   }
   #endif
 
-  #if defined(SDL)
+  #if SDL_MAJOR_VERSION >= 2
   if (!strcmp(toolkit, "sdl")) {
     free(vk_extension_names);
     SDL_DestroyWindow(sdl_win);
