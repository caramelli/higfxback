# This file is part of HiGFXback

# requires
REQUIRES="astc-encoder-build cmake3-build libstdc++-build llvm-build marl-build spirv-tools-build vulkan-headers-build wayland-build"

PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
GENERATOR=${GENERATOR-Unix Makefiles}
rm -rf include
rm -rf third_party/astc-encoder
rm -rf third_party/llvm*
rm -rf third_party/marl
rm -rf third_party/SPIRV-Headers
rm -rf third_party/SPIRV-Tools
cmake -DSWIFTSHADER_BUILD_EGL=OFF -DSWIFTSHADER_BUILD_GLES_CM=OFF -DSWIFTSHADER_BUILD_GLESv2=OFF -DSWIFTSHADER_BUILD_PVR=OFF -DSWIFTSHADER_BUILD_TESTS=OFF -DSWIFTSHADER_BUILD_WSI_WAYLAND=ON -DCMAKE_INSTALL_PREFIX=/wl -B build -G "$GENERATOR"

# build
cmake --build build

# install
install -d $DESTDIR/wl/etc/vulkan/icd.d
install -m 644 build/Linux/vk_swiftshader_icd.json $DESTDIR/wl/etc/vulkan/icd.d/swiftshader_icd.json
install -d $DESTDIR/wl/lib
install build/Linux/libvk_swiftshader.so $DESTDIR/wl/lib

# build.pc
install -d $DESTDIR/wl/share/pkgconfig
cat > $DESTDIR/wl/share/pkgconfig/swiftshader-build.pc << EOF
Name: SwiftShader
Version: 20201123
Description: CPU-based implementation of Vulkan
Requires: $REQUIRES

exec=\\
/wl/etc/vulkan/icd.d/swiftshader_icd.json \\
/wl/lib/libvk_swiftshader.so
EOF

exit

# patch
--- SwiftShader-20201123.orig/CMakeLists.txt
+++ SwiftShader-20201123/CMakeLists.txt
@@ -604,6 +604,10 @@
 endif()
 unset(USE_EXCEPTIONS)
 
+if(NOT EXISTS ${SWIFTSHADER_DIR}/include)
+    include_directories(${CMAKE_INSTALL_PREFIX}/include)
+endif()
+
 ###########################################################
 # libbacktrace and boost
 ###########################################################
@@ -615,24 +619,30 @@
 ###########################################################
 # LLVM
 ###########################################################
-add_subdirectory(${THIRD_PARTY_DIR}/llvm-${SWIFTSHADER_LLVM_VERSION} EXCLUDE_FROM_ALL)
-set_target_properties(llvm PROPERTIES FOLDER "third_party")
+if(EXISTS ${THIRD_PARTY_DIR}/llvm-${SWIFTSHADER_LLVM_VERSION})
+    add_subdirectory(${THIRD_PARTY_DIR}/llvm-${SWIFTSHADER_LLVM_VERSION} EXCLUDE_FROM_ALL)
+    set_target_properties(llvm PROPERTIES FOLDER "third_party")
+endif()
 
 ###########################################################
 # Subzero
 ###########################################################
-add_subdirectory(${THIRD_PARTY_DIR}/llvm-subzero EXCLUDE_FROM_ALL)
-add_subdirectory(${THIRD_PARTY_DIR}/subzero EXCLUDE_FROM_ALL)
-set_target_properties(llvm-subzero PROPERTIES FOLDER "third_party")
-set_target_properties(subzero PROPERTIES FOLDER "third_party")
+if(EXISTS ${THIRD_PARTY_DIR}/llvm-subzero AND EXISTS ${THIRD_PARTY_DIR}/subzero)
+    add_subdirectory(${THIRD_PARTY_DIR}/llvm-subzero EXCLUDE_FROM_ALL)
+    add_subdirectory(${THIRD_PARTY_DIR}/subzero EXCLUDE_FROM_ALL)
+    set_target_properties(llvm-subzero PROPERTIES FOLDER "third_party")
+    set_target_properties(subzero PROPERTIES FOLDER "third_party")
+endif()
 
 ###########################################################
 # marl
 ###########################################################
 if(BUILD_MARL)
-    set(MARL_THIRD_PARTY_DIR ${THIRD_PARTY_DIR})
-    add_subdirectory(${THIRD_PARTY_DIR}/marl)
-    set_target_properties(marl PROPERTIES FOLDER "third_party")
+    if(EXISTS ${THIRD_PARTY_DIR}/marl)
+        set(MARL_THIRD_PARTY_DIR ${THIRD_PARTY_DIR})
+        add_subdirectory(${THIRD_PARTY_DIR}/marl)
+        set_target_properties(marl PROPERTIES FOLDER "third_party")
+    endif()
 endif()
 
 if(MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED)
@@ -651,8 +661,10 @@
 # astc-encoder
 ###########################################################
 if(SWIFTSHADER_ENABLE_ASTC)
-    add_subdirectory(${THIRD_PARTY_DIR}/astc-encoder)
-    set_target_properties(astc-encoder PROPERTIES FOLDER "third_party")
+    if(EXISTS ${THIRD_PARTY_DIR}/astc-encoder)
+        add_subdirectory(${THIRD_PARTY_DIR}/astc-encoder)
+        set_target_properties(astc-encoder PROPERTIES FOLDER "third_party")
+    endif()
 endif()
 
 ###########################################################
@@ -745,7 +757,7 @@
 endif(SWIFTSHADER_BUILD_GLES_CM)
 
 if(SWIFTSHADER_BUILD_VULKAN)
-    if (NOT TARGET SPIRV-Tools)
+    if(EXISTS ${THIRD_PARTY_DIR}/SPIRV-Headers AND EXISTS ${THIRD_PARTY_DIR}/SPIRV-Tools)
         # This variable is also used by SPIRV-Tools to locate SPIRV-Headers
         set(SPIRV-Headers_SOURCE_DIR "${THIRD_PARTY_DIR}/SPIRV-Headers")
         set(SPIRV_SKIP_TESTS TRUE CACHE BOOL "" FORCE)
--- SwiftShader-20201123.orig/src/Device/ASTC_Decoder.cpp
+++ SwiftShader-20201123/src/Device/ASTC_Decoder.cpp
@@ -109,7 +109,11 @@
 #ifdef SWIFTSHADER_ENABLE_ASTC
 	build_quantization_mode_table();
 
+#ifdef ASTCENC_INCLUDED
+	astcenc_profile decode_mode = isUnsignedByte ? ASTCENC_PRF_LDR : ASTCENC_PRF_HDR_RGB_LDR_A;
+#else
 	astc_decode_mode decode_mode = isUnsignedByte ? DECODE_LDR : DECODE_HDR;
+#endif
 
 	std::unique_ptr<block_size_descriptor> bsd(new block_size_descriptor);
 	init_block_size_descriptor(xBlockSize, yBlockSize, zBlockSize, bsd.get());
--- SwiftShader-20201123.orig/src/Device/CMakeLists.txt
+++ SwiftShader-20201123/src/Device/CMakeLists.txt
@@ -77,6 +77,13 @@
         ${SWIFTSHADER_LINK_FLAGS}
 )
 
+if(NOT TARGET astc-encoder AND SWIFTSHADER_ENABLE_ASTC)
+    target_compile_definitions(vk_device
+        PUBLIC
+            "SWIFTSHADER_ENABLE_ASTC"
+    )
+endif()
+
 target_link_libraries(vk_device
     PUBLIC
         vk_pipeline
--- SwiftShader-20201123.orig/src/Pipeline/CMakeLists.txt
+++ SwiftShader-20201123/src/Pipeline/CMakeLists.txt
@@ -57,9 +57,7 @@
 )
 
 # Add SPIRV-Tools dep
-if (NOT TARGET SPIRV-Tools)
-    message(FATAL_ERROR "Missing required target: SPIRV-Tools")
-endif()
+if (TARGET SPIRV-Tools)
 
 set_target_properties(core_tables PROPERTIES FOLDER "SPIRV-Tools build")
 set_target_properties(enum_string_mapping PROPERTIES FOLDER "SPIRV-Tools build")
@@ -67,6 +65,8 @@
 set_target_properties(spirv-tools-pkg-config PROPERTIES FOLDER "SPIRV-Tools build")
 set_target_properties(spirv-tools-shared-pkg-config PROPERTIES FOLDER "SPIRV-Tools build")
 
+endif()
+
 set_target_properties(vk_pipeline PROPERTIES
     POSITION_INDEPENDENT_CODE 1
     FOLDER "SwiftShader VK"
--- SwiftShader-20201123.orig/src/Reactor/CMakeLists.txt
+++ SwiftShader-20201123/src/Reactor/CMakeLists.txt
@@ -136,8 +136,16 @@
         ${ROOT_PROJECT_COMPILE_OPTIONS}
 )
 
-target_link_libraries(ReactorLLVM
-    PRIVATE
-        llvm
-        ${REACTOR_PRIVATE_LINK_LIBRARIES}
-)
+if(TARGET llvm)
+    target_link_libraries(ReactorLLVM
+        PRIVATE
+            llvm
+            ${REACTOR_PRIVATE_LINK_LIBRARIES}
+    )
+else()
+    target_link_libraries(ReactorLLVM
+        PRIVATE
+            LLVM
+            ${REACTOR_PRIVATE_LINK_LIBRARIES}
+    )
+endif()
--- SwiftShader-20201123.orig/src/Vulkan/CMakeLists.txt
+++ SwiftShader-20201123/src/Vulkan/CMakeLists.txt
@@ -223,7 +223,8 @@
     # The path is output to a JSON file, which requires backslashes to be escaped.
     set(ICD_LIBRARY_PATH ".\\\\${ICD_LIBRARY_PATH}")
 else()
-    set(ICD_LIBRARY_PATH "./${ICD_LIBRARY_PATH}")
+    include(GNUInstallDirs)
+    set(ICD_LIBRARY_PATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${ICD_LIBRARY_PATH}")
 endif()
 configure_file(
     "vk_swiftshader_icd.json.tmpl"
--- SwiftShader-20201123.orig/src/Vulkan/VkStringify.cpp
+++ SwiftShader-20201123/src/Vulkan/VkStringify.cpp
@@ -16,11 +16,13 @@
 
 #include "System/Debug.hpp"
 
-#include <vulkan/vk_ext_provoking_vertex.h>
-#include <vulkan/vk_google_filtering_precision.h>
+#include "vk_ext_provoking_vertex.h"
+#include "vk_google_filtering_precision.h"
+#ifndef NDEBUG
 #define VULKAN_HPP_NO_EXCEPTIONS
 #define VULKAN_HPP_NAMESPACE vkhpp
 #include <vulkan/vulkan.hpp>
+#endif
 
 namespace vk {
 
--- SwiftShader-20201123.orig/src/Vulkan/VulkanPlatform.hpp
+++ SwiftShader-20201123/src/Vulkan/VulkanPlatform.hpp
@@ -49,9 +49,8 @@
 	typedef VkNonDispatchableHandle<object##Ptr> object; \
 	template class VkNonDispatchableHandle<object##Ptr>;
 
-#include <vulkan/vk_ext_provoking_vertex.h>
-#include <vulkan/vk_google_filtering_precision.h>
-#include <vulkan/vulkan_core.h>
+#include "vk_ext_provoking_vertex.h"
+#include "vk_google_filtering_precision.h"
 
 namespace vk {
 // Here we define constants that used to be in the Vulkan headers, but are not part of the spec.
--- SwiftShader-20201123.orig/src/Vulkan/vk_ext_provoking_vertex.h
+++ SwiftShader-20201123/src/Vulkan/vk_ext_provoking_vertex.h
@@ -0,0 +1,56 @@
+// Copyright 2019 The SwiftShader Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include <vulkan/vulkan_core.h>
+
+// THIS FILE SHOULD BE DELETED IF VK_EXT_provoking_vertex IS EVER ADDED TO THE VULKAN HEADERS
+#ifdef VK_EXT_provoking_vertex
+#error "VK_EXT_provoking_vertex is already defined in the Vulkan headers, you can delete this file"
+#endif
+
+static constexpr VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = static_cast<VkStructureType>(1000254000);
+static constexpr VkStructureType VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = static_cast<VkStructureType>(1000254001);
+static constexpr VkStructureType VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = static_cast<VkStructureType>(1000254002);
+
+#define VK_EXT_provoking_vertex 1
+#define VK_EXT_PROVOKING_VERTEX_SPEC_VERSION 1
+#define VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME "VK_EXT_provoking_vertex"
+
+typedef enum VkProvokingVertexModeEXT {
+    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
+    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
+    VK_PROVOKING_VERTEX_MODE_BEGIN_RANGE_EXT = VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT,
+    VK_PROVOKING_VERTEX_MODE_END_RANGE_EXT = VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT,
+    VK_PROVOKING_VERTEX_MODE_RANGE_SIZE_EXT = (VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT - VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT + 1),
+    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
+} VkProvokingVertexModeEXT;
+
+typedef struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
+    VkStructureType    sType;
+    void*              pNext;
+    VkBool32           provokingVertexLast;
+} VkPhysicalDeviceProvokingVertexFeaturesEXT;
+
+typedef struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
+    VkStructureType    sType;
+    void*              pNext;
+    VkBool32           provokingVertexModePerPipeline;
+} VkPhysicalDeviceProvokingVertexPropertiesEXT;
+
+typedef struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
+    VkStructureType             sType;
+    const void*                 pNext;
+    VkProvokingVertexModeEXT    provokingVertexMode;
+} VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
+
--- SwiftShader-20201123.orig/src/Vulkan/vk_google_filtering_precision.h
+++ SwiftShader-20201123/src/Vulkan/vk_google_filtering_precision.h
@@ -0,0 +1,41 @@
+// Copyright 2020 The SwiftShader Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include <vulkan/vulkan_core.h>
+
+// THIS FILE SHOULD BE DELETED IF VK_GOOGLE_sampler_filtering_precision IS EVER ADDED TO THE VULKAN HEADERS
+#ifdef VK_GOOGLE_sampler_filtering_precision
+#error "VK_GOOGLE_sampler_filtering_precision is already defined in the Vulkan headers, you can delete this file"
+#endif
+
+static constexpr VkStructureType VK_STRUCTURE_TYPE_SAMPLER_FILTERING_PRECISION_GOOGLE = static_cast<VkStructureType>(1000264000);
+
+#define VK_GOOGLE_sampler_filtering_precisions 1
+#define VK_GOOGLE_SAMPLER_FILTERING_PRECISION_SPEC_VERSION 1
+#define VK_GOOGLE_SAMPLER_FILTERING_PRECISION_EXTENSION_NAME "VK_GOOGLE_sampler_filtering_precision"
+
+typedef enum VkSamplerFilteringPrecisionModeGOOGLE {
+    VK_SAMPLER_FILTERING_PRECISION_MODE_LOW_GOOGLE = 0,
+    VK_SAMPLER_FILTERING_PRECISION_MODE_HIGH_GOOGLE = 1,
+    VK_SAMPLER_FILTERING_PRECISION_MODE_BEGIN_RANGE_GOOGLE = VK_SAMPLER_FILTERING_PRECISION_MODE_LOW_GOOGLE,
+    VK_SAMPLER_FILTERING_PRECISION_MODE_END_RANGE_GOOGLE = VK_SAMPLER_FILTERING_PRECISION_MODE_HIGH_GOOGLE,
+    VK_SAMPLER_FILTERING_PRECISION_MODE_RANGE_SIZE_GOOGLE = (VK_SAMPLER_FILTERING_PRECISION_MODE_HIGH_GOOGLE - VK_SAMPLER_FILTERING_PRECISION_MODE_LOW_GOOGLE + 1),
+    VK_SAMPLER_FILTERING_PRECISION_MODE_MAX_ENUM_GOOGLE = 0x7FFFFFFF
+} VkSamplerFilteringPrecisionModeGOOGLE;
+
+typedef struct VkSamplerFilteringPrecisionGOOGLE {
+    VkStructureType                       sType;
+    const void*                           pNext;
+    VkSamplerFilteringPrecisionModeGOOGLE samplerFilteringPrecisionMode;
+} VkSamplerFilteringPrecisionGOOGLE;

# source
https://swiftshader.googlesource.com/SwiftShader/+archive/43bb60e1fa119d80b449c6550dd2b72328b101b9.tar.gz
