# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build cairo-build harfbuzz-old-build"

PKG_CONFIG_PATH=/wl/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure (ac-2.63; am-1.11; lt-2.2.6)
libtoolize -c -f; aclocal -I m4; autoconf; autoheader -f; automake -a -c
rm -rf pango/opentype
PKG_CONFIG_PATH=/wl/lib/pkgconfig ./configure --with-system-harfbuzz=old --prefix=/wl

# build
make

# install
install -d $DESTDIR/wl/bin
install pango/.libs/pango-querymodules $DESTDIR/wl/bin
install pango-view/.libs/pango-view $DESTDIR/wl/bin
install -d $DESTDIR/wl/etc/pango
install -d $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-attributes.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-bidi-type.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-break.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-context.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-coverage.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-engine.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-enum-types.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-features.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-font.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-fontmap.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-fontset.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-glyph-item.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-glyph.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-gravity.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-item.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-language.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-layout.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-matrix.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-renderer.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-script.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-tabs.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-types.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pango-utils.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pangocairo.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pangofc-decoder.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pangofc-font.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pangofc-fontmap.h $DESTDIR/wl/include/pango-1.0/pango
install -m 644 pango/pangoft2.h $DESTDIR/wl/include/pango-1.0/pango
install -d $DESTDIR/wl/lib
install pango/.libs/libpango-1.0.so.0.* $DESTDIR/wl/lib/libpango-1.0.so.0
ln -sf libpango-1.0.so.0 $DESTDIR/wl/lib/libpango-1.0.so
install pango/.libs/libpangocairo-1.0.so.0.* $DESTDIR/wl/lib/libpangocairo-1.0.so.0
ln -sf libpangocairo-1.0.so.0 $DESTDIR/wl/lib/libpangocairo-1.0.so
install pango/.libs/libpangoft2-1.0.so.0.* $DESTDIR/wl/lib/libpangoft2-1.0.so.0
ln -sf libpangoft2-1.0.so.0 $DESTDIR/wl/lib/libpangoft2-1.0.so
install -d $DESTDIR/wl/lib/pango/1.6.0/modules
install modules/basic/.libs/pango-basic-fc.so $DESTDIR/wl/lib/pango/1.6.0/modules
install -d $DESTDIR/wl/lib/pkgconfig
install -m 644 pango.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 pangocairo.pc $DESTDIR/wl/lib/pkgconfig
install -m 644 pangoft2.pc $DESTDIR/wl/lib/pkgconfig
LD_LIBRARY_PATH=$DESTDIR/wl/lib $DESTDIR/wl/bin/pango-querymodules > $DESTDIR/wl/etc/pango/pango.modules

# build.pc
install -d $DESTDIR/wl/share/pkgconfig
cat > $DESTDIR/wl/share/pkgconfig/pango-build.pc << EOF
Name: pango
Version: 1.26.2
Description: A library for layout and rendering of text
Requires: $REQUIRES

devel=\\
/wl/include/pango-1.0/pango/pango.h \\
/wl/include/pango-1.0/pango/pango-attributes.h \\
/wl/include/pango-1.0/pango/pango-bidi-type.h \\
/wl/include/pango-1.0/pango/pango-break.h \\
/wl/include/pango-1.0/pango/pango-context.h \\
/wl/include/pango-1.0/pango/pango-coverage.h \\
/wl/include/pango-1.0/pango/pango-engine.h \\
/wl/include/pango-1.0/pango/pango-enum-types.h \\
/wl/include/pango-1.0/pango/pango-features.h \\
/wl/include/pango-1.0/pango/pango-font.h \\
/wl/include/pango-1.0/pango/pango-fontmap.h \\
/wl/include/pango-1.0/pango/pango-fontset.h \\
/wl/include/pango-1.0/pango/pango-glyph-item.h \\
/wl/include/pango-1.0/pango/pango-glyph.h \\
/wl/include/pango-1.0/pango/pango-gravity.h \\
/wl/include/pango-1.0/pango/pango-item.h \\
/wl/include/pango-1.0/pango/pango-language.h \\
/wl/include/pango-1.0/pango/pango-layout.h \\
/wl/include/pango-1.0/pango/pango-matrix.h \\
/wl/include/pango-1.0/pango/pango-renderer.h \\
/wl/include/pango-1.0/pango/pango-script.h \\
/wl/include/pango-1.0/pango/pango-tabs.h \\
/wl/include/pango-1.0/pango/pango-types.h \\
/wl/include/pango-1.0/pango/pango-utils.h \\
/wl/include/pango-1.0/pango/pangocairo.h \\
/wl/include/pango-1.0/pango/pangofc-decoder.h \\
/wl/include/pango-1.0/pango/pangofc-font.h \\
/wl/include/pango-1.0/pango/pangofc-fontmap.h \\
/wl/include/pango-1.0/pango/pangoft2.h \\
/wl/lib/libpango-1.0.so \\
/wl/lib/libpangocairo-1.0.so \\
/wl/lib/libpangoft2-1.0.so \\
/wl/lib/pkgconfig/pango.pc \\
/wl/lib/pkgconfig/pangocairo.pc \\
/wl/lib/pkgconfig/pangoft2.pc

exec=\\
/wl/bin/pango-querymodules \\
/wl/bin/pango-view \\
/wl/etc/pango/pango.modules \\
/wl/lib/libpango-1.0.so.0 \\
/wl/lib/libpangocairo-1.0.so.0 \\
/wl/lib/libpangoft2-1.0.so.0 \\
/wl/lib/pango/1.6.0/modules/pango-basic-fc.so
EOF

exit
--- pango-1.26.2.orig/configure.in
+++ pango-1.26.2/configure.in
@@ -52,6 +52,7 @@
         [http://bugzilla.gnome.org/enter_bug.cgi?product=pango])
 
 AC_CONFIG_SRCDIR([pango.pc.in])
+AC_CONFIG_MACRO_DIR([m4])
 
 dnl -Wno-portability tells automake to stop complaining about the
 dnl usage of GNU Make specific features.
@@ -226,6 +227,11 @@
                               [disable all source autogeneration rules])],,
               [enable_rebuilds=yes])
 
+AC_ARG_WITH(system-harfbuzz,
+   AC_HELP_STRING([--with-system-harfbuzz=no/yes/ng/old],
+                  [use system harfbuzz library @<:@default=no@:>@]),,
+                  [with_system_harfbuzz=no])
+
 AM_CONDITIONAL(CROSS_COMPILING, [test $cross_compiling = yes])
 
 have_x=false
@@ -265,7 +271,22 @@
   # By freetype, we really always mean freetype+fontconfig
   FREETYPE_CFLAGS="$FREETYPE_CFLAGS $FONTCONFIG_CFLAGS"
   FREETYPE_LIBS="$FREETYPE_LIBS $FONTCONFIG_LIBS"
+
+  if test "x$with_system_harfbuzz" = "xno"; then
+    OPENTYPE_LIBS="opentype/libharfbuzz.la"
+    OPENTYPE_DEPS="$OPENTYPE_LIBS"
+    OPENTYPE_SUBDIR=opentype
+  else
+    if test "x$with_system_harfbuzz" = "xyes" -o "x$with_system_harfbuzz" = "xng"; then
+      PKG_CHECK_MODULES(OPENTYPE, harfbuzz = 0.1)
+    else
+      PKG_CHECK_MODULES(OPENTYPE, harfbuzz-1)
+      OPENTYPE_CFLAGS="$OPENTYPE_CFLAGS -DHARFBUZZ_OLD"
+    fi
+  fi
 fi
+AC_SUBST(OPENTYPE_DEPS)
+AC_SUBST(OPENTYPE_SUBDIR)
 AM_CONDITIONAL(HAVE_FREETYPE, $have_freetype)
 
 #
@@ -981,7 +1002,6 @@
 Makefile 
 pango/Makefile
 pango/mini-fribidi/Makefile
-pango/opentype/Makefile
 pango/pango.rc
 pango/pangoft2.rc
 pango/pangowin32.rc
@@ -1018,6 +1038,10 @@
 pango-zip.sh
 ])
 
+if test "x$with_system_harfbuzz" = "xno"; then
+  AC_CONFIG_FILES([pango/opentype/Makefile])
+fi
+
 AC_CONFIG_FILES([tests/runtests.sh],
 	        [chmod +x tests/runtests.sh])
 
--- pango-1.26.2.orig/m4/gtk-doc.m4
+++ pango-1.26.2/m4/gtk-doc.m4
@@ -0,0 +1,39 @@
+dnl -*- mode: autoconf -*-
+
+# serial 1
+
+dnl Usage:
+dnl   GTK_DOC_CHECK([minimum-gtk-doc-version])
+AC_DEFUN([GTK_DOC_CHECK],
+[
+  AC_BEFORE([AC_PROG_LIBTOOL],[$0])dnl setup libtool first
+  AC_BEFORE([AM_PROG_LIBTOOL],[$0])dnl setup libtool first
+  dnl for overriding the documentation installation directory
+  AC_ARG_WITH([html-dir],
+    AS_HELP_STRING([--with-html-dir=PATH], [path to installed docs]),,
+    [with_html_dir='${datadir}/gtk-doc/html'])
+  HTML_DIR="$with_html_dir"
+  AC_SUBST([HTML_DIR])
+
+  dnl enable/disable documentation building
+  AC_ARG_ENABLE([gtk-doc],
+    AS_HELP_STRING([--enable-gtk-doc],
+                   [use gtk-doc to build documentation [[default=no]]]),,
+    [enable_gtk_doc=no])
+
+  if test x$enable_gtk_doc = xyes; then
+    ifelse([$1],[],
+      [PKG_CHECK_EXISTS([gtk-doc],,
+                        AC_MSG_ERROR([gtk-doc not installed and --enable-gtk-doc requested]))],
+      [PKG_CHECK_EXISTS([gtk-doc >= $1],,
+                        AC_MSG_ERROR([You need to have gtk-doc >= $1 installed to build gtk-doc]))])
+  fi
+
+  AC_MSG_CHECKING([whether to build gtk-doc documentation])
+  AC_MSG_RESULT($enable_gtk_doc)
+
+  AC_PATH_PROGS(GTKDOC_CHECK,gtkdoc-check,)
+
+  AM_CONDITIONAL([ENABLE_GTK_DOC], [test x$enable_gtk_doc = xyes])
+  AM_CONDITIONAL([GTK_DOC_USE_LIBTOOL], [test -n "$LIBTOOL"])
+])
--- pango-1.26.2.orig/pango/Makefile.am
+++ pango-1.26.2/pango/Makefile.am
@@ -4,10 +4,6 @@
 # which are more like other make's VPATH.
 GPATH = $(srcdir)
 
-if HAVE_FREETYPE
-OPENTYPE_SUBDIR=opentype
-endif
-
 EXTRA_DIST = 
 BUILT_GIRSOURCES =
 
@@ -15,7 +11,7 @@
 
 SUBDIRS = $(OPENTYPE_SUBDIR) $(FRIBIDI_SUBDIR)
 
-DIST_SUBDIRS = mini-fribidi opentype
+DIST_SUBDIRS = mini-fribidi
 
 INCLUDES =						\
 	-DG_LOG_DOMAIN=\"Pango\"			\
@@ -238,16 +234,17 @@
 	pangofc-decoder.c	\
 	pangoft2.c
 
+libpangoft2_1_0_la_CFLAGS = $(OPENTYPE_CFLAGS)
 libpangoft2_1_0_la_LDFLAGS = $(LIBRARY_LIBTOOL_OPTIONS)
 libpangoft2_1_0_la_LIBADD =			\
-	opentype/libharfbuzz.la			\
+	$(OPENTYPE_LIBS)			\
 	libpango-$(PANGO_API_VERSION).la	\
 	$(INCLUDED_FC_MODULES)			\
 	$(GLIB_LIBS)				\
 	$(FREETYPE_LIBS)			\
 	$(libm)
 libpangoft2_1_0_la_DEPENDENCIES =		\
-	opentype/libharfbuzz.la			\
+	$(OPENTYPE_DEPS)			\
 	libpango-$(PANGO_API_VERSION).la	\
 	$(INCLUDED_FC_MODULES)
 libpangoft2_1_0_la_SOURCES =   	\
--- pango-1.26.2.orig/pango/opentype/hb-ot-layout.cc
+++ pango-1.26.2/pango/opentype/hb-ot-layout.cc
@@ -279,7 +279,6 @@
 
 void
 hb_ot_layout_build_glyph_classes (hb_face_t      *face,
-				  uint16_t        num_total_glyphs,
 				  hb_codepoint_t *glyphs,
 				  unsigned char  *klasses,
 				  uint16_t        count)
@@ -293,7 +292,7 @@
     return;
 
   if (layout->new_gdef.len == 0) {
-    layout->new_gdef.klasses = (unsigned char *) calloc (num_total_glyphs, sizeof (unsigned char));
+    layout->new_gdef.klasses = (unsigned char *) calloc (count, sizeof (unsigned char));
     layout->new_gdef.len = count;
   }
 
--- pango-1.26.2.orig/pango/opentype/hb-ot-layout.h
+++ pango-1.26.2/pango/opentype/hb-ot-layout.h
@@ -66,7 +66,6 @@
 
 void
 hb_ot_layout_build_glyph_classes (hb_face_t      *face,
-				  uint16_t        num_total_glyphs,
 				  hb_codepoint_t *glyphs,
 				  unsigned char  *klasses,
 				  uint16_t        count);
--- pango-1.26.2.orig/pango/pango-ot-buffer.c
+++ pango-1.26.2/pango/pango-ot-buffer.c
@@ -25,26 +25,47 @@
 #include "pangofc-private.h"
 #include "pango-impl-utils.h"
 
+#ifdef HARFBUZZ_OLD
+/* cache a single HB_Buffer */
+static HB_Buffer cached_buffer = NULL;
+#else
 /* cache a single hb_buffer_t */
 static hb_buffer_t *cached_buffer = NULL;
+#endif
 G_LOCK_DEFINE_STATIC (cached_buffer);
 
+#ifdef HARFBUZZ_OLD
+static HB_Buffer
+#else
 static hb_buffer_t *
+#endif
 acquire_buffer (gboolean *free_buffer)
 {
+#ifdef HARFBUZZ_OLD
+  HB_Buffer buffer;
+#else
   hb_buffer_t *buffer;
+#endif
 
   if (G_LIKELY (G_TRYLOCK (cached_buffer)))
     {
       if (G_UNLIKELY (!cached_buffer))
+#ifdef HARFBUZZ_OLD
+	hb_buffer_new (&cached_buffer);
+#else
 	cached_buffer = hb_buffer_create (64);
+#endif
 
       buffer = cached_buffer;
       *free_buffer = FALSE;
     }
   else
     {
+#ifdef HARFBUZZ_OLD
+      hb_buffer_new (&buffer);
+#else
       buffer = hb_buffer_create (32);
+#endif
       *free_buffer = TRUE;
     }
 
@@ -52,15 +73,27 @@
 }
 
 static void
+#ifdef HARFBUZZ_OLD
+release_buffer (HB_Buffer buffer, gboolean free_buffer)
+#else
 release_buffer (hb_buffer_t *buffer, gboolean free_buffer)
+#endif
 {
+#ifdef HARFBUZZ_OLD
+  if (G_LIKELY (!free_buffer))
+#else
   if (G_LIKELY (!free_buffer) && hb_buffer_get_reference_count (buffer) == 1)
+#endif
     {
       hb_buffer_clear (buffer);
       G_UNLOCK (cached_buffer);
     }
   else
+#ifdef HARFBUZZ_OLD
+    hb_buffer_free (buffer);
+#else
     hb_buffer_destroy (buffer);
+#endif
 }
 
 /**
@@ -156,8 +189,10 @@
 			 gboolean       rtl)
 {
   buffer->rtl = rtl != FALSE;
+#ifndef HARFBUZZ_OLD
   hb_buffer_set_direction (buffer->buffer,
 			   buffer->rtl ? HB_DIRECTION_RTL : HB_DIRECTION_LTR);
+#endif
 }
 
 /**
@@ -198,15 +233,27 @@
 			    int                  *n_glyphs)
 {
   if (glyphs)
+#ifdef HARFBUZZ_OLD
+    *glyphs = (PangoOTGlyph *) buffer->buffer->in_string;
+#else
     *glyphs = (PangoOTGlyph *) hb_buffer_get_glyph_infos (buffer->buffer);
+#endif
 
   if (n_glyphs)
+#ifdef HARFBUZZ_OLD
+    *n_glyphs = buffer->buffer->in_length;
+#else
     *n_glyphs = hb_buffer_get_len (buffer->buffer);
+#endif
 }
 
 static void
 apply_gpos_ltr (PangoGlyphString    *glyphs,
+#ifdef HARFBUZZ_OLD
+		HB_Position          positions,
+#else
 		hb_glyph_position_t *positions,
+#endif
 		gboolean             scale,
 		double               xscale,
 		double               yscale,
@@ -261,7 +308,11 @@
 
 static void
 apply_gpos_rtl (PangoGlyphString    *glyphs,
+#ifdef HARFBUZZ_OLD
+		HB_Position          positions,
+#else
 		hb_glyph_position_t *positions,
+#endif
 		gboolean             scale,
 		double               xscale,
 		double               yscale,
@@ -334,13 +385,22 @@
 			PangoGlyphString    *glyphs)
 {
   FT_Face face;
+#ifdef HARFBUZZ_OLD
+  HB_GDEF gdef;
+  HB_UShort property;
+#else
   hb_face_t *hb_face;
+#endif
   unsigned int i;
   int last_cluster;
 
   unsigned int len;
   PangoOTGlyph *otglyphs;
+#ifdef HARFBUZZ_OLD
+  HB_Position positions;
+#else
   hb_glyph_position_t *positions;
+#endif
 
   face = pango_fc_font_lock_face (buffer->font);
   g_assert (face);
@@ -366,7 +426,11 @@
       last_cluster = glyphs->log_clusters[i];
     }
 
+#ifdef HARFBUZZ_OLD
+  gdef = pango_ot_info_get_gdef (pango_ot_info_get (face));
+#else
   hb_face = _pango_ot_info_get_hb_face (pango_ot_info_get (face));
+#endif
 
   /* Apply default positioning */
   for (i = 0; i < (unsigned int)glyphs->num_glyphs; i++)
@@ -376,7 +440,13 @@
 	  PangoRectangle logical_rect;
 
 	  if (buffer->zero_width_marks &&
+#ifdef HARFBUZZ_OLD
+	      gdef &&
+	      HB_GDEF_Get_Glyph_Property (gdef, glyphs->glyphs[i].glyph, &property) == HB_Err_Ok &&
+	      (property == HB_GDEF_MARK || (property & HB_LOOKUP_FLAG_IGNORE_SPECIAL_MARKS) != 0))
+#else
 	      hb_ot_layout_get_glyph_class (hb_face, glyphs->glyphs[i].glyph) == HB_OT_LAYOUT_GLYPH_CLASS_MARK)
+#endif
 	    {
 	      glyphs->glyphs[i].geometry.width = 0;
 	    }
@@ -399,7 +469,11 @@
       pango_glyph_string_reverse_range (glyphs, 0, glyphs->num_glyphs);
     }
 
+#ifdef HARFBUZZ_OLD
+  positions = buffer->buffer->positions;
+#else
   positions = hb_buffer_get_glyph_positions (buffer->buffer);
+#endif
   if (buffer->applied_gpos)
     {
       gboolean scale = FALSE;
--- pango-1.26.2.orig/pango/pango-ot-info.c
+++ pango-1.26.2/pango/pango-ot-info.c
@@ -23,12 +23,22 @@
 
 #include "pango-ot-private.h"
 #include "pango-impl-utils.h"
-#include FT_TRUETYPE_TABLES_H
 
 static void pango_ot_info_class_init (GObjectClass *object_class);
 static void pango_ot_info_finalize   (GObject *object);
 
+#ifdef HARFBUZZ_OLD
+enum
+{
+  INFO_LOADED_GDEF = 1 << 0,
+  INFO_LOADED_GSUB = 1 << 1,
+  INFO_LOADED_GPOS = 1 << 2
+};
+#else
+#include FT_TRUETYPE_TABLES_H
+
 static void synthesize_class_def (PangoOTInfo *info);
+#endif
 
 static GObjectClass *parent_class;
 
@@ -74,8 +84,26 @@
 {
   PangoOTInfo *info = PANGO_OT_INFO (object);
 
+#ifdef HARFBUZZ_OLD
+  if (info->gdef)
+    {
+      HB_Done_GDEF_Table (info->gdef);
+      info->gdef = NULL;
+    }
+  if (info->gsub)
+    {
+      HB_Done_GSUB_Table (info->gsub);
+      info->gsub = NULL;
+    }
+  if (info->gpos)
+    {
+      HB_Done_GPOS_Table (info->gpos);
+      info->gpos = NULL;
+    }
+#else
   if (info->hb_face)
     hb_face_destroy (info->hb_face);
+#endif
 
   parent_class->finalize (object);
 }
@@ -90,6 +118,7 @@
   g_object_unref (info);
 }
 
+#ifndef HARFBUZZ_OLD
 static hb_blob_t *
 _get_table  (hb_tag_t tag, void *user_data)
 {
@@ -114,7 +143,7 @@
 			 HB_MEMORY_MODE_WRITABLE,
 			 g_free, buffer);
 }
-
+#endif
 
 /**
  * pango_ot_info_get:
@@ -144,6 +173,7 @@
 
       info->face = face;
 
+#ifndef HARFBUZZ_OLD
       if (face->stream->base != NULL) {
 	hb_blob_t *blob;
 
@@ -163,16 +193,25 @@
       /* XXX this is such a waste if not SFNT */
       if (!hb_ot_layout_has_font_glyph_classes (info->hb_face))
 	synthesize_class_def (info);
+#endif
     }
 
   return info;
 }
 
+#ifdef HARFBUZZ_OLD
+static gboolean
+is_truetype (FT_Face face)
+{
+  return FT_IS_SFNT(face);
+}
+#else
 hb_face_t *
 _pango_ot_info_get_hb_face (PangoOTInfo *info)
 {
   return info->hb_face;
 }
+#endif
 
 typedef struct _GlyphInfo GlyphInfo;
 
@@ -211,14 +250,14 @@
     case G_UNICODE_COMBINING_MARK:
     case G_UNICODE_ENCLOSING_MARK:
     case G_UNICODE_NON_SPACING_MARK:
-      *class = 3;		/* Mark glyph (non-spacing combining glyph) */
+      *class = 8;		/* Mark glyph (non-spacing combining glyph) */
       return TRUE;
     case G_UNICODE_UNASSIGNED:
     case G_UNICODE_PRIVATE_USE:
       return FALSE;		/* Unknown, don't assign a class; classes get
 				 * propagated during GSUB application */
     default:
-      *class = 1;               /* Base glyph (single character, spacing glyph) */
+      *class = 2;		/* Base glyph (single character, spacing glyph) */
       return TRUE;
     }
 }
@@ -246,8 +285,13 @@
 synthesize_class_def (PangoOTInfo *info)
 {
   GArray *glyph_infos;
+#ifdef HARFBUZZ_OLD
+  HB_UShort *glyph_indices;
+  HB_UShort *classes;
+#else
   hb_codepoint_t *glyph_indices;
   unsigned char *classes;
+#endif
   gunichar charcode;
   FT_UInt glyph;
   unsigned int i, j;
@@ -283,8 +327,13 @@
    */
   g_array_sort (glyph_infos, compare_glyph_info);
 
+#ifdef HARFBUZZ_OLD
+  glyph_indices = g_new (HB_UShort, glyph_infos->len);
+  classes = g_new (HB_UShort, glyph_infos->len);
+#else
   glyph_indices = g_new (hb_codepoint_t, glyph_infos->len);
   classes = g_new (unsigned char, glyph_infos->len);
+#endif
 
   for (i = 0, j = 0; i < glyph_infos->len; i++)
     {
@@ -301,8 +350,12 @@
 
   g_array_free (glyph_infos, TRUE);
 
-  hb_ot_layout_build_glyph_classes (info->hb_face, info->face->num_glyphs,
-				    glyph_indices, classes, j);
+#ifdef HARFBUZZ_OLD
+  HB_GDEF_Build_ClassDefinition (info->gdef, info->face->num_glyphs, j,
+				 glyph_indices, classes);
+#else
+  hb_ot_layout_build_glyph_classes (info->hb_face, glyph_indices, classes, j);
+#endif
 
   g_free (glyph_indices);
   g_free (classes);
@@ -311,6 +364,122 @@
     FT_Set_Charmap (info->face, old_charmap);
 }
 
+#ifdef HARFBUZZ_OLD
+HB_GDEF
+pango_ot_info_get_gdef (PangoOTInfo *info)
+{
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (!(info->loaded & INFO_LOADED_GDEF))
+    {
+      HB_Error error;
+
+      info->loaded |= INFO_LOADED_GDEF;
+
+      if (is_truetype (info->face))
+	{
+	  error = HB_Load_GDEF_Table (info->face, &info->gdef);
+
+	  if (error && error != HB_Err_Not_Covered)
+	    g_warning ("Error loading GDEF table 0x%04X", error);
+
+	  if (!info->gdef)
+	    error = HB_New_GDEF_Table (&info->gdef);
+
+	  if (info->gdef && !info->gdef->GlyphClassDef.loaded)
+	    synthesize_class_def (info);
+	}
+    }
+
+  return info->gdef;
+}
+
+HB_GSUB
+pango_ot_info_get_gsub (PangoOTInfo *info)
+{
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (!(info->loaded & INFO_LOADED_GSUB))
+    {
+      HB_Error error;
+      HB_GDEF gdef = pango_ot_info_get_gdef (info);
+
+      info->loaded |= INFO_LOADED_GSUB;
+
+      if (is_truetype (info->face))
+	{
+	  error = HB_Load_GSUB_Table (info->face, &info->gsub, gdef);
+
+	  if (error && error != HB_Err_Not_Covered)
+	    g_warning ("Error loading GSUB table 0x%04X", error);
+	}
+    }
+
+  return info->gsub;
+}
+
+HB_GPOS
+pango_ot_info_get_gpos (PangoOTInfo *info)
+{
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (!(info->loaded & INFO_LOADED_GPOS))
+    {
+      HB_Error error;
+      HB_GDEF gdef = pango_ot_info_get_gdef (info);
+
+      info->loaded |= INFO_LOADED_GPOS;
+
+      if (is_truetype (info->face))
+	{
+	  error = HB_Load_GPOS_Table (info->face, &info->gpos, gdef);
+
+	  if (error && error != HB_Err_Not_Covered)
+	    g_warning ("Error loading GPOS table 0x%04X", error);
+	}
+    }
+
+  return info->gpos;
+}
+
+static gboolean
+get_tables (PangoOTInfo      *info,
+	    PangoOTTableType  table_type,
+	    HB_ScriptList  **script_list,
+	    HB_FeatureList **feature_list)
+{
+  if (table_type == PANGO_OT_TABLE_GSUB)
+    {
+      HB_GSUB gsub = pango_ot_info_get_gsub (info);
+
+      if (!gsub)
+	return FALSE;
+      else
+	{
+	  if (script_list)
+	    *script_list = &gsub->ScriptList;
+	  if (feature_list)
+	    *feature_list = &gsub->FeatureList;
+	  return TRUE;
+	}
+    }
+  else
+    {
+      HB_GPOS gpos = pango_ot_info_get_gpos (info);
+
+      if (!gpos)
+	return FALSE;
+      else
+	{
+	  if (script_list)
+	    *script_list = &gpos->ScriptList;
+	  if (feature_list)
+	    *feature_list = &gpos->FeatureList;
+	  return TRUE;
+	}
+    }
+}
+#else
 static hb_tag_t
 get_hb_table_type (PangoOTTableType table_type)
 {
@@ -320,6 +489,7 @@
     default:                  return HB_TAG_NONE;
   }
 }
+#endif
 
 /**
  * pango_ot_info_find_script:
@@ -346,11 +516,65 @@
 			   PangoOTTag        script_tag,
 			   guint            *script_index)
 {
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  int i;
+
+  if (script_index)
+    *script_index = PANGO_OT_NO_SCRIPT;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), FALSE);
+
+  if (!get_tables (info, table_type, &script_list, NULL))
+    return FALSE;
+
+  for (i=0; i < script_list->ScriptCount; i++)
+    {
+      if (script_list->ScriptRecord[i].ScriptTag == script_tag)
+	{
+	  if (script_index)
+	    *script_index = i;
+
+	  return TRUE;
+	}
+    }
+
+  /* try finding 'DFLT' */
+  script_tag = PANGO_OT_TAG_DEFAULT_SCRIPT;
+
+  for (i=0; i < script_list->ScriptCount; i++)
+    {
+      if (script_list->ScriptRecord[i].ScriptTag == script_tag)
+	{
+	  if (script_index)
+	    *script_index = i;
+
+	  return FALSE;
+	}
+    }
+
+  /* try with 'dflt'; MS site has had typos and many fonts use it now :( */
+  script_tag = PANGO_OT_TAG_MAKE ('d', 'f', 'l', 't');
+
+  for (i=0; i < script_list->ScriptCount; i++)
+    {
+      if (script_list->ScriptRecord[i].ScriptTag == script_tag)
+	{
+	  if (script_index)
+	    *script_index = i;
+
+	  return FALSE;
+	}
+    }
+
+  return FALSE;
+#else
   hb_tag_t tt = get_hb_table_type (table_type);
 
   return hb_ot_layout_table_find_script (info->hb_face, tt,
 					 script_tag,
 					 script_index);
+#endif
 }
 
 /**
@@ -382,6 +606,62 @@
 			     guint            *language_index,
 			     guint            *required_feature_index)
 {
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  HB_ScriptTable *script;
+  int i;
+
+  if (language_index)
+    *language_index = PANGO_OT_DEFAULT_LANGUAGE;
+  if (required_feature_index)
+    *required_feature_index = PANGO_OT_NO_FEATURE;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), FALSE);
+
+  if (script_index == PANGO_OT_NO_SCRIPT)
+    return FALSE;
+
+  if (!get_tables (info, table_type, &script_list, NULL))
+    return FALSE;
+
+  g_return_val_if_fail (script_index < script_list->ScriptCount, FALSE);
+  script = &script_list->ScriptRecord[script_index].Script;
+
+  for (i = 0; i < script->LangSysCount; i++)
+    {
+      if (script->LangSysRecord[i].LangSysTag == language_tag)
+	{
+	  if (language_index)
+	    *language_index = i;
+	  if (required_feature_index)
+	    *required_feature_index = script->LangSysRecord[i].LangSys.ReqFeatureIndex;
+	  return TRUE;
+	}
+    }
+
+  /* try with 'dflt'; MS site has had typos and many fonts use it now :( */
+  language_tag = PANGO_OT_TAG_MAKE ('d', 'f', 'l', 't');
+
+  for (i = 0; i < script->LangSysCount; i++)
+    {
+      if (script->LangSysRecord[i].LangSysTag == language_tag)
+	{
+	  if (language_index)
+	    *language_index = i;
+	  if (required_feature_index)
+	    *required_feature_index = script->LangSysRecord[i].LangSys.ReqFeatureIndex;
+	  return FALSE;
+	}
+    }
+
+  /* DefaultLangSys */
+  if (language_index)
+    *language_index = PANGO_OT_DEFAULT_LANGUAGE;
+  if (required_feature_index)
+    *required_feature_index = script->DefaultLangSys.ReqFeatureIndex;
+
+  return FALSE;
+#else
   gboolean ret;
   unsigned l_index;
   hb_tag_t tt = get_hb_table_type (table_type);
@@ -398,6 +678,7 @@
 						    required_feature_index);
 
   return ret;
+#endif
 }
 
 /**
@@ -430,6 +711,52 @@
 			     guint             language_index,
 			     guint            *feature_index)
 {
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  HB_FeatureList *feature_list;
+  HB_ScriptTable *script;
+  HB_LangSys *lang_sys;
+
+  int i;
+
+  if (feature_index)
+    *feature_index = PANGO_OT_NO_FEATURE;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), FALSE);
+
+  if (script_index == PANGO_OT_NO_SCRIPT)
+    return FALSE;
+
+  if (!get_tables (info, table_type, &script_list, &feature_list))
+    return FALSE;
+
+  g_return_val_if_fail (script_index < script_list->ScriptCount, FALSE);
+  script = &script_list->ScriptRecord[script_index].Script;
+
+  if (language_index == PANGO_OT_DEFAULT_LANGUAGE)
+    lang_sys = &script->DefaultLangSys;
+  else
+    {
+      g_return_val_if_fail (language_index < script->LangSysCount, FALSE);
+      lang_sys = &script->LangSysRecord[language_index].LangSys;
+    }
+
+  for (i = 0; i < lang_sys->FeatureCount; i++)
+    {
+      HB_UShort index = lang_sys->FeatureIndex[i];
+
+      if (index < feature_list->FeatureCount &&
+	  feature_list->FeatureRecord[index].FeatureTag == feature_tag)
+	{
+	  if (feature_index)
+	    *feature_index = index;
+
+	  return TRUE;
+	}
+    }
+
+  return FALSE;
+#else
   hb_tag_t tt = get_hb_table_type (table_type);
 
   return hb_ot_layout_language_find_feature (info->hb_face, tt,
@@ -437,6 +764,7 @@
 					     language_index,
 					     feature_tag,
 					     feature_index);
+#endif
 }
 
 /**
@@ -453,14 +781,31 @@
 pango_ot_info_list_scripts (PangoOTInfo      *info,
 			    PangoOTTableType  table_type)
 {
-  hb_tag_t tt = get_hb_table_type (table_type);
   PangoOTTag *result;
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  int i;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (!get_tables (info, table_type, &script_list, NULL))
+    return NULL;
+
+  result = g_new (PangoOTTag, script_list->ScriptCount + 1);
+
+  for (i=0; i < script_list->ScriptCount; i++)
+    result[i] = script_list->ScriptRecord[i].ScriptTag;
+
+  result[i] = 0;
+#else
+  hb_tag_t tt = get_hb_table_type (table_type);
   unsigned int count = 0;
 
   hb_ot_layout_table_get_script_tags (info->hb_face, tt, &count, NULL);
   result = g_new (PangoOTTag, count + 1);
   hb_ot_layout_table_get_script_tags (info->hb_face, tt, &count, result);
   result[count] = 0;
+#endif
 
   return result;
 }
@@ -483,14 +828,42 @@
 			      guint             script_index,
 			      PangoOTTag        language_tag G_GNUC_UNUSED)
 {
-  hb_tag_t tt = get_hb_table_type (table_type);
   PangoOTTag *result;
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  HB_ScriptTable *script;
+  int i;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (script_index == PANGO_OT_NO_SCRIPT)
+    {
+      result = g_new (PangoOTTag, 0+1);
+      result[0] = 0;
+      return result;
+    }
+
+  if (!get_tables (info, table_type, &script_list, NULL))
+    return NULL;
+
+  g_return_val_if_fail (script_index < script_list->ScriptCount, NULL);
+  script = &script_list->ScriptRecord[script_index].Script;
+
+  result = g_new (PangoOTTag, script->LangSysCount + 1);
+
+  for (i = 0; i < script->LangSysCount; i++)
+    result[i] = script->LangSysRecord[i].LangSysTag;
+
+  result[i] = 0;
+#else
+  hb_tag_t tt = get_hb_table_type (table_type);
   unsigned int count = 0;
 
   hb_ot_layout_script_get_language_tags (info->hb_face, tt, script_index, &count, NULL);
   result = g_new (PangoOTTag, count + 1);
   hb_ot_layout_script_get_language_tags (info->hb_face, tt, script_index, &count, result);
   result[count] = 0;
+#endif
 
   return result;
 }
@@ -517,18 +890,64 @@
 			      guint             script_index,
 			      guint             language_index)
 {
-  hb_tag_t tt = get_hb_table_type (table_type);
   PangoOTTag *result;
+#ifdef HARFBUZZ_OLD
+  HB_ScriptList *script_list;
+  HB_FeatureList *feature_list;
+  HB_ScriptTable *script;
+  HB_LangSys *lang_sys;
+
+  int i, j;
+
+  g_return_val_if_fail (PANGO_IS_OT_INFO (info), NULL);
+
+  if (script_index == PANGO_OT_NO_SCRIPT)
+    {
+      result = g_new (PangoOTTag, 0+1);
+      result[0] = 0;
+      return result;
+    }
+
+  if (!get_tables (info, table_type, &script_list, &feature_list))
+    return NULL;
+
+  g_return_val_if_fail (script_index < script_list->ScriptCount, NULL);
+  script = &script_list->ScriptRecord[script_index].Script;
+
+  if (language_index == PANGO_OT_DEFAULT_LANGUAGE)
+    lang_sys = &script->DefaultLangSys;
+  else
+    {
+      g_return_val_if_fail (language_index < script->LangSysCount, NULL);
+      lang_sys = &script->LangSysRecord[language_index].LangSys;
+    }
+
+  result = g_new (PangoOTTag, lang_sys->FeatureCount + 1);
+
+  j = 0;
+  for (i = 0; i < lang_sys->FeatureCount; i++)
+    {
+      HB_UShort index = lang_sys->FeatureIndex[i];
+
+      if (index < feature_list->FeatureCount)
+	result[j++] = feature_list->FeatureRecord[index].FeatureTag;
+    }
+
+  result[j] = 0;
+#else
+  hb_tag_t tt = get_hb_table_type (table_type);
   unsigned int count = 0;
 
   hb_ot_layout_language_get_feature_tags (info->hb_face, tt, script_index, language_index, &count, NULL);
   result = g_new (PangoOTTag, count + 1);
   hb_ot_layout_language_get_feature_tags (info->hb_face, tt, script_index, language_index, &count, result);
   result[count] = 0;
+#endif
 
   return result;
 }
 
+#ifndef HARFBUZZ_OLD
 void
 _pango_ot_info_substitute  (const PangoOTInfo    *info,
 			    const PangoOTRuleset *ruleset,
@@ -539,14 +958,12 @@
   for (i = 0; i < ruleset->rules->len; i++)
     {
       PangoOTRule *rule = &g_array_index (ruleset->rules, PangoOTRule, i);
-      hb_mask_t mask;
       unsigned int lookup_count, j;
       unsigned int lookup_indexes[1000];
 
       if (rule->table_type != PANGO_OT_TABLE_GSUB)
 	continue;
 
-      mask = rule->property_bit;
       lookup_count = G_N_ELEMENTS (lookup_indexes);
       hb_ot_layout_feature_get_lookup_indexes (info->hb_face,
 					       HB_OT_TAG_GSUB,
@@ -587,14 +1004,12 @@
   for (i = 0; i < ruleset->rules->len; i++)
     {
       PangoOTRule *rule = &g_array_index (ruleset->rules, PangoOTRule, i);
-      hb_mask_t mask;
       unsigned int lookup_count, j;
       unsigned int lookup_indexes[1000];
 
       if (rule->table_type != PANGO_OT_TABLE_GPOS)
 	continue;
 
-      mask = rule->property_bit;
       lookup_count = G_N_ELEMENTS (lookup_indexes);
       hb_ot_layout_feature_get_lookup_indexes (info->hb_face,
 					       HB_OT_TAG_GPOS,
@@ -637,3 +1052,4 @@
 
   hb_font_destroy (hb_font);
 }
+#endif
--- pango-1.26.2.orig/pango/pango-ot-private.h
+++ pango-1.26.2/pango/pango-ot-private.h
@@ -25,8 +25,12 @@
 #include <glib-object.h>
 
 #include <pango/pango-ot.h>
+#ifdef HARFBUZZ_OLD
+#include "opentype/harfbuzz.h"
+#else
 #include "opentype/hb-ot.h"
 #include "opentype/hb-glib.h"
+#endif
 
 G_BEGIN_DECLS
 
@@ -40,7 +44,13 @@
 
   FT_Face face;
 
+#ifdef HARFBUZZ_OLD
+  HB_GSUB gsub;
+  HB_GDEF gdef;
+  HB_GPOS gpos;
+#else
   hb_face_t *hb_face;
+#endif
 };
 
 struct _PangoOTInfoClass
@@ -80,7 +90,11 @@
 
 struct _PangoOTBuffer
 {
+#ifdef HARFBUZZ_OLD
+  HB_Buffer buffer;
+#else
   hb_buffer_t *buffer;
+#endif
   gboolean should_free_hb_buffer;
   PangoFcFont *font;
   guint rtl : 1;
@@ -88,6 +102,11 @@
   guint applied_gpos : 1;
 };
 
+#ifdef HARFBUZZ_OLD
+HB_GDEF pango_ot_info_get_gdef (PangoOTInfo *info);
+HB_GSUB pango_ot_info_get_gsub (PangoOTInfo *info);
+HB_GPOS pango_ot_info_get_gpos (PangoOTInfo *info);
+#else
 hb_face_t *_pango_ot_info_get_hb_face (PangoOTInfo *info);
 void _pango_ot_info_substitute  (const PangoOTInfo    *info,
 				 const PangoOTRuleset *ruleset,
@@ -95,6 +114,7 @@
 void _pango_ot_info_position    (const PangoOTInfo    *info,
 				 const PangoOTRuleset *ruleset,
 				 PangoOTBuffer        *buffer);
+#endif
 
 G_END_DECLS
 
--- pango-1.26.2.orig/pango/pango-ot-ruleset.c
+++ pango-1.26.2/pango/pango-ot-ruleset.c
@@ -485,9 +485,36 @@
   g_return_if_fail (PANGO_IS_OT_RULESET (ruleset));
   g_return_if_fail (ruleset->info != NULL);
 
+#ifdef HARFBUZZ_OLD
+  unsigned int i;
+  HB_GSUB gsub = NULL;
+
+  for (i = 0; i < ruleset->rules->len; i++)
+    {
+      PangoOTRule *rule = &g_array_index (ruleset->rules, PangoOTRule, i);
+
+      if (rule->table_type != PANGO_OT_TABLE_GSUB)
+	continue;
+
+      if (!gsub)
+	{
+	  gsub = pango_ot_info_get_gsub (ruleset->info);
+
+	  if (gsub)
+	    HB_GSUB_Clear_Features (gsub);
+	  else
+	    return;
+	}
+
+      HB_GSUB_Add_Feature (gsub, rule->feature_index, rule->property_bit);
+    }
+
+  HB_GSUB_Apply_String (gsub, buffer->buffer);
+#else
   _pango_ot_info_substitute (ruleset->info,
 			     ruleset,
 			     buffer);
+#endif
 }
 
 /**
@@ -507,9 +534,39 @@
   g_return_if_fail (PANGO_IS_OT_RULESET (ruleset));
   g_return_if_fail (ruleset->info != NULL);
 
+#ifdef HARFBUZZ_OLD
+  unsigned int i;
+  HB_GPOS gpos = NULL;
+
+  for (i = 0; i < ruleset->rules->len; i++)
+    {
+      PangoOTRule *rule = &g_array_index (ruleset->rules, PangoOTRule, i);
+
+      if (rule->table_type != PANGO_OT_TABLE_GPOS)
+	continue;
+
+      if (!gpos)
+	{
+	  gpos = pango_ot_info_get_gpos (ruleset->info);
+
+	  if (gpos)
+	    HB_GPOS_Clear_Features (gpos);
+	  else
+	    return;
+	}
+
+      HB_GPOS_Add_Feature (gpos, rule->feature_index, rule->property_bit);
+    }
+
+  if (HB_GPOS_Apply_String (ruleset->info->face, gpos, 0, buffer->buffer,
+			    FALSE /* enable device-dependant values */,
+			    buffer->rtl) == HB_Err_Ok)
+    buffer->applied_gpos = TRUE;
+#else
   _pango_ot_info_position   (ruleset->info,
 			     ruleset,
 			     buffer);
+#endif
 }
 
 
