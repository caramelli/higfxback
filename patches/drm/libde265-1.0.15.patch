# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build libstdc++-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/drm/share/pkgconfig pkg-config --exists sdl2-build; then
  SDL2=1
  REQUIRES="$REQUIRES sdl2-build"
fi

# configure (ac-2.71; am-1.16; lt-2.4.6)
libtoolize -c -f; aclocal; autoheader; autoconf; automake -a -c
PKG_CONFIG_PATH=/drm/lib/pkgconfig ./configure --disable-sherlock265 --disable-static --prefix=/drm

# build
make

# install
install -d $DESTDIR/drm/bin
install acceleration-speed/.libs/acceleration_speed $DESTDIR/drm/bin
test $SDL2 && install dec265/.libs/dec265 $DESTDIR/drm/bin
install tools/.libs/bjoentegaard $DESTDIR/drm/bin
install tools/.libs/block-rate-estim $DESTDIR/drm/bin
install tools/.libs/gen-enc-table $DESTDIR/drm/bin
install tools/.libs/rd-curves $DESTDIR/drm/bin
install tools/.libs/yuv-distortion $DESTDIR/drm/bin
install -d $DESTDIR/drm/include/libde265
install -m 644 libde265/de265.h $DESTDIR/drm/include/libde265
install -m 644 libde265/de265-version.h $DESTDIR/drm/include/libde265
install -d $DESTDIR/drm/lib
install libde265/.libs/libde265.so.0.* $DESTDIR/drm/lib/libde265.so.0
ln -sf libde265.so.0 $DESTDIR/drm/lib/libde265.so
install -d $DESTDIR/drm/lib/pkgconfig
install -m 644 libde265.pc $DESTDIR/drm/lib/pkgconfig

# build.pc
install -d $DESTDIR/drm/share/pkgconfig
cat > $DESTDIR/drm/share/pkgconfig/libde265-build.pc << EOF
Name: libde265
Version: 1.0.15
Description: H.265/HEVC decoder
Requires: $REQUIRES

devel=\\
/drm/include/libde265/de265.h \\
/drm/include/libde265/de265-version.h \\
/drm/lib/libde265.so \\
/drm/lib/pkgconfig/libde265.pc

exec=\\
/drm/bin/acceleration_speed \\
/drm/bin/bjoentegaard \\
/drm/bin/block-rate-estim \\
EOF
test $SDL2 && cat >> $DESTDIR/drm/share/pkgconfig/libde265-build.pc << EOF
/drm/bin/dec265 \\
EOF
cat >> $DESTDIR/drm/share/pkgconfig/libde265-build.pc << EOF
/drm/bin/gen-enc-table \\
/drm/bin/rd-curves \\
/drm/bin/yuv-distortion \\
/drm/lib/libde265.so.0
EOF

exit

# patch
--- libde265-1.0.15.orig/configure.ac
+++ libde265-1.0.15/configure.ac
@@ -21,8 +21,6 @@
 
 # ---------------------------------------------------------------------------
 
-AC_CANONICAL_SYSTEM
-
 AC_SUBST(LIBDE265_CURRENT)
 AC_SUBST(LIBDE265_REVISION)
 AC_SUBST(LIBDE265_AGE)
@@ -41,6 +39,7 @@
 
 # Initialize automake stuff
 AM_INIT_AUTOMAKE
+AM_MAINTAINER_MODE
 
 CFLAGS="$CFLAGS -std=c99"
 CXXFLAGS="$CXXFLAGS -Werror=return-type -Werror=unused-result -Werror=reorder"
@@ -109,9 +108,9 @@
 # Check if "__STRICT_ANSI__" is required.
 AC_MSG_CHECKING([if __STRICT_ANSI__ is required])
 AC_LANG_PUSH(C++)
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
 #include <vector>
-],[],[need_strict_ansi=no],[need_strict_ansi=yes]);
+],[])],[need_strict_ansi=no],[need_strict_ansi=yes]);
 AC_LANG_POP(C++)
 if eval "test x$need_strict_ansi = xyes"; then
   CFLAGS="$CFLAGS -D__STRICT_ANSI__"
@@ -122,21 +121,21 @@
 # Check if "std::shared_ptr" is "std::tr1::shared_ptr"
 AC_MSG_CHECKING([for std::shared_ptr])
 AC_LANG_PUSH(C++)
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
 #include <memory>
 ],[
 class A {};
 std::shared_ptr<A> a;
-],[has_std_shared_ptr=yes],[has_std_shared_ptr=no]);
+])],[has_std_shared_ptr=yes],[has_std_shared_ptr=no]);
 AC_MSG_RESULT([$has_std_shared_ptr])
 if eval "test x$has_std_shared_ptr = xno"; then
   AC_MSG_CHECKING([for std::tr1::shared_ptr])
-  AC_TRY_COMPILE([
+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
   #include <tr1/memory>
   ],[
   class A {};
   std::tr1::shared_ptr<A> a;
-  ],[has_std_tr1_shared_ptr=yes],[has_std_tr1_shared_ptr=no]);
+  ])],[has_std_tr1_shared_ptr=yes],[has_std_tr1_shared_ptr=no]);
   AC_MSG_RESULT([$has_std_tr1_shared_ptr])
   if eval "test x$has_std_tr1_shared_ptr = xyes"; then
     AC_DEFINE(USE_STD_TR1_NAMESPACE,1,[Define to 1 if the std::tr1 namespace should be included in the std namespace.])
@@ -147,7 +146,7 @@
 # Check if "std::move" is available (assume always available with clang)
 AC_MSG_CHECKING([for std::move])
 AC_LANG_PUSH(C++)
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
 #include <utility>
 ],[
 #if !defined(__clang__)
@@ -155,7 +154,7 @@
 A* a = new A();
 A* b = std::move(a);
 #endif
-],[has_std_move=yes],[has_std_move=no]);
+])],[has_std_move=yes],[has_std_move=no]);
 AC_LANG_POP(C++)
 if eval "test x$has_std_move = xno"; then
   AC_DEFINE(NEED_STD_MOVE_FALLBACK,1,[Define to 1 if a fallback for "std::move" is required.])
@@ -165,11 +164,11 @@
 # Check if "nullptr" is available
 AC_MSG_CHECKING([for nullptr])
 AC_LANG_PUSH(C++)
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
 ],[
 class A {};
 A* a = nullptr;
-],[has_nullptr=yes],[has_nullptr=no]);
+])],[has_nullptr=yes],[has_nullptr=no]);
 AC_LANG_POP(C++)
 if eval "test x$has_nullptr = xno"; then
   AC_DEFINE(NEED_NULLPTR_FALLBACK,1,[Define to 1 if a fallback for "nullptr" is required.])

# source
https://github.com/strukturag/libde265/releases/download/v1.0.15/libde265-1.0.15.tar.gz
