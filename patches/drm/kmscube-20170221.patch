# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-am-build egl-opengl-stubs-build libdrm-build libgbm-stub-build"

PKG_CONFIG_PATH=/drm/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure (ac-2.69; am-1.14)
aclocal; autoconf; automake -a -c
PKG_CONFIG_PATH=/drm/lib/pkgconfig LDFLAGS=-Wl,-rpath,/drm/lib ./configure --prefix=/drm

# build
make

# install
install -d $DESTDIR/drm/bin
install kmscube $DESTDIR/drm/bin

# build.pc
install -d $DESTDIR/drm/share/pkgconfig
cat > $DESTDIR/drm/share/pkgconfig/kmscube-build.pc << EOF
Name: kmscube
Version: 20170221
Description: Spinning OpenGL cube using KMS/DRM/GBM/EGL Native Platform Graphics Interface
Requires: $REQUIRES

exec=\\
/drm/bin/kmscube
EOF

exit

# patch
--- kmscube-20170221.orig/Makefile.am
+++ kmscube-20170221/Makefile.am
@@ -23,9 +23,6 @@
 
 bin_PROGRAMS = kmscube
 
-kmscube_LDFLAGS = \
-	-no-undefined
-
 kmscube_LDADD = \
 	$(DRM_LIBS) \
 	$(GBM_LIBS) \
@@ -34,6 +31,7 @@
 
 kmscube_CFLAGS = \
 	-O0 -g -lm \
+	-DEGL_NO_X11 \
 	$(DRM_CFLAGS) \
 	$(GBM_CFLAGS) \
 	$(EGL_CFLAGS) \
--- kmscube-20170221.orig/Makefile.in
+++ kmscube-20170221/Makefile.in
@@ -0,0 +1 @@
+# Makefile.in generated by automake 1.14.1
--- kmscube-20170221.orig/common.h
+++ kmscube-20170221/common.h
@@ -31,7 +31,7 @@
 #include <EGL/eglext.h>
 
 #include <gbm.h>
-#include <drm/drm_fourcc.h>
+#include <drm_fourcc.h>
 
 #define GL_GLEXT_PROTOTYPES 1
 #include <GLES2/gl2.h>
--- kmscube-20170221.orig/configure
+++ kmscube-20170221/configure
@@ -0,0 +1 @@
+# Generated by GNU Autoconf 2.69
--- kmscube-20170221.orig/configure.ac
+++ kmscube-20170221/configure.ac
@@ -25,9 +25,6 @@
 AC_PREREQ([2.60])
 AC_INIT([kmscube], [0.0.1], [https://github.com/robclark/kmscube/], [kmscube])
 AC_CONFIG_SRCDIR([Makefile.am])
-AC_CONFIG_HEADERS([config.h])
-AC_CONFIG_AUX_DIR([build-aux])
-AC_CONFIG_MACRO_DIR([m4])
 
 # Initialize Automake
 AM_INIT_AUTOMAKE([foreign dist-bzip2])
@@ -36,8 +33,7 @@
 # Enable quiet compiles on automake 1.11.
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 
-# Initialize libtool
-AC_PROG_LIBTOOL
+AC_PROG_CC
 
 # Obtain compiler/linker options for depedencies
 PKG_CHECK_MODULES(DRM, libdrm)
--- kmscube-20170221.orig/cube-tex.c
+++ kmscube-20170221/cube-tex.c
@@ -221,13 +221,14 @@
 	extern const uint32_t raw_512x512_rgba[];
 	uint8_t *map, *src = (uint8_t *)raw_512x512_rgba;
 	int fd;
+	int i;
 
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
 	bo = gbm_bo_create(gl.gbm->dev, texw, texh, GBM_FORMAT_ARGB8888, GBM_BO_USE_LINEAR);
 
 	map = gbm_bo_map(bo, 0, 0, texw, texh, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
 
-	for (int i = 0; i < texh; i++) {
+	for (i = 0; i < texh; i++) {
 		memcpy(&map[stride * i], &src[texw * 4 * i], texw * 4);
 	}
 
@@ -251,6 +252,7 @@
 	extern const uint32_t raw_512x512_nv12[];
 	uint8_t *map, *src = (uint8_t *)raw_512x512_nv12;
 	int fd;
+	int i;
 
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
 	/* hmm, no R8/R8G8 gbm formats?? */
@@ -258,7 +260,7 @@
 
 	map = gbm_bo_map(bo, 0, 0, texw/4, texh, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
 
-	for (int i = 0; i < texh; i++) {
+	for (i = 0; i < texh; i++) {
 		memcpy(&map[stride * i], &src[texw * i], texw);
 	}
 
@@ -282,6 +284,7 @@
 	extern const uint32_t raw_512x512_nv12[];
 	uint8_t *map, *src = &((uint8_t *)raw_512x512_nv12)[texw * texh];
 	int fd;
+	int i;
 
 	/* NOTE: do not actually use GBM_BO_USE_WRITE since that gets us a dumb buffer: */
 	/* hmm, no R8/R8G8 gbm formats?? */
@@ -289,7 +292,7 @@
 
 	map = gbm_bo_map(bo, 0, 0, texw/2/2, texh/2, GBM_BO_TRANSFER_WRITE, &stride, &map_data);
 
-	for (int i = 0; i < texh/2; i++) {
+	for (i = 0; i < texh/2; i++) {
 		memcpy(&map[stride * i], &src[texw * i], texw);
 	}
 
# source
https://gitlab.freedesktop.org/mesa/kmscube/-/archive/3e78eabeeeeb8476583cf2d37f1bd561307694db/kmscube-20170221.tar.gz
