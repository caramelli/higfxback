# This file is part of HiGFXback

# requires
REQUIRES="glslang-build libpng-build meson-build vulkan-loader-build"

PKG_CONFIG_PATH=/drm/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
rm -f vkcube.frag.spv.h.in vkcube.vert.spv.h.in
PKG_CONFIG_PATH=/drm/lib/pkgconfig meson setup --prefix=/drm build

# build
meson compile -C build

# install
install -d $DESTDIR/drm/bin
install build/vkcube $DESTDIR/drm/bin

# build.pc
install -d $DESTDIR/drm/share/pkgconfig
cat > $DESTDIR/drm/share/pkgconfig/vkcube-build.pc << EOF
Name: vkcube
Version: 20240617
Description: Spinning Vulkan cube using Window System Integration
Requires: $REQUIRES

exec=\\
/drm/bin/vkcube
EOF

exit
--- vkcube-20240617.orig/common.h
+++ vkcube-20240617/common.h
@@ -3,11 +3,14 @@
 #include <sys/time.h>
 #include <stdbool.h>
 #include <string.h>
-#include <strings.h>
 
+#if defined(HAVE_VULKAN_INTEL_H)
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <drm_fourcc.h>
+#include <gbm.h>
+#endif
+
 #include <png.h>
 
 #if defined(ENABLE_XCB)
@@ -24,8 +27,6 @@
 #define VK_PROTOTYPES
 #include <vulkan/vulkan.h>
 
-#include <gbm.h>
-
 #include "esUtil.h"
 
 #define printflike(a, b) __attribute__((format(printf, (a), (b))))
@@ -33,7 +34,10 @@
 #define MAX_NUM_IMAGES 5
 
 struct vkcube_buffer {
+#if defined(HAVE_VULKAN_INTEL_H)
    struct gbm_bo *gbm_bo;
+   uint32_t fb;
+#endif
    VkDeviceMemory mem;
    VkImage image;
    VkImageView view;
@@ -41,7 +45,6 @@
    VkFence fence;
    VkCommandBuffer cmd_buffer;
 
-   uint32_t fb;
    uint32_t stride;
 };
 
@@ -57,8 +60,12 @@
 
    bool protected;
 
+#if defined(HAVE_VULKAN_INTEL_H)
    int fd;
+   drmModeCrtc *crtc;
+   drmModeConnector *connector;
    struct gbm_device *gbm_device;
+#endif
 
 #if defined(ENABLE_XCB)
    struct {
@@ -89,8 +96,6 @@
 
    VkSwapchainKHR swap_chain;
 
-   drmModeCrtc *crtc;
-   drmModeConnector *connector;
    uint32_t width, height;
 
    VkInstance instance;
--- vkcube-20240617.orig/main.c
+++ vkcube-20240617/main.c
@@ -37,32 +37,37 @@
 
 #define _DEFAULT_SOURCE /* for major() */
 
+#include <assert.h>
 #include <stdlib.h>
 #include <stdio.h>
-#include <fcntl.h>
 #include <unistd.h>
+#if defined(ENABLE_WAYLAND)
+#include <linux/input.h>
+#endif
+#if defined(ENABLE_WAYLAND) || defined(HAVE_VULKAN_INTEL_H)
 #include <errno.h>
-#include <sys/ioctl.h>
-#include <sys/types.h>
-#include <sys/sysmacros.h>
-#include <sys/stat.h>
-#include <signal.h>
+#include <poll.h>
+#endif
+#if defined(HAVE_VULKAN_INTEL_H)
+#include <fcntl.h>
 #include <linux/kd.h>
-#include <linux/vt.h>
 #include <linux/major.h>
+#include <linux/vt.h>
+#include <signal.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
 #include <termios.h>
-#include <poll.h>
-#include <math.h>
-#include <assert.h>
-#include <sys/mman.h>
-#include <linux/input.h>
+#include <vulkan/vulkan_intel.h>
+#endif
 
 #include "common.h"
 
 enum display_mode {
    DISPLAY_MODE_AUTO = 0,
    DISPLAY_MODE_HEADLESS,
+#if defined(HAVE_VULKAN_INTEL_H)
    DISPLAY_MODE_KMS,
+#endif
 #if defined(ENABLE_WAYLAND)
    DISPLAY_MODE_WAYLAND,
 #endif
@@ -451,12 +456,10 @@
    return 0;
 }
 
-#ifdef HAVE_VULKAN_INTEL_H
+#if defined(HAVE_VULKAN_INTEL_H)
 
 /* KMS display code - render to kernel modesetting fb */
 
-#include <vulkan/vulkan_intel.h>
-
 static struct termios save_tio;
 
 static void
@@ -669,25 +672,12 @@
    }
 }
 
-#else
-
-static int
-init_kms(struct vkcube *vc)
-{
-   return -1;
-}
-
-static void
-mainloop_vt(struct vkcube *vc)
-{
-}
-
 #endif
 
-/* Swapchain-based code - shared between XCB and Wayland */
-
 #if defined(ENABLE_XCB) || defined(ENABLE_WAYLAND)
 
+/* Swapchain-based code - shared between XCB and Wayland */
+
 static VkFormat
 choose_surface_format(struct vkcube *vc)
 {
@@ -804,9 +794,10 @@
    }
 }
 
-/* XCB display code - render to X window */
 #if defined(ENABLE_XCB)
 
+/* XCB display code - render to X window */
+
 static xcb_atom_t
 get_atom(struct xcb_connection_t *conn, const char *name)
 {
@@ -1025,10 +1016,11 @@
    }
 }
 #endif
-/* Wayland display code - render to Wayland window */
 
 #if defined(ENABLE_WAYLAND)
 
+/* Wayland display code - render to Wayland window */
+
 static void
 handle_xdg_surface_configure(void *data, struct xdg_surface *surface,
                              uint32_t serial)
@@ -1568,9 +1560,11 @@
    } else if (streq(s, "headless")) {
       *mode = DISPLAY_MODE_HEADLESS;
       return true;
+#if defined(HAVE_VULKAN_INTEL_H)
    } else if (streq(s, "kms")) {
       *mode = DISPLAY_MODE_KMS;
       return true;
+#endif
 #if defined(ENABLE_WAYLAND)
    } else if (streq(s, "wayland")) {
       *mode = DISPLAY_MODE_WAYLAND;
@@ -1715,23 +1709,33 @@
       display_mode = DISPLAY_MODE_WAYLAND;
       if (init_wayland(vc) == -1) {
          fprintf(stderr, "failed to initialize wayland, falling back "
-                         "to xcb\n");
 #endif
 #if defined(ENABLE_XCB)
+#if defined(ENABLE_WAYLAND)
+                         "to xcb\n");
+#endif
          display_mode = DISPLAY_MODE_XCB;
          if (init_xcb(vc) == -1) {
             fprintf(stderr, "failed to initialize xcb, falling back "
+#endif
+#if defined(HAVE_VULKAN_INTEL_H)
+#if defined(ENABLE_WAYLAND) || defined(ENABLE_XCB)
                             "to kms\n");
 #endif
             display_mode = DISPLAY_MODE_KMS;
             if (init_kms(vc) == -1) {
-               fprintf(stderr, "failed to initialize kms, falling "
-                               "back to headless\n");
+               fprintf(stderr, "failed to initialize kms, falling back "
+#endif
+#if defined(ENABLE_WAYLAND) || defined(ENABLE_XCB) || defined(HAVE_VULKAN_INTEL_H)
+                               "to headless\n");
+#endif
                display_mode = DISPLAY_MODE_HEADLESS;
                if (init_headless(vc) == -1) {
                   fail("failed to initialize headless mode");
                }
+#if defined(HAVE_VULKAN_INTEL_H)
             }
+#endif
 #if defined(ENABLE_XCB)
          }
 #endif
@@ -1747,10 +1751,12 @@
       if (init_khr(vc) == -1)
          fail("fail to initialize khr");
       break;
+#if defined(HAVE_VULKAN_INTEL_H)
    case DISPLAY_MODE_KMS:
       if (init_kms(vc) == -1)
          fail("failed to initialize kms");
       break;
+#endif
 #if defined(ENABLE_WAYLAND)
    case DISPLAY_MODE_WAYLAND:
       if (init_wayland(vc) == -1)
@@ -1783,9 +1789,11 @@
       mainloop_xcb(vc);
       break;
 #endif
+#if defined(HAVE_VULKAN_INTEL_H)
    case DISPLAY_MODE_KMS:
       mainloop_vt(vc);
       break;
+#endif
    case DISPLAY_MODE_KHR:
       mainloop_khr(vc);
       break;
@@ -1804,7 +1812,9 @@
    parse_args(argc, argv);
 
    vc.model = cube_model;
+#if defined(HAVE_VULKAN_INTEL_H)
    vc.gbm_device = NULL;
+#endif
 #if defined(ENABLE_XCB)
    vc.xcb.window = XCB_NONE;
 #endif
--- vkcube-20240617.orig/meson.build
+++ vkcube-20240617/meson.build
@@ -7,14 +7,15 @@
 
 dep_vulkan = dependency('vulkan')
 dep_libpng = dependency('libpng')
-dep_libdrm = dependency('libdrm')
-dep_gbm = dependency('gbm')
+dep_libdrm = dependency('libdrm', required : get_option('kms') == 'true')
+dep_gbm = dependency('gbm', required : get_option('kms') == 'true')
 dep_wayland_client = dependency('wayland-client', required : get_option('wayland') == 'true')
 dep_wayland_protocols = dependency('wayland-protocols', version : '>= 1.12', required : get_option('wayland') == 'true')
 dep_xcb = dependency('xcb', required : get_option('xcb') == 'true')
 
 defs = []
 if cc.has_header('vulkan/vulkan_intel.h', dependencies: dep_vulkan)
+  message('kms enabled')
   defs += '-DHAVE_VULKAN_INTEL_H'
 endif
 
--- vkcube-20240617.orig/meson_options.txt
+++ vkcube-20240617/meson_options.txt
@@ -1,2 +1,3 @@
+option('kms', type : 'combo', choices : ['auto', 'true', 'false'], value : 'auto')
 option('xcb', type : 'combo', choices : ['auto', 'true', 'false'], value : 'auto')
 option('wayland', type : 'combo', choices : ['auto', 'true', 'false'], value : 'auto')
