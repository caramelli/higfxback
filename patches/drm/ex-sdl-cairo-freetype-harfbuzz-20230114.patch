# This file is part of HiGFXback

# requires
REQUIRES="amiri-build cairo-build fireflysung-build harfbuzz-build make-build sdl2-build ttf-bitstream-vera-build"

PKG_CONFIG_PATH=/drm/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if pkg-config --print-requires harfbuzz-build | grep -q icu4c-build; then
  UNICODE_BACKEND=ICU
else
  UNICODE_BACKEND=GLIB
fi

# configure
rm -rf fonts
PKG_CONFIG_PATH=/drm/lib/pkgconfig sh ./Configure --with-unicode-backend=$UNICODE_BACKEND --prefix=/drm

# build
make

# install
install -d $DESTDIR/drm/bin
install ex-sdl-cairo-freetype-harfbuzz $DESTDIR/drm/bin

# build.pc
install -d $DESTDIR/drm/share/pkgconfig
cat > $DESTDIR/drm/share/pkgconfig/ex-sdl-cairo-freetype-harfbuzz-build.pc << EOF
Name: ex-sdl-cairo-freetype-harfbuzz
Version: 20230114
Description: Text rendering example using SDL, Cairo, Fontconfig, FreeType and HarfBuzz
Requires: $REQUIRES

exec=\\
/drm/bin/ex-sdl-cairo-freetype-harfbuzz
EOF

exit

# patch
--- ex-sdl-cairo-freetype-harfbuzz-20230114.orig/Configure
+++ ex-sdl-cairo-freetype-harfbuzz-20230114/Configure
@@ -0,0 +1,25 @@
+#!/bin/sh
+
+PREFIX=/usr/local
+
+UNICODE_BACKEND=ICU
+
+while [ $# != 0 ]; do
+  case $1 in
+    --prefix=*) PREFIX=${1#*=};;
+    --with-unicode-backend=*) UNICODE_BACKEND=${1#*=};;
+    *) echo "Unknown option: '$1'"; exit 1;;
+  esac
+  shift
+done
+
+sed -i "/^PREFIX/s|=.*|=$PREFIX|" Makefile
+
+test $PKG_CONFIG || PKG_CONFIG=pkg-config
+if test $PKG_CONFIG_PATH; then
+  sed -i "/^PKG_CONFIG/s|=.*|=PKG_CONFIG_PATH=$PKG_CONFIG_PATH $PKG_CONFIG|" Makefile
+else
+  sed -i "/^PKG_CONFIG/s|=.*|=$PKG_CONFIG|" Makefile
+fi
+
+sed -i "/^UNICODE_BACKEND/s|=.*|=$UNICODE_BACKEND|" Makefile
--- ex-sdl-cairo-freetype-harfbuzz-20230114.orig/Makefile
+++ ex-sdl-cairo-freetype-harfbuzz-20230114/Makefile
@@ -1,11 +1,16 @@
 CC=gcc
-CFLAGS=--std=c99 -g -O2 -Wall --pedantic `pkg-config --cflags "fontconfig"` `pkg-config --cflags freetype2` `sdl2-config --cflags`
-LIBS=-lcairo -lharfbuzz -lharfbuzz-icu `pkg-config --libs "fontconfig"` `pkg-config --libs freetype2` `sdl2-config --libs`
+PREFIX=/usr/local
+PKG_CONFIG=pkg-config
+UNICODE_BACKEND=ICU
+CPPFLAGS=-D$(UNICODE_BACKEND)_UNICODE_FUNCS
+CFLAGS=--std=c99 -g -O2 -Wall --pedantic `$(PKG_CONFIG) --cflags cairo fontconfig harfbuzz sdl2`
+LDFLAGS=-Wl,-rpath,$(PREFIX)/lib
+LIBS=`$(PKG_CONFIG) --libs cairo fontconfig harfbuzz sdl2`
 
 all: ex-sdl-cairo-freetype-harfbuzz
 
 ex-sdl-cairo-freetype-harfbuzz: ex-sdl-cairo-freetype-harfbuzz.c
-	$(CC) $< $(CFLAGS) -o $@ $(LDFLAGS) $(LIBS)
+	$(CC) $< $(CPPFLAGS) $(CFLAGS) -o $@ $(LDFLAGS) $(LIBS)
 
 clean:
 	rm -f ex-sdl-cairo-freetype-harfbuzz
--- ex-sdl-cairo-freetype-harfbuzz-20230114.orig/ex-sdl-cairo-freetype-harfbuzz.c
+++ ex-sdl-cairo-freetype-harfbuzz-20230114/ex-sdl-cairo-freetype-harfbuzz.c
@@ -3,22 +3,22 @@
 #include <assert.h>
 
 #include <SDL.h>
-#include <SDL_image.h>
 
 #include <fontconfig/fontconfig.h>
 
 #include <ft2build.h>
 #include FT_FREETYPE_H
-#include <freetype/ftadvanc.h>
-#include <freetype/ftsnames.h>
-#include <freetype/tttables.h>
 
-#include <harfbuzz/hb.h>
 #include <harfbuzz/hb-ft.h>
-#include <harfbuzz/hb-icu.h> /* Alternatively you can use hb-glib.h */
+#if defined(GLIB_UNICODE_FUNCS) 
+#include <harfbuzz/hb-glib.h>
+#elif defined(ICU_UNICODE_FUNCS) 
+#include <harfbuzz/hb-icu.h>
+#else
+#error "Invalid Unicode functions"
+#endif
 
-#include <cairo/cairo.h>
-#include <cairo/cairo-ft.h>
+#include <cairo-ft.h>
 
 #define NUM_EXAMPLES 3
 #define FONT_SIZE 40
@@ -43,6 +43,12 @@
     "ch",
 };
 
+const char* names[NUM_EXAMPLES] = {
+    "Serif",
+    "Amiri",
+    "AR PL New Sung"
+};
+
 const hb_script_t scripts[NUM_EXAMPLES] = {
     HB_SCRIPT_LATIN,
     HB_SCRIPT_ARABIC,
@@ -57,24 +63,25 @@
     
     /* Init font config */
     FcInit(); //initializes Fontconfig
-	FcConfig* config = FcInitLoadConfigAndFonts();
+    FcConfig* config = FcInitLoadConfigAndFonts();
     assert(config);
     
-    FcPattern* pat = FcNameParse((const FcChar8*)"DejaVu Serif");
-    
-    /* Increase the possible matches */
-    FcConfigSubstitute(config, pat, FcMatchPattern);
-	FcDefaultSubstitute(pat);
-    
-	FcResult result;
+    FcPattern* pat[NUM_EXAMPLES];
+    FcPattern* font[NUM_EXAMPLES];
+    FcChar8* file[NUM_EXAMPLES];
+
+    for (int i=0; i < NUM_EXAMPLES; ++i) {
+        pat[i] = FcNameParse((const FcChar8*)names[i]);
+
+        FcConfigSubstitute(config, pat[i], FcMatchPattern);
+        FcDefaultSubstitute(pat[i]);
+
+        FcResult result;
+        font[i] = FcFontMatch(config, pat[i], &result);
+        assert(font);
 
-	FcPattern* font = FcFontMatch(config, pat, &result);
-    assert(font);
-    
-    /* Will be freed with font */
-    FcChar8* file = NULL; 
-    
-    assert(FcPatternGetString(font, FC_FILE, 0, &file) == FcResultMatch);
+        assert(FcPatternGetString(font[i], FC_FILE, 0, &file[i]) == FcResultMatch);
+    }
     
     /* Init freetype */
     FT_Library ft_library;
@@ -82,16 +89,18 @@
 
     /* Load our fonts */
     FT_Face ft_face[NUM_EXAMPLES];
-    assert(!FT_New_Face(ft_library, (char *)file, 0, &ft_face[ENGLISH]));
+    assert(!FT_New_Face(ft_library, (char *)file[ENGLISH], 0, &ft_face[ENGLISH]));
     assert(!FT_Set_Char_Size(ft_face[ENGLISH],FONT_SIZE*64, FONT_SIZE*64,0,0));
-    assert(!FT_New_Face(ft_library, "fonts/amiri-0.104/amiri-regular.ttf", 0, &ft_face[ARABIC]));
+    assert(!FT_New_Face(ft_library, (char *)file[ARABIC], 0, &ft_face[ARABIC]));
     assert(!FT_Set_Char_Size(ft_face[ARABIC],FONT_SIZE*64, FONT_SIZE*64,0,0 ));
-    assert(!FT_New_Face(ft_library, "fonts/fireflysung-1.3.0/fireflysung.ttf", 0, &ft_face[CHINESE]));
+    assert(!FT_New_Face(ft_library, (char *)file[CHINESE], 0, &ft_face[CHINESE]));
     assert(!FT_Set_Char_Size(ft_face[CHINESE],FONT_SIZE*64, FONT_SIZE*64,0,0 ));
     
     /* Cleanup font config */
-    FcPatternDestroy(font);
-    FcPatternDestroy(pat);
+    for (int i=0; i < NUM_EXAMPLES; ++i) {
+        FcPatternDestroy(font[i]);
+        FcPatternDestroy(pat[i]);
+    }
     FcConfigDestroy(config);
     FcFini();
 
@@ -175,8 +184,11 @@
             /* Create a buffer for harfbuzz to use */
             hb_buffer_t *buf = hb_buffer_create();
 
-            //alternatively you can use hb_buffer_set_unicode_funcs(buf, hb_glib_get_unicode_funcs());
+#if defined(GLIB_UNICODE_FUNCS) 
+            hb_buffer_set_unicode_funcs(buf, hb_glib_get_unicode_funcs());
+#elif defined(ICU_UNICODE_FUNCS) 
             hb_buffer_set_unicode_funcs(buf, hb_icu_get_unicode_funcs());
+#endif
             hb_buffer_set_direction(buf, text_directions[i]); /* or LTR */
             hb_buffer_set_script(buf, scripts[i]); /* see hb-unicode.h */
             hb_buffer_set_language(buf, hb_language_from_string(languages[i], -1));

# source
https://github.com/anoek/ex-sdl-cairo-freetype-harfbuzz/archive/8734a13c334b4c8b88fa39117af01c9dbbfa3358/ex-sdl-cairo-freetype-harfbuzz-20230114.tar.gz
