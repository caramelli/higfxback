# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build libpng-build sdl-build"

PKG_CONFIG_PATH=/fb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

pkg-config --exists jpeg-build && REQUIRES="$REQUIRES jpeg-build"
pkg-config --exists tiff-build && REQUIRES="$REQUIRES tiff-build"

# configure (ac-2.59; am-1.9; lt-1.5.24)
libtoolize -c -f; mv libtool.m4 acinclude; aclocal -I acinclude; autoconf; automake -a -c
PKG_CONFIG_PATH=/fb/lib/pkgconfig LDFLAGS=-Wl,-rpath,/fb/lib ./configure --disable-static --prefix=/fb

# build
make

# install
install -d $DESTDIR/fb/bin
install .libs/showimage $DESTDIR/fb/bin
install -d $DESTDIR/fb/include/SDL
install -m 644 SDL_image.h $DESTDIR/fb/include/SDL
install -d $DESTDIR/fb/lib
install .libs/libSDL_image-1.2.so.0.* $DESTDIR/fb/lib/libSDL_image-1.2.so.0
ln -sf libSDL_image-1.2.so.0 $DESTDIR/fb/lib/libSDL_image.so
install -d $DESTDIR/fb/lib/pkgconfig
install -m 644 SDL_image.pc $DESTDIR/fb/lib/pkgconfig

# build.pc
install -d $DESTDIR/fb/share/pkgconfig
cat > $DESTDIR/fb/share/pkgconfig/sdl_image-build.pc << EOF
Name: SDL_image
Version: 1.2.6
Description: Image loading library for SDL
Requires: $REQUIRES

devel=\\
/fb/include/SDL/SDL_image.h \\
/fb/lib/libSDL_image.so \\
/fb/lib/pkgconfig/SDL_image.pc

exec=\\
/fb/bin/showimage \\
/fb/lib/libSDL_image-1.2.so.0
EOF

exit

# patch
--- SDL_image-1.2.6.orig/IMG_jpg.c
+++ SDL_image-1.2.6/IMG_jpg.c
@@ -253,7 +253,7 @@
 /*
  * Fill the input buffer --- called whenever buffer is emptied.
  */
-static int fill_input_buffer (j_decompress_ptr cinfo)
+static boolean fill_input_buffer (j_decompress_ptr cinfo)
 {
 	my_source_mgr * src = (my_source_mgr *) cinfo->src;
 	int nbytes;
--- SDL_image-1.2.6.orig/IMG_png.c
+++ SDL_image-1.2.6/IMG_png.c
@@ -78,6 +78,8 @@
 	void (*png_destroy_read_struct) (png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
 	png_uint_32 (*png_get_IHDR) (png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
 	png_voidp (*png_get_io_ptr) (png_structp png_ptr);
+	png_byte (*png_get_channels) (png_structp png_ptr, png_infop info_ptr);
+	png_uint_32 (*png_get_PLTE) (png_structp png_ptr, png_infop info_ptr, png_colorp *palette, int *num_palette);
 	png_uint_32 (*png_get_tRNS) (png_structp png_ptr, png_infop info_ptr, png_bytep *trans, int *num_trans, png_color_16p *trans_values);
 	png_uint_32 (*png_get_valid) (png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
 	void (*png_read_image) (png_structp png_ptr, png_bytepp image);
@@ -89,6 +91,7 @@
 	void (*png_set_read_fn) (png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
 	void (*png_set_strip_16) (png_structp png_ptr);
 	int (*png_sig_cmp) (png_bytep sig, png_size_t start, png_size_t num_to_check);
+	jmp_buf* (*png_set_longjmp_fn) (png_structp, png_longjmp_ptr, size_t);
 } lib;
 
 #ifdef LOAD_PNG_DYNAMIC
@@ -134,6 +137,20 @@
 			SDL_UnloadObject(lib.handle);
 			return -1;
 		}
+		lib.png_get_channels =
+			(png_byte (*) (png_structp, png_infop))
+			SDL_LoadFunction(lib.handle, "png_get_channels");
+		if ( lib.png_get_channels == NULL ) {
+			SDL_UnloadObject(lib.handle);
+			return -1;
+		}
+		lib.png_get_PLTE =
+			(png_uint_32 (*) (png_structp, png_infop, png_colorp *, int *))
+			SDL_LoadFunction(lib.handle, "png_get_PLTE");
+		if ( lib.png_get_PLTE == NULL ) {
+			SDL_UnloadObject(lib.handle);
+			return -1;
+		}
 		lib.png_get_tRNS =
 			(png_uint_32 (*) (png_structp, png_infop, png_bytep *, int *, png_color_16p *))
 			SDL_LoadFunction(lib.handle, "png_get_tRNS");
@@ -211,6 +228,13 @@
 			SDL_UnloadObject(lib.handle);
 			return -1;
 		}
+		lib.png_set_longjmp_fn =
+			(jmp_buf * (*) (png_structp, png_longjmp_ptr, size_t))
+			SDL_LoadFunction(lib.handle, "png_set_longjmp_fn");
+		if ( lib.png_set_longjmp_fn == NULL ) {
+			SDL_UnloadObject(lib.handle);
+			return -1;
+		}
 	}
 	++lib.loaded;
 
@@ -235,6 +259,8 @@
 		lib.png_destroy_read_struct = png_destroy_read_struct;
 		lib.png_get_IHDR = png_get_IHDR;
 		lib.png_get_io_ptr = png_get_io_ptr;
+		lib.png_get_channels = png_get_channels;
+		lib.png_get_PLTE = png_get_PLTE;
 		lib.png_get_tRNS = png_get_tRNS;
 		lib.png_get_valid = png_get_valid;
 		lib.png_read_image = png_read_image;
@@ -246,6 +272,7 @@
 		lib.png_set_read_fn = png_set_read_fn;
 		lib.png_set_strip_16 = png_set_strip_16;
 		lib.png_sig_cmp = png_sig_cmp;
+		lib.png_set_longjmp_fn = png_set_longjmp_fn;
 	}
 	++lib.loaded;
 
@@ -301,7 +328,7 @@
 	png_structp png_ptr;
 	png_infop info_ptr;
 	png_uint_32 width, height;
-	int bit_depth, color_type, interlace_type;
+	int bit_depth, color_type, interlace_type, num_channels;
 	Uint32 Rmask;
 	Uint32 Gmask;
 	Uint32 Bmask;
@@ -345,7 +372,7 @@
 	 * the normal method of doing things with libpng).  REQUIRED unless you
 	 * set up your own error handlers in png_create_read_struct() earlier.
 	 */
-	if ( setjmp(png_ptr->jmpbuf) ) {
+	if ( setjmp(*lib.png_set_longjmp_fn(png_ptr, longjmp, sizeof (jmp_buf))) ) {
 		error = "Error reading the PNG file.";
 		goto done;
 	}
@@ -408,15 +435,16 @@
 			&color_type, &interlace_type, NULL, NULL);
 
 	/* Allocate the SDL surface to hold the image */
-	Rmask = Gmask = Bmask = Amask = 0 ; 
+	Rmask = Gmask = Bmask = Amask = 0 ;
+	num_channels = lib.png_get_channels(png_ptr, info_ptr);
 	if ( color_type != PNG_COLOR_TYPE_PALETTE ) {
 		if ( SDL_BYTEORDER == SDL_LIL_ENDIAN ) {
 			Rmask = 0x000000FF;
 			Gmask = 0x0000FF00;
 			Bmask = 0x00FF0000;
-			Amask = (info_ptr->channels == 4) ? 0xFF000000 : 0;
+			Amask = (num_channels == 4) ? 0xFF000000 : 0;
 		} else {
-		        int s = (info_ptr->channels == 4) ? 0 : 8;
+			int s = (num_channels == 4) ? 0 : 8;
 			Rmask = 0xFF000000 >> s;
 			Gmask = 0x00FF0000 >> s;
 			Bmask = 0x0000FF00 >> s;
@@ -424,7 +452,7 @@
 		}
 	}
 	surface = SDL_AllocSurface(SDL_SWSURFACE, width, height,
-			bit_depth*info_ptr->channels, Rmask,Gmask,Bmask,Amask);
+			bit_depth*num_channels, Rmask,Gmask,Bmask,Amask);
 	if ( surface == NULL ) {
 		error = "Out of memory";
 		goto done;
@@ -465,6 +493,9 @@
 	/* Load the palette, if any */
 	palette = surface->format->palette;
 	if ( palette ) {
+	    int png_num_palette;
+	    png_colorp png_palette;
+	    lib.png_get_PLTE(png_ptr, info_ptr, &png_palette, &png_num_palette);
 	    if(color_type == PNG_COLOR_TYPE_GRAY) {
 		palette->ncolors = 256;
 		for(i = 0; i < 256; i++) {
@@ -472,12 +503,12 @@
 		    palette->colors[i].g = i;
 		    palette->colors[i].b = i;
 		}
-	    } else if (info_ptr->num_palette > 0 ) {
-		palette->ncolors = info_ptr->num_palette; 
-		for( i=0; i<info_ptr->num_palette; ++i ) {
-		    palette->colors[i].b = info_ptr->palette[i].blue;
-		    palette->colors[i].g = info_ptr->palette[i].green;
-		    palette->colors[i].r = info_ptr->palette[i].red;
+	    } else if (png_num_palette > 0 ) {
+		palette->ncolors = png_num_palette;
+		for( i=0; i<png_num_palette; ++i ) {
+		    palette->colors[i].b = png_palette[i].blue;
+		    palette->colors[i].g = png_palette[i].green;
+		    palette->colors[i].r = png_palette[i].red;
 		}
 	    }
 	}
--- SDL_image-1.2.6.orig/Makefile.am
+++ SDL_image-1.2.6/Makefile.am
@@ -1,5 +1,7 @@
 # Makefile.am for the SDL sample image loading library and viewer
 
+AUTOMAKE_OPTIONS = foreign
+
 lib_LTLIBRARIES = libSDL_image.la
 
 libSDL_imageincludedir = $(includedir)/SDL
@@ -49,6 +51,9 @@
 libSDL_image_la_LIBADD = $(IMG_LIBS)
 endif
 
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = SDL_image.pc
+
 %.o : %.rc
 	$(WINDRES) $< $@
 
--- SDL_image-1.2.6.orig/SDL_image.pc.in
+++ SDL_image-1.2.6/SDL_image.pc.in
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: SDL_image
+Description: image loading library for Simple DirectMedia Layer
+Version: @VERSION@
+Requires: sdl
+Libs: -L${libdir} -lSDL_image
+Cflags: -I${includedir}/SDL
--- SDL_image-1.2.6.orig/acinclude/sdl.m4
+++ SDL_image-1.2.6/acinclude/sdl.m4
@@ -37,11 +37,12 @@
   fi
   AC_PATH_PROG(SDL_CONFIG, sdl-config, no, [$PATH])
   min_sdl_version=ifelse([$1], ,0.11.0,$1)
-  AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   no_sdl=""
   if test "$SDL_CONFIG" = "no" ; then
-    no_sdl=yes
+    PKG_CHECK_MODULES(SDL, [sdl >= $min_sdl_version], [], [no_sdl=yes])
+    AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   else
+    AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
     SDL_CFLAGS=`$SDL_CONFIG $sdlconf_args --cflags`
     SDL_LIBS=`$SDL_CONFIG $sdlconf_args --libs`
 
--- SDL_image-1.2.6.orig/configure.in
+++ SDL_image-1.2.6/configure.in
@@ -184,6 +184,9 @@
                 if test x$png_lib = x; then
                     png_lib=[`find_lib "libpng.so.[0-9]*"`]
                 fi
+                if test x$png_lib = x; then
+                    png_lib=[`find_lib "libpng*.so.[0-9]*"`]
+                fi
                 ;;
         esac
     else
@@ -293,4 +296,5 @@
 Makefile
 SDL_image.spec
 SDL_image.qpg
+SDL_image.pc
 ])

# source
https://www.libsdl.org/projects/SDL_image/release/SDL_image-1.2.6.tar.gz
