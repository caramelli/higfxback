# This file is part of HiGFXback

# requires
REQUIRES="make-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

# configure
sh ./Configure --prefix /fb

# build
make

# install
install -d $DESTDIR/fb/bin
install fbpad $DESTDIR/fb/bin

# build.pc
install -d $DESTDIR/fb/share/pkgconfig
cat > $DESTDIR/fb/share/pkgconfig/fbpad-build.pc << EOF
Name: fbpad
Version: 20150219
Description: Linux Framebuffer terminal emulator
Requires: $REQUIRES

exec=\\
/fb/bin/fbpad
EOF

exit
--- fbpad-20150219.orig/Configure
+++ fbpad-20150219/Configure
@@ -0,0 +1,22 @@
+#!/bin/sh
+
+PREFIX=/usr/local
+
+while : ; do
+  case "$1" in
+    "")
+      break
+    ;;
+    --prefix)
+      PREFIX=$2
+      shift
+    ;;
+    *)
+      echo Unknown option \"$1\".
+      exit 1
+    ;;
+  esac
+  shift
+done
+
+sed -i "/^PREFIX/s|=.*|= $PREFIX|" Makefile
--- fbpad-20150219.orig/Makefile
+++ fbpad-20150219/Makefile
@@ -1,10 +1,11 @@
+PREFIX = /usr/local
 CC = cc
 CFLAGS = -Wall -O2
 LDFLAGS =
 
 all: fbpad
 %.o: %.c config.h
-	$(CC) -c $(CFLAGS) $<
+	$(CC) -c $(CFLAGS) $< -DPREFIX=\"$(PREFIX)\"
 fbpad: fbpad.o term.o pad.o draw.o font.o isdw.o scrsnap.o
 	$(CC) -o $@ $^ $(LDFLAGS)
 clean:
--- fbpad-20150219.orig/config.h
+++ fbpad-20150219/config.h
@@ -2,7 +2,7 @@
 #define FBDEV		"/dev/fb0"
 
 /* list of tags */
-#define TAGS		"xnlhtr01uiva-"
+#define TAGS		"xnlhtr"
 #define TAGS_SAVED	""
 
 /* programs mapped to m-c, m-m, m-e */
@@ -14,13 +14,13 @@
 typedef unsigned int fbval_t;
 
 /* tinyfont files for regular, italic, and bold fonts */
-#define FR		"/path/to/font.tf"
-#define FI		NULL
-#define FB		NULL
+#define FR		PREFIX"/share/fbpad/regular.tf"
+#define FI		PREFIX"/share/fbpad/italic.tf"
+#define FB		PREFIX"/share/fbpad/bold.tf"
 
 /* foreground and background colors */
-#define FGCOLOR		0
-#define BGCOLOR		15
+#define FGCOLOR		15
+#define BGCOLOR		8
 
 /* where to write the screen shot */
 #define SCRSHOT		"/tmp/scr"
@@ -33,7 +33,7 @@
 
 /* black */
 #define COLOR0		0x000000
-#define COLOR8		0x555555
+#define COLOR8		0x222222
 /* red */
 #define COLOR1		0xaa0000
 #define COLOR9		0xff5555
--- fbpad-20150219.orig/draw.c
+++ fbpad-20150219/draw.c
@@ -19,6 +19,7 @@
 static int bpp;				/* bytes per pixel */
 static int nr, ng, nb;			/* color levels */
 static int rl, rr, gl, gr, bl, br;	/* shifts per color */
+static int posx, posy, rows, cols;	/* geometry */
 
 static int fb_len(void)
 {
@@ -99,6 +100,15 @@
 	fb = mmap(NULL, fb_len(), PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
 	if (fb == MAP_FAILED)
 		goto failed;
+	if (getenv("FBPAD_POS"))
+  	sscanf(getenv("FBPAD_POS"), "%d,%d", &posx, &posy);
+	else
+		posx = posy = 0;
+	if (getenv("FBPAD_SIZE"))
+  	sscanf(getenv("FBPAD_SIZE"), "%dx%d", &cols, &rows);
+	else
+		cols = rows = 0;
+	fb = fb + posx * bpp + posy * finfo.line_length;
 	init_colors();
 	fb_cmap_save(1);
 	fb_cmap();
@@ -118,12 +128,12 @@
 
 int fb_rows(void)
 {
-	return vinfo.yres;
+	return rows ? rows : vinfo.yres;
 }
 
 int fb_cols(void)
 {
-	return vinfo.xres;
+	return cols ? cols : vinfo.xres;
 }
 
 void *fb_mem(int r)
--- fbpad-20150219.orig/fbpad.c
+++ fbpad-20150219/fbpad.c
@@ -41,6 +41,8 @@
 static int passlen;
 static int cmdmode;		/* execute a command and exit */
 
+static void listtags(void);
+
 static int readchar(void)
 {
 	char b;
@@ -81,9 +83,11 @@
 		scr_snap(oidx);
 	term_save(&terms[oidx]);
 	term_load(&terms[nidx], show);
-	if (show)
+	if (show) {
 		term_redraw(load && (!TERMOPEN(nidx) || !TERMSNAP(nidx) ||
 					scr_load(nidx)));
+		listtags();
+	}
 }
 
 static void showterm(int n)
@@ -102,10 +106,13 @@
 static void showtag(int n)
 {
 	showterm(tops[n] * NTAGS + n);
+	listtags();
 }
 
 static void execterm(char **args)
 {
+	pad_fill(0, -1, 0, -1, BGCOLOR);
+	listtags();
 	if (!mainterm())
 		term_exec(args);
 }
@@ -114,14 +121,14 @@
 {
 	/* colors for tags based on their number of terminals */
 	int colors[] = {252, FGCOLOR, FGCOLOR | FN_B};
-	int c = 0;
-	int r = pad_rows() - 1;
+	int c = (pad_cols() - (5 + 3 * NTAGS)) >> 1;
+	int r = 0;
 	int i;
-	pad_put('T', r, c++, FGCOLOR, BGCOLOR);
+	pad_put('F', r, c++, FGCOLOR, BGCOLOR);
+	pad_put('B', r, c++, FGCOLOR, BGCOLOR);
+	pad_put('P', r, c++, FGCOLOR, BGCOLOR);
 	pad_put('A', r, c++, FGCOLOR, BGCOLOR);
-	pad_put('G', r, c++, FGCOLOR, BGCOLOR);
-	pad_put('S', r, c++, FGCOLOR, BGCOLOR);
-	pad_put(':', r, c++, FGCOLOR, BGCOLOR);
+	pad_put('D', r, c++, FGCOLOR, BGCOLOR);
 	pad_put(' ', r, c++, FGCOLOR, BGCOLOR);
 	for (i = 0; i < NTAGS; i++) {
 		int nt = 0;
@@ -189,6 +196,7 @@
 			return;
 		case 'y':
 			term_redraw(1);
+			listtags();
 			return;
 		case CTRLKEY('l'):
 			locked = 1;
@@ -206,6 +214,8 @@
 		default:
 			if (strchr(tags, c)) {
 				showtag(strchr(tags, c) - tags);
+				if (!mainterm())
+					execterm(shell);
 				return;
 			}
 			if (mainterm())
@@ -268,6 +278,7 @@
 
 static void mainloop(char **args)
 {
+	char *shell[32] = SHELL;
 	struct termios oldtermios, termios;
 	tcgetattr(0, &termios);
 	oldtermios = termios;
@@ -279,6 +290,7 @@
 		cmdmode = 1;
 		execterm(args);
 	}
+	execterm(shell);
 	while (!exitit)
 		if (pollterms())
 			break;
@@ -331,15 +343,15 @@
 
 int main(int argc, char **argv)
 {
-	char *hide = "\x1b[2J\x1b[H\x1b[?25l";
+	char *hide = "\x1b[H\x1b[?25l";
 	char *show = "\x1b[?25h";
 	char **args = argv + 1;
 	if (fb_init(FBDEV)) {
 		fprintf(stderr, "fbpad: failed to initialize the framebuffer\n");
 		return 1;
 	}
-	if (sizeof(fbval_t) != FBM_BPP(fb_mode())) {
-		fprintf(stderr, "fbpad: fbval_t does not match framebuffer depth\n");
+	if (FBM_BPP(fb_mode()) != 4 && FBM_BPP(fb_mode()) != 3) {
+		fprintf(stderr, "fbpad: invalid framebuffer depth\n");
 		return 1;
 	}
 	if (pad_init()) {
--- fbpad-20150219.orig/pad.c
+++ fbpad-20150219/pad.c
@@ -131,7 +131,17 @@
 static void fb_set(int r, int c, void *mem, int len)
 {
 	int bpp = FBM_BPP(fb_mode());
-	memcpy(fb_mem(r) + c * bpp, mem, len * bpp);
+	unsigned char *dst = fb_mem(r) + c * bpp;
+	int i;
+	if (bpp == 4)
+		memcpy(dst, mem, len * bpp);
+	else {
+		for (i = 0; i < len; i++) {
+			dst[i * bpp]     = ((unsigned char *) mem)[i * 4];
+			dst[i * bpp + 1] = ((unsigned char *) mem)[i * 4 + 1];
+			dst[i * bpp + 2] = ((unsigned char *) mem)[i * 4 + 2];
+		}
+	}
 }
 
 static void fb_box(int sr, int er, int sc, int ec, fbval_t val)
--- fbpad-20150219.orig/term.c
+++ fbpad-20150219/term.c
@@ -68,7 +68,7 @@
 /* assumes visible && !lazy */
 static void _draw_row(int r)
 {
-	int cbg, cch;		/* current background and character */
+	int cbg = 0, cch;		/* current background and character */
 	int fbg, fsc = -1;	/* filling background and start column */
 	int i;
 	/* call pad_fill() only once for blank columns with identical backgrounds */
@@ -222,7 +222,7 @@
 {
 	screen_reset(0, pad_rows() * pad_cols());
 	if (visible)
-		pad_fill(0, -1, 0, -1, bgcolor() & FN_C);
+		pad_fill(1, -1, 0, -1, bgcolor() & FN_C);
 }
 
 static void ctlseq(void);
@@ -239,8 +239,9 @@
 
 static void term_reset(void)
 {
-	row = col = 0;
-	top = 0;
+	row = 1;
+	col = 0;
+	top = 1;
 	bot = pad_rows();
 	mode = MODE_CURSOR | MODE_WRAP;
 	fg = FGCOLOR;
@@ -908,7 +909,7 @@
 	switch (c) {
 	case 'H':	/* CUP		move cursor to row, column */
 	case 'f':	/* HVP		move cursor to row, column */
-		move_cursor(absrow(MAX(0, args[0] - 1)), MAX(0, args[1] - 1));
+		move_cursor(absrow(MAX(1, args[0] - 1)), MAX(0, args[1] - 1));
 		break;
 	case 'J':	/* ED		erase display */
 		switch (args[0]) {
