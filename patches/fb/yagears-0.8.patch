# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build egl-opengl-stubs-build libpng-build tiff-build"

PKG_CONFIG_PATH=/fb/share/pkgconfig pkg-config --exists --print-errors $REQUIRES || exit 1

if PKG_CONFIG_PATH=/fb/share/pkgconfig pkg-config --exists glut-build; then
  GLUT=1
  REQUIRES="$REQUIRES glut-build"
fi

# configure (ac-2.69; am-1.13; lt-2.4.2)
libtoolize -c -f; aclocal; autoconf; autoheader -f; automake -a -c
PKG_CONFIG_PATH=/fb/lib/pkgconfig LDFLAGS=-Wl,-rpath,/fb/lib ./configure --disable-glesv1_cm --prefix=/fb

# build
make

# install
install -d $DESTDIR/fb/bin
install yagears $DESTDIR/fb/bin
test $GLUT && install yagears-gui $DESTDIR/fb/bin
test $GLUT && install yagears-mosaic $DESTDIR/fb/bin

# build.pc
install -d $DESTDIR/fb/share/pkgconfig
cat > $DESTDIR/fb/share/pkgconfig/yagears-build.pc << EOF
Name: yagears
Version: 0.8
Description: Yet Another Gears OpenGL demo
Requires: $REQUIRES

exec=\\
/fb/bin/yagears \\
EOF
test $GLUT && echo /fb/bin/yagears-gui \\ >> $DESTDIR/fb/share/pkgconfig/yagears-build.pc
test $GLUT && echo /fb/bin/yagears-mosaic \\ >> $DESTDIR/fb/share/pkgconfig/yagears-build.pc
sed -i '$ s/ \\//' $DESTDIR/fb/share/pkgconfig/yagears-build.pc

exit
--- yagears-0.8.orig/configure.ac
+++ yagears-0.8/configure.ac
@@ -1,6 +1,7 @@
 AC_INIT(yagears, 0.8)
 
 AC_CONFIG_HEADERS(config.h)
+AC_CONFIG_MACRO_DIR([m4])
 
 AM_INIT_AUTOMAKE
 
@@ -88,10 +89,13 @@
   if test x$enable_gl_x11 = xyes; then
     save_LIBS=$LIBS
     LIBS="$LIBS `$PKG_CONFIG --libs-only-L gl 2> /dev/null`"
-    AC_CHECK_LIB(GL, glXCreateContext,
-                 AC_DEFINE(GL_X11, 1, Support for OpenGL Extension to Xlib) X11_LIBS=-lX11,
-                 enable_gl_x11=no)
+    AC_CHECK_LIB(GL, glXCreateContext, , enable_gl_x11=no)
     LIBS=$save_LIBS
+    if test x$enable_gl_x11 = xyes; then
+      PKG_CHECK_MODULES(X11, x11,
+                        AC_DEFINE(GL_X11, 1, Support for OpenGL Extension to Xlib),
+                        enable_gl_x11=no)
+    fi
   fi
 
   if test x$enable_gl_directfb = xyes; then
@@ -126,10 +130,15 @@
    test x$enable_egl_wayland = xyes || test x$enable_egl_drm; then
   PKG_CHECK_MODULES(EGL, egl, enable_egl=yes, enable_egl=no)
   if test x$enable_egl = xyes; then
+    EGL_CFLAGS="$EGL_CFLAGS -DEGL_NO_PLATFORM_SPECIFIC_TYPES"
     if test x$enable_egl_x11 = xyes; then
-      PKG_CHECK_MODULES(X11, x11,
-                        AC_DEFINE(EGL_X11, 1, Support for EGL with Xlib platform),
-                        enable_egl_x11=no)
+      if test x$enable_gl_x11 = xyes; then
+        AC_DEFINE(EGL_X11, 1, Support for EGL with Xlib platform)
+      else
+        PKG_CHECK_MODULES(X11, x11,
+                          AC_DEFINE(EGL_X11, 1, Support for EGL with Xlib platform),
+                          enable_egl_x11=no)
+      fi
     fi
     if test x$enable_egl_directfb = xyes; then
       if test x$enable_gl_directfb = xyes; then
@@ -151,7 +160,7 @@
     if test x$enable_egl_drm = xyes; then
       AC_MSG_CHECKING(for DRI driver)
       DRIDRIVERDIR=`$PKG_CONFIG --variable=dridriverdir dri 2> /dev/null`
-      if test -d $DRIDRIVERDIR; then
+      if test -d "$DRIDRIVERDIR"; then
         AC_MSG_RESULT(yes)
         PKG_CHECK_MODULES(DRM, libdrm libevdev,
                           AC_DEFINE(EGL_DRM, 1, Support for EGL with DRM platform),
--- yagears-0.8.orig/gui.cc
+++ yagears-0.8/gui.cc
@@ -35,6 +35,14 @@
 #endif
 #if defined(GLUT)
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
+extern "C" {
+void glutInitContextProfile(int);
+void glutLeaveMainLoop();
+void glutExit();
+}
 #endif
 #if defined(GTK)
 #include <gtk/gtkgl.h>
@@ -659,6 +667,7 @@
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH);
     glutInitWindowSize(win_width, win_height);
     glutInitWindowPosition(win_posx, win_posy);
+    glutInitContextProfile(gears_engine_version(gears_engine) ? GLUT_ES_PROFILE : 0);
     glut_win = glutCreateWindow(NULL);
     glutDisplayFunc(glutDisplay);
     glutIdleFunc(glutIdle);
--- yagears-0.8.orig/main.c
+++ yagears-0.8/main.c
@@ -39,6 +39,10 @@
 #include <directfbgl.h>
 #endif
 #if defined(GL_FBDEV)
+#include <dirent.h>
+#include <fcntl.h>
+#include <linux/input.h>
+#include <sys/mman.h>
 #include <GL/glfbdev.h>
 #endif
 
@@ -49,6 +53,7 @@
 #include <directfb.h>
 #endif
 #if defined(EGL_FBDEV)
+#include <dirent.h>
 #include <fcntl.h>
 #include <linux/fb.h>
 #include <linux/input.h>
@@ -635,6 +640,9 @@
   struct fb_var_screeninfo fb_vinfo;
   struct fb_window *fb_win = NULL;
   int fb_keyboard = -1;
+  DIR *fb_input_dir = NULL;
+  struct dirent *fb_input_dev = NULL;
+  unsigned char fb_key_bits[(KEY_CNT - 1) / 8 + 1];
   struct input_event fb_event;
   #endif
   #if defined(GL_FBDEV)
@@ -1002,7 +1010,7 @@
   #if defined(EGL_FBDEV)
   if (!strcmp(backend, "egl-fbdev")) {
     setenv("EGL_PLATFORM", "fbdev", 1);
-    egl_dpy = eglGetDisplay((EGLNativeDisplayType)fb_dpy);
+    egl_dpy = eglGetDisplay((EGLNativeDisplayType)(long)fb_dpy);
   }
   #endif
   #if defined(EGL_WAYLAND)
@@ -1155,7 +1163,7 @@
   }
   #endif
   #if defined(GL_FBDEV) || defined(EGL_FBDEV)
-  if (!strcmp(backend, "gl-fbdev")) {
+  if (!strcmp(backend, "gl-fbdev") || !strcmp(backend, "egl-fbdev")) {
     fb_win = calloc(1, sizeof(struct fb_window));
     if (!fb_win) {
       printf("fb_window calloc failed: %s\n", strerror(errno));
@@ -1363,17 +1371,39 @@
   if (!strcmp(backend, "gl-fbdev") || !strcmp(backend, "egl-fbdev")) {
     if (getenv("KEYBOARD")) {
       fb_keyboard = open(getenv("KEYBOARD"), O_RDONLY | O_NONBLOCK);
-      if (fb_keyboard == -1) {
-        printf("open %s failed: %s\n", getenv("KEYBOARD"), strerror(errno));
-        goto out;
-      }
     }
     else {
-      fb_keyboard = open("/dev/input/event0", O_RDONLY | O_NONBLOCK);
-      if (fb_keyboard == -1) {
-        printf("open /dev/input/event0 failed: %s\n", strerror(errno));
+      fb_input_dir = opendir("/dev/input");
+      if (!fb_input_dir) {
+        printf("opendir /dev/input failed: %s\n", strerror(errno));
         goto out;
       }
+
+      c = alloca(64);
+
+      while ((fb_input_dev = readdir(fb_input_dir))) {
+        if (fb_input_dev->d_type == DT_CHR) {
+          sprintf(c, "/dev/input/%s", fb_input_dev->d_name);
+          fb_keyboard = open(c, O_RDONLY | O_NONBLOCK);
+          if (fb_keyboard == -1)
+            continue;
+
+          err = ioctl(fb_keyboard, EVIOCGBIT(EV_KEY, sizeof(fb_key_bits)), fb_key_bits);
+          if (err == -1)
+            continue;
+
+          if (fb_key_bits[KEY_ENTER / 8] & (1 << (KEY_ENTER % 8)))
+            break;
+
+          close(fb_keyboard);
+          fb_keyboard = -1;
+        }
+      }
+    }
+
+    if (fb_keyboard == -1) {
+      printf("open keyboard event device failed\n");
+      goto out;
     }
   }
   #endif
@@ -1635,6 +1665,10 @@
     if (fb_keyboard != -1) {
       close(fb_keyboard);
     }
+
+    if (fb_input_dir) {
+      closedir(fb_input_dir);
+    }
   }
   #endif
   #if defined(EGL_WAYLAND)
--- yagears-0.8.orig/mosaic.c
+++ yagears-0.8/mosaic.c
@@ -22,6 +22,14 @@
 */
 
 #include <GL/glut.h>
+#ifndef GLUT_ES_PROFILE
+#define GLUT_ES_PROFILE 4
+#endif
+void glutInitContextProfile(int);
+void glutSetWindowData(void *data);
+void *glutGetWindowData();
+void glutLeaveMainLoop();
+void glutExit();
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -78,7 +86,7 @@
 
 static void glutDisplay()
 {
-  int n = (int)glutGetWindowData();
+  int n = (long)glutGetWindowData();
 
   if (animate) { if (frames) rotate(n); else t_rate = t_rot = current_time(); }
   gears_engine_draw(gears_engine[n], view_tz[n], view_rx[n], view_ry[n], model_rz[n]);
@@ -117,7 +125,7 @@
 
 static void glutSpecial(int key, int x, int y)
 {
-  int n = (int)glutGetWindowData();
+  int n = (long)glutGetWindowData();
 
   switch (key) {
     case GLUT_KEY_PAGE_DOWN:
@@ -192,8 +200,9 @@
     for (j = 0; j < COLS; j++) {
       gears_engine[i * COLS + j] = gears_engine_new(gears_engine_name(opt));
       glutInitWindowPosition(win_posx, win_posy);
+      glutInitContextProfile(gears_engine_version(gears_engine[i * COLS + j]) ? GLUT_ES_PROFILE : 0);
       glut_win[i * COLS + j] = glutCreateWindow(NULL);
-      glutSetWindowData((void *)(i * COLS + j));
+      glutSetWindowData((void *)(long)(i * COLS + j));
       glutDisplayFunc(glutDisplay);
       glutIdleFunc(glutIdle);
       glutKeyboardFunc(glutKeyboard);
