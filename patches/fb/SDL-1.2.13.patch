# This file is part of HiGFXback

# requires
REQUIRES="autotools-wrappers-lt-build"

pkg-config --exists --print-errors $REQUIRES || exit 1

pkg-config --exists alsa-lib-build && REQUIRES="$REQUIRES alsa-lib-build"

if PKG_CONFIG_PATH=/fb/share/pkgconfig pkg-config --exists egl-opengl-stubs-build; then
  GL=1
  REQUIRES="$REQUIRES egl-opengl-stubs-build"
fi

# configure (ac-2.61; lt-1.5.26)
libtoolize -c -f; cp acinclude.m4 aclocal.m4; autoconf
cd test; cp acinclude.m4 aclocal.m4; autoconf; cd -
./configure --disable-assembly --disable-rpath --disable-static --prefix=/fb
cd test; PKG_CONFIG_PATH=/fb/lib/pkgconfig SDL_CFLAGS="-I../include" SDL_LIBS="-L../build/.libs -lSDL -Wl,-rpath,/fb/lib" ./configure --with-testdatadir=/fb/share/SDL/test; cd -

# build
make
make -C test

# install
install -d $DESTDIR/fb/include/SDL
install -m 644 include/begin_code.h $DESTDIR/fb/include/SDL
install -m 644 include/close_code.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_active.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_audio.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_cdrom.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_config.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_cpuinfo.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_endian.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_error.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_events.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_joystick.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_keyboard.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_keysym.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_loadso.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_main.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_mouse.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_mutex.h $DESTDIR/fb/include/SDL
test $GL && install -m 644 include/SDL_opengl.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_platform.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_quit.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_rwops.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_stdinc.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_thread.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_timer.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_version.h $DESTDIR/fb/include/SDL
install -m 644 include/SDL_video.h $DESTDIR/fb/include/SDL
install -d $DESTDIR/fb/lib
install build/.libs/libSDL-1.2.so.0.* $DESTDIR/fb/lib/libSDL-1.2.so.0
ln -sf libSDL-1.2.so.0 $DESTDIR/fb/lib/libSDL.so
install -d $DESTDIR/fb/lib/pkgconfig
install -m 644 sdl.pc $DESTDIR/fb/lib/pkgconfig
install -d $DESTDIR/fb/share/SDL/test
install test/checkkeys $DESTDIR/fb/share/SDL/test
install test/graywin $DESTDIR/fb/share/SDL/test
install test/loopwave $DESTDIR/fb/share/SDL/test
install -m 644 test/icon.bmp $DESTDIR/fb/share/SDL/test
install -m 644 test/moose.dat $DESTDIR/fb/share/SDL/test
install -m 644 test/sail.bmp $DESTDIR/fb/share/SDL/test
install -m 644 test/sample.bmp $DESTDIR/fb/share/SDL/test
install -m 644 test/sample.wav $DESTDIR/fb/share/SDL/test
install test/testalpha $DESTDIR/fb/share/SDL/test
install test/testbitmap $DESTDIR/fb/share/SDL/test
install test/testblitspeed $DESTDIR/fb/share/SDL/test
install test/testcdrom $DESTDIR/fb/share/SDL/test
install test/testcursor $DESTDIR/fb/share/SDL/test
install test/testerror $DESTDIR/fb/share/SDL/test
install test/testfile $DESTDIR/fb/share/SDL/test
test $GL && install test/testgl $DESTDIR/fb/share/SDL/test
install test/testiconv $DESTDIR/fb/share/SDL/test
install test/testjoystick $DESTDIR/fb/share/SDL/test
install test/testkeys $DESTDIR/fb/share/SDL/test
install test/testloadso $DESTDIR/fb/share/SDL/test
install test/testlock $DESTDIR/fb/share/SDL/test
install test/testoverlay $DESTDIR/fb/share/SDL/test
install test/testoverlay2 $DESTDIR/fb/share/SDL/test
install test/testpalette $DESTDIR/fb/share/SDL/test
install test/testplatform $DESTDIR/fb/share/SDL/test
install test/testsem $DESTDIR/fb/share/SDL/test
install test/testsprite $DESTDIR/fb/share/SDL/test
install test/testhread $DESTDIR/fb/share/SDL/test/testthread
install test/testtimer $DESTDIR/fb/share/SDL/test
install test/testver $DESTDIR/fb/share/SDL/test
install test/testvidinfo $DESTDIR/fb/share/SDL/test
install test/testwin $DESTDIR/fb/share/SDL/test
install test/testwm $DESTDIR/fb/share/SDL/test
install test/threadwin $DESTDIR/fb/share/SDL/test
install test/torturethread $DESTDIR/fb/share/SDL/test
install -m 644 test/utf8.txt $DESTDIR/fb/share/SDL/test

# build.pc
install -d $DESTDIR/fb/share/pkgconfig
cat > $DESTDIR/fb/share/pkgconfig/sdl-build.pc << EOF
Name: SDL
Version: 1.2.13
Description: Simple DirectMedia Layer library
Requires: $REQUIRES

devel=\\
/fb/include/SDL/begin_code.h \\
/fb/include/SDL/close_code.h \\
/fb/include/SDL/SDL.h \\
/fb/include/SDL/SDL_active.h \\
/fb/include/SDL/SDL_audio.h \\
/fb/include/SDL/SDL_cdrom.h \\
/fb/include/SDL/SDL_config.h \\
/fb/include/SDL/SDL_cpuinfo.h \\
/fb/include/SDL/SDL_endian.h \\
/fb/include/SDL/SDL_error.h \\
/fb/include/SDL/SDL_events.h \\
/fb/include/SDL/SDL_joystick.h \\
/fb/include/SDL/SDL_keyboard.h \\
/fb/include/SDL/SDL_keysym.h \\
/fb/include/SDL/SDL_loadso.h \\
/fb/include/SDL/SDL_main.h \\
/fb/include/SDL/SDL_mouse.h \\
/fb/include/SDL/SDL_mutex.h \\
EOF
test $GL && cat >> $DESTDIR/fb/share/pkgconfig/sdl-build.pc << EOF
/fb/include/SDL/SDL_opengl.h \\
EOF
cat >> $DESTDIR/fb/share/pkgconfig/sdl-build.pc << EOF
/fb/include/SDL/SDL_platform.h \\
/fb/include/SDL/SDL_quit.h \\
/fb/include/SDL/SDL_rwops.h \\
/fb/include/SDL/SDL_stdinc.h \\
/fb/include/SDL/SDL_thread.h \\
/fb/include/SDL/SDL_timer.h \\
/fb/include/SDL/SDL_version.h \\
/fb/include/SDL/SDL_video.h \\
/fb/lib/libSDL.so \\
/fb/lib/pkgconfig/sdl.pc

exec=\\
/fb/lib/libSDL-1.2.so.0 \\
/fb/share/SDL/test/checkkeys \\
/fb/share/SDL/test/graywin \\
/fb/share/SDL/test/icon.bmp \\
/fb/share/SDL/test/loopwave \\
/fb/share/SDL/test/moose.dat \\
/fb/share/SDL/test/sail.bmp \\
/fb/share/SDL/test/sample.bmp \\
/fb/share/SDL/test/sample.wav \\
/fb/share/SDL/test/testalpha \\
/fb/share/SDL/test/testbitmap \\
/fb/share/SDL/test/testblitspeed \\
/fb/share/SDL/test/testcdrom \\
/fb/share/SDL/test/testcursor \\
/fb/share/SDL/test/testerror \\
/fb/share/SDL/test/testfile \\
EOF
test $GL && cat >> $DESTDIR/fb/share/pkgconfig/sdl-build.pc << EOF
/fb/share/SDL/test/testgl \\
EOF
cat >> $DESTDIR/fb/share/pkgconfig/sdl-build.pc << EOF
/fb/share/SDL/test/testiconv \\
/fb/share/SDL/test/testjoystick \\
/fb/share/SDL/test/testkeys \\
/fb/share/SDL/test/testloadso \\
/fb/share/SDL/test/testlock \\
/fb/share/SDL/test/testoverlay \\
/fb/share/SDL/test/testoverlay2 \\
/fb/share/SDL/test/testpalette \\
/fb/share/SDL/test/testplatform \\
/fb/share/SDL/test/testsem \\
/fb/share/SDL/test/testsprite \\
/fb/share/SDL/test/testthread \\
/fb/share/SDL/test/testtimer \\
/fb/share/SDL/test/testver \\
/fb/share/SDL/test/testvidinfo \\
/fb/share/SDL/test/testwin \\
/fb/share/SDL/test/testwm \\
/fb/share/SDL/test/threadwin \\
/fb/share/SDL/test/torturethread \\
/fb/share/SDL/test/utf8.txt
EOF

exit
--- SDL-1.2.13.orig/configure.in
+++ SDL-1.2.13/configure.in
@@ -40,7 +40,7 @@
 AC_SUBST(LT_AGE)
 
 dnl Detect the canonical build and host environments
-AC_CONFIG_AUX_DIRS($srcdir/build-scripts)
+AC_CONFIG_AUX_DIR(build-scripts)
 AC_CANONICAL_HOST
 AC_C_BIGENDIAN
 if test x$ac_cv_c_bigendian = xyes; then
@@ -66,6 +66,7 @@
         BASE_LDFLAGS="-mno-cygwin"
         ;;
     *)
+        INCLUDE="$INCLUDE -idirafter $prefix/include"
         BASE_CFLAGS="-D_GNU_SOURCE=1"
         BASE_LDFLAGS=""
         ;;
@@ -345,8 +346,8 @@
         LIBS="$alsa_save_LIBS"
         if test x$have_alsa = xyes; then
             AC_ARG_ENABLE(alsa-shared,
-AC_HELP_STRING([--enable-alsa-shared], [dynamically load ALSA audio support [[default=yes]]]),
-                          , enable_alsa_shared=yes)
+AC_HELP_STRING([--enable-alsa-shared], [dynamically load ALSA audio support [[default=no]]]),
+                          , enable_alsa_shared=no)
             if test "x`echo $ALSA_LIBS | grep -- -L`" = "x"; then
                 if test "x`ls /lib/libasound.so.* 2> /dev/null`" != "x"; then
                     ALSA_LIBS="-L/lib $ALSA_LIBS"
@@ -1569,7 +1570,6 @@
         AC_TRY_COMPILE([
          #include <GL/gl.h>
          #include <GL/glx.h>
-         #include <GL/glu.h>
         ],[
         ],[
         video_opengl=yes
@@ -1582,6 +1582,26 @@
     fi
 }
 
+CheckOpenGLFBDev()
+{
+    if test x$enable_video = xyes -a x$enable_video_opengl = xyes; then
+        AC_MSG_CHECKING(for OpenGL (GLFBDev) support)
+        video_opengl=no
+        AC_TRY_COMPILE([
+         #include <GL/gl.h>
+         #include <GL/glfbdev.h>
+        ],[
+        ],[
+        video_opengl=yes
+        ])
+        AC_MSG_RESULT($video_opengl)
+        if test x$video_opengl = xyes; then
+            AC_DEFINE(SDL_VIDEO_OPENGL)
+            AC_DEFINE(SDL_VIDEO_OPENGL_GLFBDEV)
+        fi
+    fi
+}
+
 dnl Find QNX RtP OpenGL
 CheckOpenGLQNX()
 {
@@ -2265,6 +2285,7 @@
         CheckQtopia
         CheckPicoGUI
         CheckOpenGLX11
+        CheckOpenGLFBDev
         CheckInputEvents
         CheckTslib
         CheckUSBHID
--- SDL-1.2.13.orig/include/SDL_config.h.in
+++ SDL-1.2.13/include/SDL_config.h.in
@@ -294,6 +294,7 @@
 /* Enable OpenGL support */
 #undef SDL_VIDEO_OPENGL
 #undef SDL_VIDEO_OPENGL_GLX
+#undef SDL_VIDEO_OPENGL_GLFBDEV
 #undef SDL_VIDEO_OPENGL_WGL
 #undef SDL_VIDEO_OPENGL_OSMESA
 #undef SDL_VIDEO_OPENGL_OSMESA_DYNAMIC
--- SDL-1.2.13.orig/include/SDL_opengl.h
+++ SDL-1.2.13/include/SDL_opengl.h
@@ -42,7 +42,6 @@
 #include <glu.h>	/* Header File For The GLU Library */
 #else
 #include <GL/gl.h>	/* Header File For The OpenGL Library */
-#include <GL/glu.h>	/* Header File For The GLU Library */
 #endif
 #ifndef NO_SDL_GLEXT
 #undef __glext_h_
--- SDL-1.2.13.orig/src/video/fbcon/SDL_fbvideo.c
+++ SDL-1.2.13/src/video/fbcon/SDL_fbvideo.c
@@ -64,6 +64,73 @@
 */
 #endif /* FB_TYPE_VGA_PLANES */
 
+#if SDL_VIDEO_OPENGL_GLFBDEV
+#include <dlfcn.h>
+#include <GL/glfbdev.h>
+
+struct fb_window {
+	int width;
+	int height;
+	int posx;
+	int posy;
+};
+
+struct SDL_PrivateGLData {
+	GLFBDevContextPtr glfbdev_context;
+	GLFBDevVisualPtr  glfbdev_visual;
+	GLFBDevBufferPtr  glfbdev_buffer;
+
+	void *(*glFBDevGetProcAddress)
+		( const char                     *procName );
+
+	GLFBDevVisualPtr (*glFBDevCreateVisual)
+		( const struct fb_fix_screeninfo *fixInfo,
+		  const struct fb_var_screeninfo *varInfo,
+		  const int                      *attribs );
+
+	void (*glFBDevDestroyVisual)
+		( GLFBDevVisualPtr                visual );
+
+	GLFBDevBufferPtr (*glFBDevCreateBuffer)
+		( const struct fb_fix_screeninfo *fixInfo,
+		  const struct fb_var_screeninfo *varInfo,
+		  const GLFBDevVisualPtr          visual,
+		  void                           *frontBuffer,
+		  void                           *backBuffer,
+		  size_t                          size );
+
+	void (*glFBDevDestroyBuffer)
+		( GLFBDevBufferPtr                buffer );
+
+	GLFBDevContextPtr (*glFBDevCreateContext)
+		( const GLFBDevVisualPtr          visual,
+		  GLFBDevContextPtr               share );
+
+	void (*glFBDevDestroyContext)
+		( GLFBDevContextPtr               context );
+
+	int (*glFBDevMakeCurrent)
+		( GLFBDevContextPtr               context,
+		  GLFBDevBufferPtr                drawBuffer,
+		  GLFBDevBufferPtr                readBuffer );
+
+	void (*glFBDevSwapBuffers)
+		( GLFBDevBufferPtr                buffer );
+
+	int (*glFBDevGetVisualAttrib)
+		( const GLFBDevVisualPtr          visual,
+		  int                             attrib );
+
+	void (*glFBDevSetWindow)
+		( GLFBDevBufferPtr                buffer,
+		  void                           *window );
+};
+
+#define glfbdev_context (this->gl_data->glfbdev_context)
+#define glfbdev_visual  (this->gl_data->glfbdev_visual)
+#define glfbdev_buffer  (this->gl_data->glfbdev_buffer)
+#endif
+ 
 /* A list of video resolutions that we query for (sorted largest to smallest) */
 static const SDL_Rect checkres[] = {
 	{  0, 0, 1600, 1200 },		/* 16 bpp: 0x11E, or 286 */
@@ -147,6 +214,14 @@
 static void FB_WaitVBL(_THIS);
 static void FB_WaitIdle(_THIS);
 static int FB_FlipHWSurface(_THIS, SDL_Surface *surface);
+#if SDL_VIDEO_OPENGL_GLFBDEV
+static int FB_GL_GetAttribute(_THIS, SDL_GLattr attrib, int *value);
+static int FB_GL_MakeCurrent(_THIS);
+static void FB_GL_SwapBuffers(_THIS);
+static int FB_GL_LoadLibrary(_THIS, const char *path);
+static void FB_GL_UnloadLibrary(_THIS);
+static void *FB_GL_GetProcAddress(_THIS, const char *proc);
+#endif
 
 /* Internal palette functions */
 static void FB_SavePalette(_THIS, struct fb_fix_screeninfo *finfo,
@@ -207,6 +282,9 @@
 static void FB_DeleteDevice(SDL_VideoDevice *device)
 {
 	SDL_free(device->hidden);
+	if ( device->gl_data ) {
+		SDL_free(device->gl_data);
+	}
 	SDL_free(device);
 }
 
@@ -218,10 +296,20 @@
 	this = (SDL_VideoDevice *)SDL_malloc(sizeof(SDL_VideoDevice));
 	if ( this ) {
 		SDL_memset(this, 0, (sizeof *this));
+#if SDL_VIDEO_OPENGL_GLFBDEV
+		this->gl_data = (struct SDL_PrivateGLData *)
+				SDL_malloc((sizeof *this->gl_data));
+		SDL_memset(this->gl_data, 0, (sizeof *this->gl_data));
+#endif
 		this->hidden = (struct SDL_PrivateVideoData *)
 				SDL_malloc((sizeof *this->hidden));
+		SDL_memset(this->hidden, 0, (sizeof *this->hidden));
 	}
-	if ( (this == NULL) || (this->hidden == NULL) ) {
+	if ( (this == NULL) ||
+#if SDL_VIDEO_OPENGL_GLFBDEV
+	   (this->gl_data == NULL) ||
+#endif
+	   (this->hidden == NULL) ) {
 		SDL_OutOfMemory();
 		if ( this ) {
 			SDL_free(this);
@@ -250,6 +338,13 @@
 	this->UnlockHWSurface = FB_UnlockHWSurface;
 	this->FlipHWSurface = FB_FlipHWSurface;
 	this->FreeHWSurface = FB_FreeHWSurface;
+#if SDL_VIDEO_OPENGL_GLFBDEV
+	this->GL_LoadLibrary = FB_GL_LoadLibrary;
+	this->GL_GetProcAddress = FB_GL_GetProcAddress;
+	this->GL_GetAttribute = FB_GL_GetAttribute;
+	this->GL_MakeCurrent = FB_GL_MakeCurrent;
+	this->GL_SwapBuffers = FB_GL_SwapBuffers;
+#endif
 	this->SetCaption = NULL;
 	this->SetIcon = NULL;
 	this->IconifyWindow = NULL;
@@ -1069,6 +1164,48 @@
 	/* Set the update rectangle function */
 	this->UpdateRects = FB_DirectUpdate;
 
+	/* Set the OpenGL context */
+	if ( flags & SDL_OPENGL ) {
+#if SDL_VIDEO_OPENGL_GLFBDEV
+		int attribs[64];
+		struct fb_window window = { width, height, 0, 0 };
+
+		if ( FB_GL_LoadLibrary(this, NULL) < 0 ) {
+			return(NULL);
+		}
+
+		i = 0;
+		attribs[i++] = GLFBDEV_DOUBLE_BUFFER;
+		attribs[i++] = GLFBDEV_DEPTH_SIZE;
+		attribs[i++] = 1;
+		attribs[i++] = GLFBDEV_NONE;
+		glfbdev_visual = this->gl_data->glFBDevCreateVisual(&finfo, &vinfo, attribs);
+		if ( ! glfbdev_visual ) {
+			SDL_SetError( "Could not create visual");
+			return(NULL);
+		}
+
+		glfbdev_buffer = this->gl_data->glFBDevCreateBuffer(&finfo, &vinfo, glfbdev_visual,
+		                                                    mapped_mem, NULL, finfo.smem_len);
+		if ( ! glfbdev_buffer ) {
+			SDL_SetError("Could not create window");
+			return(NULL);
+		}
+
+		this->gl_data->glFBDevSetWindow(glfbdev_buffer, &window);
+
+		glfbdev_context = this->gl_data->glFBDevCreateContext(glfbdev_visual, NULL);
+		if ( ! glfbdev_context ) {
+			SDL_SetError("Could not create GL context");
+			return(NULL);
+		}
+
+		current->flags |= SDL_OPENGL;
+#else
+		return(NULL);
+#endif
+	}
+
 	/* We're done */
 	return(current);
 }
@@ -1636,6 +1773,26 @@
 {
 	int i, j;
 
+#if SDL_VIDEO_OPENGL_GLFBDEV
+	/* Clean up OpenGL */
+	if ( this->screen ) {
+		this->screen->flags &= ~SDL_OPENGL;
+	}
+	if ( glfbdev_context ) {
+		this->gl_data->glFBDevMakeCurrent(NULL, NULL, NULL);
+		this->gl_data->glFBDevDestroyContext(glfbdev_context);
+		glfbdev_context = NULL;
+	}
+	if ( glfbdev_buffer ) {
+		this->gl_data->glFBDevDestroyBuffer(glfbdev_buffer);
+		glfbdev_buffer = NULL;
+	}
+	if ( glfbdev_visual ) {
+		this->gl_data->glFBDevDestroyVisual(glfbdev_visual);
+		glfbdev_visual = NULL;
+	}
+#endif
+
 	if ( this->screen ) {
 		/* Clear screen and tell SDL not to free the pixels */
 		if ( this->screen->pixels && FB_InGraphicsMode(this) ) {
@@ -1698,4 +1855,169 @@
 	}
 	FB_CloseMouse(this);
 	FB_CloseKeyboard(this);
+
+#if SDL_VIDEO_OPENGL_GLFBDEV
+	/* Unload GL library */
+	FB_GL_UnloadLibrary(this);
+#endif
+}
+
+#if SDL_VIDEO_OPENGL_GLFBDEV
+
+static int FB_GL_GetAttribute(_THIS, SDL_GLattr attrib, int *value)
+{
+	struct fb_var_screeninfo vinfo;
+
+	if ( ioctl(console_fd, FBIOGET_VSCREENINFO, &vinfo) < 0 ) {
+		SDL_SetError("Couldn't get console screen info");
+		return(-1);
+	}
+
+	switch ( attrib ) {
+		case SDL_GL_RED_SIZE:
+			*value = vinfo.red.length;
+			break;
+		case SDL_GL_GREEN_SIZE:
+			*value = vinfo.green.length;
+			break;
+		case SDL_GL_BLUE_SIZE:
+			*value = vinfo.blue.length;
+			break;
+		case SDL_GL_ALPHA_SIZE:
+			*value = vinfo.transp.length;
+			break;
+		case SDL_GL_DOUBLEBUFFER:
+			*value = 1;
+			break;
+		case SDL_GL_BUFFER_SIZE:
+			*value = vinfo.red.length + vinfo.green.length + vinfo.blue.length + vinfo.transp.length;
+			break;
+		case SDL_GL_DEPTH_SIZE:
+			*value = this->gl_data->glFBDevGetVisualAttrib(glfbdev_visual, GLFBDEV_DEPTH_SIZE);
+			break;
+		default:
+			return(-1);
+	}
+}
+
+static int FB_GL_MakeCurrent(_THIS)
+{
+	int retval;
+
+	retval = this->gl_data->glFBDevMakeCurrent(glfbdev_context, glfbdev_buffer, glfbdev_buffer);
+	if ( ! retval ) {
+		SDL_SetError("Unable to make GL context current");
+		retval = -1;
+	}
+
+	return(retval);
+}
+
+static void FB_GL_SwapBuffers(_THIS)
+{
+	this->gl_data->glFBDevSwapBuffers(glfbdev_buffer);
+}
+
+static int FB_GL_LoadLibrary(_THIS, const char *path)
+{
+	void *handle = NULL;
+
+	if ( path == NULL ) {
+		path = SDL_getenv("SDL_VIDEO_GL_DRIVER");
+		if ( path == NULL ) {
+			path = "libGL.so.1";
+		}
+	}
+
+	handle = dlopen(path, RTLD_NOW | RTLD_GLOBAL);
+	if ( handle == NULL ) {
+		SDL_SetError("Failed loading %s", path);
+		return(-1);
+	}
+
+	/* Unload the old driver and reset the pointers */
+	FB_GL_UnloadLibrary(this);
+
+	/* Load new function pointers */
+	this->gl_data->glFBDevGetProcAddress =
+		(void *(*)(const char *)) dlsym(handle, "glFBDevGetProcAddress");
+	this->gl_data->glFBDevCreateVisual =
+		(GLFBDevVisualPtr (*)(const struct fb_fix_screeninfo *, const struct fb_var_screeninfo *, const int *)) dlsym(handle, "glFBDevCreateVisual");
+	this->gl_data->glFBDevDestroyVisual =
+		(void (*)(GLFBDevVisualPtr)) dlsym(handle, "glFBDevDestroyVisual");
+	this->gl_data->glFBDevCreateBuffer =
+		(GLFBDevBufferPtr (*)(const struct fb_fix_screeninfo *, const struct fb_var_screeninfo *, const GLFBDevVisualPtr visual, void *, void *, size_t)) dlsym(handle, "glFBDevCreateBuffer");
+	this->gl_data->glFBDevDestroyBuffer =
+		(void (*)(GLFBDevBufferPtr)) dlsym(handle, "glFBDevDestroyBuffer");
+	this->gl_data->glFBDevCreateContext =
+		(GLFBDevContextPtr (*)(const GLFBDevVisualPtr, GLFBDevContextPtr)) dlsym(handle, "glFBDevCreateContext");
+	this->gl_data->glFBDevDestroyContext =
+		(void (*)(GLFBDevContextPtr)) dlsym(handle, "glFBDevDestroyContext");
+	this->gl_data->glFBDevMakeCurrent =
+		(int (*)(GLFBDevContextPtr, GLFBDevBufferPtr, GLFBDevBufferPtr)) dlsym(handle, "glFBDevMakeCurrent");
+	this->gl_data->glFBDevSwapBuffers =
+		(void (*)(GLFBDevBufferPtr)) dlsym(handle, "glFBDevSwapBuffers");
+	this->gl_data->glFBDevGetVisualAttrib =
+		(int (*)(const GLFBDevVisualPtr visual, int attrib)) dlsym(handle, "glFBDevGetVisualAttrib");
+	this->gl_data->glFBDevSetWindow =
+		(void (*)(GLFBDevBufferPtr, void *)) dlsym(handle, "glFBDevSetWindow");
+
+	if ( (this->gl_data->glFBDevCreateVisual == NULL) || 
+	     (this->gl_data->glFBDevDestroyVisual == NULL) ||
+	     (this->gl_data->glFBDevCreateBuffer == NULL) ||
+	     (this->gl_data->glFBDevDestroyBuffer == NULL) ||
+	     (this->gl_data->glFBDevCreateContext == NULL) ||
+	     (this->gl_data->glFBDevDestroyContext == NULL) ||
+	     (this->gl_data->glFBDevMakeCurrent == NULL) ||
+	     (this->gl_data->glFBDevSwapBuffers == NULL) ||
+	     (this->gl_data->glFBDevGetVisualAttrib == NULL) ||
+	     (this->gl_data->glFBDevSetWindow == NULL)) {
+		SDL_SetError("Could not retrieve OpenGL functions");
+		return(-1);
+	}
+
+	this->gl_config.dll_handle = handle;
+	this->gl_config.driver_loaded = 1;
+	if ( path ) {
+		SDL_strlcpy(this->gl_config.driver_path, path,
+			SDL_arraysize(this->gl_config.driver_path));
+	} else {
+		*this->gl_config.driver_path = '\0';
+	}
+	return(0);
 }
+
+static void FB_GL_UnloadLibrary(_THIS)
+{
+	if ( this->gl_config.driver_loaded ) {
+		dlclose(this->gl_config.dll_handle);
+
+		this->gl_data->glFBDevGetProcAddress = NULL;
+		this->gl_data->glFBDevCreateVisual = NULL;
+		this->gl_data->glFBDevDestroyVisual = NULL;
+		this->gl_data->glFBDevCreateBuffer = NULL;
+		this->gl_data->glFBDevDestroyBuffer = NULL;
+		this->gl_data->glFBDevCreateContext = NULL;
+		this->gl_data->glFBDevDestroyContext = NULL;
+		this->gl_data->glFBDevMakeCurrent = NULL;
+		this->gl_data->glFBDevSwapBuffers = NULL;
+		this->gl_data->glFBDevGetVisualAttrib = NULL;
+		this->gl_data->glFBDevSetWindow = NULL;
+
+		this->gl_config.dll_handle = NULL;
+		this->gl_config.driver_loaded = 0;
+	}
+}
+
+static void *FB_GL_GetProcAddress(_THIS, const char *proc)
+{
+	void *handle;
+	
+	handle = this->gl_config.dll_handle;
+	if ( this->gl_data->glFBDevGetProcAddress ) {
+		return this->gl_data->glFBDevGetProcAddress(proc);
+	}
+	return dlsym(handle, proc);
+}
+
+#endif
--- SDL-1.2.13.orig/test/Makefile.in
+++ SDL-1.2.13/test/Makefile.in
@@ -4,7 +4,7 @@
 
 CC      = @CC@
 EXE	= @EXE@
-CFLAGS  = @CFLAGS@
+CFLAGS  = @CFLAGS@ -DTESTDATADIR=\"@TESTDATADIR@\"
 LIBS	= @LIBS@
 
 TARGETS = checkkeys$(EXE) graywin$(EXE) loopwave$(EXE) testalpha$(EXE) testbitmap$(EXE) testblitspeed$(EXE) testcdrom$(EXE) testcursor$(EXE) testdyngl$(EXE) testerror$(EXE) testfile$(EXE) testgamma$(EXE) testgl$(EXE) testhread$(EXE) testiconv$(EXE) testjoystick$(EXE) testkeys$(EXE) testlock$(EXE) testoverlay2$(EXE) testoverlay$(EXE) testpalette$(EXE) testplatform$(EXE) testsem$(EXE) testsprite$(EXE) testtimer$(EXE) testver$(EXE) testvidinfo$(EXE) testwin$(EXE) testwm$(EXE) threadwin$(EXE) torturethread$(EXE) testloadso$(EXE)
--- SDL-1.2.13.orig/test/acinclude.m4
+++ SDL-1.2.13/test/acinclude.m4
@@ -40,7 +40,9 @@
   AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
   no_sdl=""
   if test "$SDL_CONFIG" = "no" ; then
-    no_sdl=yes
+    if test -z "$SDL_CFLAGS" || test -z "$SDL_LIBS"; then
+       no_sdl=yes
+    fi
   else
     SDL_CFLAGS=`$SDL_CONFIG $sdlconf_args --cflags`
     SDL_LIBS=`$SDL_CONFIG $sdlconf_args --libs`
--- SDL-1.2.13.orig/test/configure.in
+++ SDL-1.2.13/test/configure.in
@@ -53,6 +53,13 @@
     *)
         EXE=""
         MATHLIB="-lm"
+        AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
+        if test x$PKG_CONFIG != xno; then
+            if $PKG_CONFIG --exists gl; then
+                CFLAGS="$CFLAGS `$PKG_CONFIG --cflags gl`"
+                XPATH=`$PKG_CONFIG --libs-only-L gl`
+            fi
+        fi
         SYS_GL_LIBS="-lGL"
         ;;
 esac
@@ -101,5 +108,11 @@
 fi
 AC_SUBST(GLLIB)
 
+AC_ARG_WITH(testdatadir,
+            [AS_HELP_STRING([--with-testdatadir], [test data directory])],
+            [TESTDATADIR=$with_testdatadir],
+            [TESTDATADIR=.])
+AC_SUBST(TESTDATADIR)
+
 dnl Finally create all the generated files
 AC_OUTPUT([Makefile])
--- SDL-1.2.13.orig/test/loopwave.c
+++ SDL-1.2.13/test/loopwave.c
@@ -70,7 +70,7 @@
 		return(1);
 	}
 	if ( argv[1] == NULL ) {
-		argv[1] = "sample.wav";
+		argv[1] = TESTDATADIR"/sample.wav";
 	}
 	/* Load the wave file into memory */
 	if ( SDL_LoadWAV(argv[1],
--- SDL-1.2.13.orig/test/testalpha.c
+++ SDL-1.2.13/test/testalpha.c
@@ -407,7 +407,7 @@
 	}
 
 	/* Load the sprite */
-	if ( LoadSprite(screen, "icon.bmp") < 0 ) {
+	if ( LoadSprite(screen, TESTDATADIR"/icon.bmp") < 0 ) {
 		SDL_FreeSurface(light);
 		quit(1);
 	}
--- SDL-1.2.13.orig/test/testblitspeed.c
+++ SDL-1.2.13/test/testblitspeed.c
@@ -269,7 +269,7 @@
         return(0);
     }
 
-    bmp = SDL_LoadBMP("sample.bmp");
+    bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
     if (bmp == NULL)
     {
         fprintf(stderr, "SDL_LoadBMP failed: %s\n", SDL_GetError());
--- SDL-1.2.13.orig/test/testcursor.c
+++ SDL-1.2.13/test/testcursor.c
@@ -152,7 +152,7 @@
 		return(1);
 	}
 
-	screen = SDL_SetVideoMode(320,200,8,SDL_ANYFORMAT);
+	screen = SDL_SetVideoMode(320,200,0,SDL_ANYFORMAT);
 	if (screen==NULL) {
 		fprintf(stderr, "Couldn't initialize video mode: %s\n",SDL_GetError());
 		return(1);
--- SDL-1.2.13.orig/test/testdyngl.c
+++ SDL-1.2.13/test/testdyngl.c
@@ -186,7 +186,7 @@
 
 		while(SDL_PollEvent(&event))
 		{
-			if(event.type & SDL_KEYDOWN)
+			if(event.type & SDL_KEYDOWN && event.key.keysym.sym == SDLK_ESCAPE)
 				done=1;
 		}
 
--- SDL-1.2.13.orig/test/testgamma.c
+++ SDL-1.2.13/test/testgamma.c
@@ -125,7 +125,7 @@
 #endif
 
 	/* Do all the drawing work */
-	image = SDL_LoadBMP("sample.bmp");
+	image = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( image ) {
 		SDL_Rect dst;
 
--- SDL-1.2.13.orig/test/testgl.c
+++ SDL-1.2.13/test/testgl.c
@@ -17,7 +17,7 @@
 #define SHADED_CUBE
 
 /* Define this to be the name of the logo image to use with -logo */
-#define LOGO_FILE	"icon.bmp"
+#define LOGO_FILE	TESTDATADIR"/icon.bmp"
 
 /* The SDL_OPENGLBLIT interface is deprecated.
    The code is still available for benchmark purposes though.
--- SDL-1.2.13.orig/test/testiconv.c
+++ SDL-1.2.13/test/testiconv.c
@@ -37,7 +37,7 @@
 	int errors = 0;
 
 	if ( !argv[1] ) {
-		argv[1] = "utf8.txt";
+		argv[1] = TESTDATADIR"/utf8.txt";
 	}
 	file = fopen(argv[1], "rb");
 	if ( !file ) {
--- SDL-1.2.13.orig/test/testoverlay.c
+++ SDL-1.2.13/test/testoverlay.c
@@ -480,7 +480,7 @@
 	SDL_WM_SetCaption("SDL test overlay", "testoverlay");
 
 	/* Load picture */
-	bmpfile=(argv[1]?argv[1]:"sample.bmp");
+	bmpfile=(argv[1]?argv[1]:TESTDATADIR"/sample.bmp");
 	pic = SDL_LoadBMP(bmpfile);
 	if ( pic == NULL ) {
 		fprintf(stderr, "Couldn't load %s: %s\n", bmpfile,
--- SDL-1.2.13.orig/test/testoverlay2.c
+++ SDL-1.2.13/test/testoverlay2.c
@@ -399,7 +399,7 @@
     }
 
     /* load the trojan moose images */
-    handle=SDL_RWFromFile("moose.dat", "rb");
+    handle=SDL_RWFromFile(TESTDATADIR"/moose.dat", "rb");
     if (handle==NULL)
     {
         fprintf(stderr, "Can't find the file moose.dat !\n");
--- SDL-1.2.13.orig/test/testpalette.c
+++ SDL-1.2.13/test/testpalette.c
@@ -175,7 +175,7 @@
 
     if (vidflags & SDL_FULLSCREEN) SDL_ShowCursor (SDL_FALSE);
 
-    if((boat[0] = SDL_LoadBMP("sail.bmp")) == NULL)
+    if((boat[0] = SDL_LoadBMP(TESTDATADIR"/sail.bmp")) == NULL)
 	sdlerr("loading sail.bmp");
     /* We've chosen magenta (#ff00ff) as colour key for the boat */
     SDL_SetColorKey(boat[0], SDL_SRCCOLORKEY | SDL_RLEACCEL,
@@ -330,6 +330,7 @@
 	/* update changed areas of the screen */
 	SDL_UpdateRects(screen, NBOATS, updates);
 	frames++;
+	SDL_Delay(1);
     } while(fade_level > 0);
 
     printf("%d frames, %.2f fps\n",
--- SDL-1.2.13.orig/test/testsprite.c
+++ SDL-1.2.13/test/testsprite.c
@@ -221,7 +221,7 @@
 	}
 
 	/* Load the sprite */
-	if ( LoadSprite("icon.bmp") < 0 ) {
+	if ( LoadSprite(TESTDATADIR"/icon.bmp") < 0 ) {
 		quit(1);
 	}
 
@@ -308,6 +308,7 @@
 			}
 		}
 		MoveSprites(screen, background);
+		SDL_Delay(1);
 	}
 	SDL_FreeSurface(sprite);
 	free(mem);
--- SDL-1.2.13.orig/test/testvidinfo.c
+++ SDL-1.2.13/test/testvidinfo.c
@@ -135,7 +135,7 @@
 	}
 
         /* run the generic blit test */
-	bmp = SDL_LoadBMP("sample.bmp");
+	bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( ! bmp ) {
 		printf("Couldn't load sample.bmp: %s\n", SDL_GetError());
 		return 0;
@@ -164,7 +164,7 @@
 	}
 
         /* run the colorkeyed blit test */
-	bmpcc = SDL_LoadBMP("sample.bmp");
+	bmpcc = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 	if ( ! bmpcc ) {
 		printf("Couldn't load sample.bmp: %s\n", SDL_GetError());
 		return 0;
@@ -260,7 +260,7 @@
         if (bmp->format->BitsPerPixel>8)
         {
 		SDL_FreeSurface(bmp);
-                bmp = SDL_LoadBMP("sample.bmp");
+                bmp = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 		SDL_SetAlpha(bmp, SDL_SRCALPHA, 85); /* 85 - 33% alpha */
 		tmp = bmp;
 		bmp = SDL_DisplayFormat(bmp);
@@ -297,7 +297,7 @@
         if (bmp->format->BitsPerPixel>8)
         {
 		SDL_FreeSurface(bmpcc);
-                bmpcc = SDL_LoadBMP("sample.bmp");
+                bmpcc = SDL_LoadBMP(TESTDATADIR"/sample.bmp");
 		SDL_SetAlpha(bmpcc, SDL_SRCALPHA, 85); /* 85 - 33% alpha */
                 SDL_SetColorKey(bmpcc, SDL_SRCCOLORKEY | SDL_RLEACCEL, *(Uint8 *)bmpcc->pixels);
 		tmp = bmpcc;
--- SDL-1.2.13.orig/test/testwin.c
+++ SDL-1.2.13/test/testwin.c
@@ -29,7 +29,7 @@
 
 	/* Load the image into a surface */
 	if ( bmpfile == NULL ) {
-		bmpfile = "sample.bmp";		/* Sample image */
+		bmpfile = TESTDATADIR"/sample.bmp";		/* Sample image */
 	}
 fprintf(stderr, "Loading picture: %s\n", bmpfile);
 	picture = SDL_LoadBMP(bmpfile);
--- SDL-1.2.13.orig/test/testwm.c
+++ SDL-1.2.13/test/testwm.c
@@ -317,7 +317,7 @@
 	}
 
 	/* Set the icon -- this must be done before the first mode set */
-	icon = LoadIconSurface("icon.bmp", &icon_mask);
+	icon = LoadIconSurface(TESTDATADIR"/icon.bmp", &icon_mask);
 	if ( icon != NULL ) {
 		SDL_WM_SetIcon(icon, icon_mask);
 	}
--- SDL-1.2.13.orig/test/threadwin.c
+++ SDL-1.2.13/test/threadwin.c
@@ -272,7 +272,7 @@
 	}
 
 	/* Set the icon -- this must be done before the first mode set */
-	icon = LoadIconSurface("icon.bmp", &icon_mask);
+	icon = LoadIconSurface(TESTDATADIR"/icon.bmp", &icon_mask);
 	if ( icon != NULL ) {
 		SDL_WM_SetIcon(icon, icon_mask);
 	}
